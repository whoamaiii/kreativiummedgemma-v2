{
  "timestamp": "2025-09-21T12:11:12.904Z",
  "summary": {
    "componentsAnalyzed": 62,
    "totalIssues": 270,
    "critical": 38,
    "high": 60,
    "medium": 172,
    "low": 0
  },
  "components": [
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "name": "PatternsPanel",
      "linesOfCode": 715,
      "complexityScore": 253,
      "issues": [
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 213,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const render = [\n        data.summary,\n        '',\n        data.causes?.length ?"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 338,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const socialFromTimeline = allEntries\n      .map((t) => ({\n        id: `tracking"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 371,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const topPlaces = agg([ ...allEntries.map((e) => e.environmentalData?.location),"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 605,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const rightContent = (\n        <div className=\"h-full\" ref={dockRef}>\n          "
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 544,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((pattern: PatternResult) => (\n                <Card key={stableKeyFromPatte"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 575,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((rec) => (\n                                  <li key={hashOfString(rec)} cl"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 703,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((msg, idx) => (\n                <div key={idx} className=\"p-3 bg-muted/50 r"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 704,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={idx}"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 318,
          "type": "large-list",
          "severity": "high",
          "message": "Rendering 80+ items without virtualization",
          "code": ".slice(0, 80)"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 359,
          "type": "large-list",
          "severity": "high",
          "message": "Rendering 60+ items without virtualization",
          "code": ".slice(0, 60)"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 425,
          "type": "large-list",
          "severity": "high",
          "message": "Rendering 60+ items without virtualization",
          "code": ".slice(0, 60)"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 431,
          "type": "large-list",
          "severity": "high",
          "message": "Rendering 60+ items without virtualization",
          "code": ".slice(0, 60)"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 434,
          "type": "large-list",
          "severity": "high",
          "message": "Rendering 60+ items without virtualization",
          "code": ".slice(0, 60)"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 506,
          "type": "large-list",
          "severity": "high",
          "message": "Rendering 80+ items without virtualization",
          "code": ".slice(0, 80)"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 254,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "forklaring. Prøv igjen.');\n        setExplanations("
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 370,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map((e) => e.environmentalData?.classroom?.activity?.toString()));\n    const to"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 428,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(fmtEntry).slice(0, 40),\n      '',\n      'Emosjoner (seneste):',\n      ...em"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 447,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map((t) => {\n          const ts = new Date(t.timestamp).toISOString().replace('"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 81,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        },
        {
          "file": "src/components/analytics-panels/PatternsPanel.tsx",
          "line": 81,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 3,
      "memoizationScore": 0
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "name": "AnalyticsDashboard",
      "linesOfCode": 814,
      "complexityScore": 117,
      "issues": [
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 335,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: filter(chart => !chart.studentId || chart.studentI...",
          "code": "filter(chart => !chart.studentId || chart.studentId === student.id)\n              .filter"
        },
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 334,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const overlappingCharts = registrations\n              .filter(chart => !chart.st"
        },
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 1,
          "type": "excessive-effects",
          "severity": "medium",
          "message": "Component has 9 useEffect hooks (consider consolidation)"
        },
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 709,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map(({ key, labelKey, testId, ariaLabelKey }) => (\n            <TabsTrigger\n   "
        },
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 257,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for shared logic\n  const handleManualRefresh = useCallback(() => {\n    setPendin"
        },
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 293,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "while analysis updates other tabs.\n\n  // Export handler with useCallback for per"
        },
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 389,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "format, exportData, pdfOptions);\n\n        setExportProgress("
        },
        {
          "file": "src/components/AnalyticsDashboard.tsx",
          "line": 408,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "format: ExportFormat) => {\n    if (format === 'pdf') {\n      setExportDialogOpen"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 9,
      "memoizationScore": 85
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "name": "InteractiveDataVisualization",
      "linesOfCode": 423,
      "complexityScore": 107,
      "issues": [
        {
          "file": "src/components/InteractiveDataVisualization.tsx",
          "line": 241,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const allTimestamps = [...filteredData.emotions.map(e => e.timestamp), ...filter"
        },
        {
          "file": "src/components/InteractiveDataVisualization.tsx",
          "line": 277,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const data = chartData.map(map"
        },
        {
          "file": "src/components/InteractiveDataVisualization.tsx",
          "line": 1,
          "type": "excessive-effects",
          "severity": "medium",
          "message": "Component has 7 useEffect hooks (consider consolidation)"
        },
        {
          "file": "src/components/InteractiveDataVisualization.tsx",
          "line": 117,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for cache invalidations\n  useEffect(() => {\n    if (typeof window === 'undefined"
        },
        {
          "file": "src/components/InteractiveDataVisualization.tsx",
          "line": 237,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "format: ExportFormat) => {\n    // This logic could be moved to a hook or helper\n"
        },
        {
          "file": "src/components/InteractiveDataVisualization.tsx",
          "line": 241,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(e => e.timestamp), ...filteredData.sensoryInputs.map(s => s.timestamp), ..."
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 7,
      "memoizationScore": 44
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "name": "TimelineVisualization",
      "linesOfCode": 784,
      "complexityScore": 103,
      "issues": [
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 409,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: filter(stream => stream.visible).map...",
          "code": "filter(stream => stream.visible).map"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 758,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: filter(s => s.visible).map...",
          "code": "filter(s => s.visible).map"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 744,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: Object.entries(hoveredEvent.metadata).map...",
          "code": "Object.entries(hoveredEvent.metadata).map"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 185,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const emotionData = emotions\n      .filter(e => isWithinInterval(e.timestamp, { "
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 221,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const sensoryData = Array.from(sensoryByHour.entries())\n      .map(([hourKey, da"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 408,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const renderDataStreams = () => {\n    return dataStreams.filter(stream => stream"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 281,
          "type": "heavy-effect-deps",
          "severity": "high",
          "message": "useEffect with many dependencies detected"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 408,
          "type": "inline-array-chains",
          "severity": "high",
          "message": "Chained array operations in render method",
          "code": "{\n    return dataStreams.filter(stream => stream.visible).map"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 758,
          "type": "inline-array-chains",
          "severity": "high",
          "message": "Chained array operations in render method",
          "code": "{dataStreams.filter(s => s.visible).map"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 433,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((point, i) => {\n            const x = timeScale(point.timestamp);\n         "
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 744,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map(([key, value]) => (\n                    <p key={key} className=\"text-xs tex"
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 280,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for brush selection with proper cleanup\n  useEffect(() => {\n    if (!isDragging "
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 550,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setZoomLevel(1);\n                setPanOffset(0);\n                setBrushSelection(null);\n         "
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 549,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                setZoomLevel(1);\n..."
        },
        {
          "file": "src/components/TimelineVisualization.tsx",
          "line": 229,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(d => d.value));\n      const maxValue = Math.max(...sensoryData.map("
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 5,
      "memoizationScore": 25
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "name": "AdvancedFilterPanel",
      "linesOfCode": 765,
      "complexityScore": 103,
      "issues": [
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 92,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: map(s => s.sensoryType || s.type || '').filter...",
          "code": "map(s => s.sensoryType || s.type || '').filter"
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 96,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: map(t => t.environmentalData?.location).filter...",
          "code": "map(t => t.environmentalData?.location).filter"
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 92,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const uniqueSensoryTypes = [...new Set(sensoryInputs.map(s => s.sensoryType || s"
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 95,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const uniqueLocations = [...new Set(\n    trackingEntries.map(t => t.environmenta"
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 671,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((preset) => (\n                <Card key={preset.name} className=\"cursor-poi"
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 717,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((filter) => (\n                  <Card key={filter.id}"
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 90,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "map(e => e.emotion))];\n  const uniqueTriggers = [...new Set(emotions.flatMap(e ="
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 734,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                              set..."
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 90,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(e => e.emotion))];\n  const uniqueTriggers = [...new Set(emotions.flatMap(e "
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 725,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(filter.criteria[k as keyof FilterCriteria])",
          "code": "JSON.stringify(filter.criteria[k as keyof FilterCriteria])"
        },
        {
          "file": "src/components/AdvancedFilterPanel.tsx",
          "line": 726,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(criteria[k as keyof FilterCriteria])",
          "code": "JSON.stringify(criteria[k as keyof FilterCriteria])"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 0
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "name": "ProgressDashboard",
      "linesOfCode": 537,
      "complexityScore": 64,
      "issues": [
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 204,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: filter(g => g.status === 'active')\n      .map...",
          "code": "filter(g => g.status === 'active')\n      .map"
        },
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 343,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: filter(goal => goal.dataPoints.length > 1)\n       ...",
          "code": "filter(goal => goal.dataPoints.length > 1)\n                  .sort"
        },
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 201,
          "type": "inline-array-chains",
          "severity": "high",
          "message": "Chained array operations in render method",
          "code": "{\n    const now = new Date();\n    return goals\n      .filter(g => g.status === '"
        },
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 350,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map(goal => {\n                    const latestPoint = goal.dataPoints.sort((a, "
        },
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 465,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((category, index) => (\n                    <div key={category.category} cla"
        },
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 491,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((goal, index) => (\n                  <div key={goal.id} className=\"p-4 bord"
        },
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 155,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for smooth transitions\n    setIsAnalyzingTrends(true);\n    \n    // Create timeou"
        },
        {
          "file": "src/components/ProgressDashboard.tsx",
          "line": 345,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(dp => dp.timestamp.getTime()));\n                    const bLatest = Math.ma"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 2
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "name": "EmotionTracker",
      "linesOfCode": 316,
      "complexityScore": 42,
      "issues": [
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 105,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((emotion) => {\n              const Icon = emotion.icon;\n              retur"
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 133,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((subEmotion) => (\n                <Badge\n                  key={subEmotion}"
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 164,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((level) => (\n                <Button\n                  key={level}\n        "
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 213,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((minutes) => (\n                  <Button\n                    key={minutes}\n"
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 280,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((trigger) => (\n              <Badge\n                key={trigger}\n         "
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 85,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "form\n    setSelectedEmotion('');\n    setSelectedSubEmotion('');\n    setIntensity"
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 194,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for better UX while typing\n                  if (value === '') {\n               "
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 86,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setSelectedEmotion('');\n    setSelectedSubEmotion('');\n    setIntensity(3);\n    setDuration(0);\n    "
        },
        {
          "file": "src/components/EmotionTracker.tsx",
          "line": 192,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onChange={(e) => {\n                  const value =..."
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "name": "OverviewPanel",
      "linesOfCode": 130,
      "complexityScore": 60,
      "issues": [
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 31,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const emotionTypes = new Set<string>(filteredData.emotions.map(e => (e?.emotion "
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 32,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const sensoryTypes = new Set<string>(filteredData.sensoryInputs.map(s => (s?.sen"
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 108,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const prevFirstTs = prev.filteredData.entries[0]?.timestamp?.getTime() || prev.f"
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 109,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const nextFirstTs = next.filteredData.entries[0]?.timestamp?.getTime() || next.f"
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 110,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const prevLastTs = prev.filteredData.entries[prev.filteredData.entries.length - "
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 111,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const nextLastTs = next.filteredData.entries[next.filteredData.entries.length - "
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 80,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((insight, idx) => (\n                <li key={idx} className=\"text-sm\""
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 81,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={idx}"
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 85,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                      try {\n     ..."
        },
        {
          "file": "src/components/analytics/panels/OverviewPanel.tsx",
          "line": 31,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(e => (e?.emotion || '').toLowerCase()).filter(Boolean));\n  const sensoryTyp"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 9
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "name": "ReportBuilder",
      "linesOfCode": 663,
      "complexityScore": 92,
      "issues": [
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 309,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: Object.entries(reportAnalysis.emotionSummary).map...",
          "code": "Object.entries(reportAnalysis.emotionSummary).map"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 328,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: Object.entries(reportAnalysis.sensorySummary).map...",
          "code": "Object.entries(reportAnalysis.sensorySummary).map"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 126,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const goalProgress = goals.map(goal => {\n      const progressInPeriod = goal.dat"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 148,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const avgEmotionIntensity = filteredEmotions.length > 0\n      ? filteredEmotions"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 452,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const csvString = csvContent.map(row => \n      row.map"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 309,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map(([emotion, count]) => `\n                <p><strong"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 328,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map(([type, count]) => `\n                <p><strong"
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 645,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                  handleTemplateC..."
        },
        {
          "file": "src/components/ReportBuilder.tsx",
          "line": 435,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(goal => [\n        goal.title,\n        goal.category,\n        Math.round(goa"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "name": "DataQualityFeedback",
      "linesOfCode": 310,
      "complexityScore": 91,
      "issues": [
        {
          "file": "src/components/DataQualityFeedback.tsx",
          "line": 57,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const allTimestamps = [\n      ...emotions.map(e => e.timestamp),\n      ...sensor"
        },
        {
          "file": "src/components/DataQualityFeedback.tsx",
          "line": 246,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((metric) => (\n            <div key={metric.id} className={`p-4 rounded-lg $"
        },
        {
          "file": "src/components/DataQualityFeedback.tsx",
          "line": 265,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((rec) => (\n                    <p key={`${metric.id}-${rec}`} className=\"te"
        },
        {
          "file": "src/components/DataQualityFeedback.tsx",
          "line": 293,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((metric, index) => (\n                  <div key={metric.id} className=\"text"
        },
        {
          "file": "src/components/DataQualityFeedback.tsx",
          "line": 58,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(e => e.timestamp),\n      ...sensoryInputs.map(s => s.timestamp),\n      ...e"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 3
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "name": "SensoryTracker",
      "linesOfCode": 304,
      "complexityScore": 38,
      "issues": [
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 104,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((type) => {\n              const Icon = type.icon;\n              return (\n  "
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 134,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((response) => (\n                <Button\n                  key={response.typ"
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 161,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((level) => (\n                <Button\n                  key={level}\n        "
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 195,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((loc) => (\n                <Badge\n                  key={loc}\n             "
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 238,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((strategy) => (\n                <Badge\n                  key={strategy}\n   "
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 254,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((strategy) => (\n                <Badge\n                  key={strategy}\n   "
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 84,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "form\n    setSelectedType('');\n    setSelectedResponse('');\n    setIntensity(3);\n"
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 85,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setSelectedType('');\n    setSelectedResponse('');\n    setIntensity(3);\n    setLocation('');\n    setN"
        },
        {
          "file": "src/components/SensoryTracker.tsx",
          "line": 243,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                    if (!copingSt..."
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "name": "AnalyticsSettings",
      "linesOfCode": 866,
      "complexityScore": 38,
      "issues": [
        {
          "file": "src/components/AnalyticsSettings.tsx",
          "line": 603,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((modelType) => {\n                    const model = modelStatus.get(modelTyp"
        },
        {
          "file": "src/components/AnalyticsSettings.tsx",
          "line": 175,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for cleanup\n  const [trainingRequested, setTrainingRequested] = useState<ModelTy"
        },
        {
          "file": "src/components/AnalyticsSettings.tsx",
          "line": 117,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setToDefaults();\n    setSelectedPreset('balanced');\n    setHasUnsavedChanges(false);\n    "
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 3,
      "memoizationScore": 0
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "name": "EnvironmentalTracker",
      "linesOfCode": 270,
      "complexityScore": 13,
      "issues": [
        {
          "file": "src/components/EnvironmentalTracker.tsx",
          "line": 245,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((event, index) => (\n                <Badge key={index} variant=\"secondary\" "
        },
        {
          "file": "src/components/EnvironmentalTracker.tsx",
          "line": 246,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={index}"
        },
        {
          "file": "src/components/EnvironmentalTracker.tsx",
          "line": 75,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "form\n    setRoomTemperature(22);\n    setLighting('');\n    setNoiseLevel(3);\n    "
        },
        {
          "file": "src/components/EnvironmentalTracker.tsx",
          "line": 76,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setRoomTemperature(22);\n    setLighting('');\n    setNoiseLevel(3);\n    setClassroomActivity('');\n   "
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "name": "Visualization3D",
      "linesOfCode": 615,
      "complexityScore": 65,
      "issues": [
        {
          "file": "src/components/Visualization3D.tsx",
          "line": 529,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((point) => (\n              <DataPoint\n                key={point.id}\n      "
        },
        {
          "file": "src/components/Visualization3D.tsx",
          "line": 198,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n            camera.position.set(1..."
        },
        {
          "file": "src/components/Visualization3D.tsx",
          "line": 310,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(p => p.x);\n    const yValues = points.map(p => p.y);\n    const zValues = po"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "name": "ExplanationChat",
      "linesOfCode": 290,
      "complexityScore": 63,
      "issues": [
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 1,
          "type": "excessive-effects",
          "severity": "medium",
          "message": "Component has 6 useEffect hooks (consider consolidation)"
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 151,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((m, idx) => (\n          <div key={idx} className={m.role === 'user' ? 'text"
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 246,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((s, i) => (\n                <li key={i}"
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 258,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map(({ key, source }, idx) => (\n              <button\n                key={key}"
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 152,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={idx}"
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 247,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={i}"
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 200,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "foreground\">\n              <button\n                type=\"button\"\n               "
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 97,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
          "code": "sessionStorage.getItem"
        },
        {
          "file": "src/components/analytics-panels/ExplanationChat.tsx",
          "line": 100,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
          "code": "sessionStorage.getItem"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 6,
      "memoizationScore": 3
    },
    {
      "file": "src/components/GoalManager.tsx",
      "name": "GoalManager",
      "linesOfCode": 543,
      "complexityScore": 60,
      "issues": [
        {
          "file": "src/components/GoalManager.tsx",
          "line": 409,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((goal) => (\n            <Card key={goal.id} className=\"bg-gradient-card bor"
        },
        {
          "file": "src/components/GoalManager.tsx",
          "line": 492,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((milestone) => (\n                        <div key={milestone.id} className="
        },
        {
          "file": "src/components/GoalManager.tsx",
          "line": 58,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for the current student.\n   * Memoized to prevent recreation on every render.\n  "
        },
        {
          "file": "src/components/GoalManager.tsx",
          "line": 475,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                        const tit..."
        },
        {
          "file": "src/components/GoalManager.tsx",
          "line": 524,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                      const value..."
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 4
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "name": "ExplanationDock",
      "linesOfCode": 180,
      "complexityScore": 48,
      "issues": [
        {
          "file": "src/components/analytics-panels/ExplanationDock.tsx",
          "line": 91,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((r, i) => (<li key={i}"
        },
        {
          "file": "src/components/analytics-panels/ExplanationDock.tsx",
          "line": 91,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={i}"
        },
        {
          "file": "src/components/analytics-panels/ExplanationDock.tsx",
          "line": 157,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map((t: any) => {\n                      const ts = new Date(t.timestamp).toISOS"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 1,
      "memoizationScore": 2
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "name": "ExplanationTabs",
      "linesOfCode": 232,
      "complexityScore": 47,
      "issues": [
        {
          "file": "src/components/analytics-panels/ExplanationTabs.tsx",
          "line": 215,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map(({ key }) => (\n                  <span\n                    key={key}\n      "
        },
        {
          "file": "src/components/analytics-panels/ExplanationTabs.tsx",
          "line": 173,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "foreground hover:bg-accent/40\"\n                  onClick={() => { setShowAllKild"
        },
        {
          "file": "src/components/analytics-panels/ExplanationTabs.tsx",
          "line": 120,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                try { window.disp..."
        },
        {
          "file": "src/components/analytics-panels/ExplanationTabs.tsx",
          "line": 131,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                try { window.disp..."
        },
        {
          "file": "src/components/analytics-panels/ExplanationTabs.tsx",
          "line": 52,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        },
        {
          "file": "src/components/analytics-panels/ExplanationTabs.tsx",
          "line": 55,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.setItem",
          "code": "localStorage.setItem"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 12
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "name": "SidebarProvider",
      "linesOfCode": 751,
      "complexityScore": 34,
      "issues": [
        {
          "file": "src/components/ui/sidebar.tsx",
          "line": 72,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for control from outside the component.\n    const [_open, _setOpen] = React.useS"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 1,
      "memoizationScore": 20
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "name": "DataRequirementsCalculator",
      "linesOfCode": 297,
      "complexityScore": 31,
      "issues": [
        {
          "file": "src/components/DataRequirementsCalculator.tsx",
          "line": 244,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((calc) => (\n            <div \n              key={calc.requirement.level}\n  "
        },
        {
          "file": "src/components/DataRequirementsCalculator.tsx",
          "line": 71,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(e => e.timestamp),\n      ...sensoryInputs.map(s => s.timestamp),\n      ...e"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 10
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "name": "DataCollectionRoadmap",
      "linesOfCode": 280,
      "complexityScore": 31,
      "issues": [
        {
          "file": "src/components/DataCollectionRoadmap.tsx",
          "line": 233,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((milestone) => (\n              <div key={milestone.id} className=\"relative "
        },
        {
          "file": "src/components/DataCollectionRoadmap.tsx",
          "line": 43,
          "type": "nested-maps",
          "severity": "critical",
          "message": "Nested map operations detected (O(n²) complexity)",
          "code": ".map(e => e.timestamp),\n      ...sensoryInputs.map(s => s.timestamp),\n      ...e"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 7
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "name": "MockDataLoader",
      "linesOfCode": 260,
      "complexityScore": 24,
      "issues": [
        {
          "file": "src/components/MockDataLoader.tsx",
          "line": 40,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for better UX\n      setLoadingProgress(25);\n      \n      // Generate and load th"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 33
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "name": "EnhancedDataVisualization",
      "linesOfCode": 96,
      "complexityScore": 23,
      "issues": [
        {
          "file": "src/components/EnhancedDataVisualization.tsx",
          "line": 25,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "map(e => e[nameKey]))];\n\n    for (let i = 0; i < days; i++) {\n        const date"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 13
    },
    {
      "file": "src/components/analytics/QuickQuestions.tsx",
      "name": "QuickQuestions",
      "linesOfCode": 274,
      "complexityScore": 20,
      "issues": [
        {
          "file": "src/components/analytics/QuickQuestions.tsx",
          "line": 81,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "for better keyboard flow\n  useEffect(() => {\n    if (open) {\n      setFocusedInd"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 28
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "name": "EnvDebug",
      "linesOfCode": 81,
      "complexityScore": 15,
      "issues": [
        {
          "file": "src/components/dev/EnvDebug.tsx",
          "line": 48,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "foreground\">Tip: set with <code>localStorage.setItem("
        },
        {
          "file": "src/components/dev/EnvDebug.tsx",
          "line": 23,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        },
        {
          "file": "src/components/dev/EnvDebug.tsx",
          "line": 48,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.setItem",
          "code": "localStorage.setItem"
        },
        {
          "file": "src/components/dev/EnvDebug.tsx",
          "line": 69,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: .toLocaleString()",
          "code": ".toLocaleString()"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "name": "ExportDialog",
      "linesOfCode": 159,
      "complexityScore": 7,
      "issues": [
        {
          "file": "src/components/ExportDialog.tsx",
          "line": 37,
          "type": "setState-in-loop",
          "severity": "critical",
          "message": "setState called inside a loop (causes multiple re-renders)",
          "code": "format, setFormat] = React.useState<'pdf' | 'csv' | 'json'>(defaultFormat);\n  co"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 1,
      "memoizationScore": 0
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "name": "ComparisonSummary",
      "linesOfCode": 624,
      "complexityScore": 123,
      "issues": [
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 182,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: JSON.parse(raw)...",
          "code": "JSON.parse(raw)"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 216,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: JSON.parse(raw)...",
          "code": "JSON.parse(raw)"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 1,
          "type": "excessive-effects",
          "severity": "medium",
          "message": "Component has 6 useEffect hooks (consider consolidation)"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 346,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((c) => (\n                  <div key={c.key} className=\"rounded-md border p-"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 431,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((c) => (\n                          <div key={c.key} className=\"rounded-md b"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 475,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((c) => (\n                          <div key={c.key} className=\"rounded-md b"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 525,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((i) => (\n                                <li key={i.title} className=\"flex "
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 545,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((i) => (\n                                <li key={i.title} className=\"flex "
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 564,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((c: any) => (\n                              <li key={c.title}"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 595,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((s) => (\n                      <li key={`added-${s}`} className=\"text-emera"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 598,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((s) => (\n                      <li key={`removed-${s}`} className=\"text-ros"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 408,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setPatLimit(6); setCorrLimit(6); setIntAddedLimit(8); setIntRemovedLimit(8); setLastExport({ type: n"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 407,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                      setPatLimit..."
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 180,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
          "code": "sessionStorage.getItem"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 201,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: sessionStorage.setItem",
          "code": "sessionStorage.setItem"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 214,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
          "code": "sessionStorage.getItem"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 231,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: sessionStorage.setItem",
          "code": "sessionStorage.setItem"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 133,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify({\n      patterns: content.patterns,\n      correlations: content.correlations,\n      interventions: content.interventions,\n    }, null, 2)",
          "code": "JSON.stringify({\n      patterns: content.patterns,\n      correlations: content.correlations,\n      interventions: content.interventions,\n    }, null, 2)"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 201,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(data)",
          "code": "JSON.stringify(data)"
        },
        {
          "file": "src/components/ComparisonSummary.tsx",
          "line": 231,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(lastExport)",
          "code": "JSON.stringify(lastExport)"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 6,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics/FiltersDrawer.tsx",
      "name": "FiltersDrawer",
      "linesOfCode": 647,
      "complexityScore": 78,
      "issues": [
        {
          "file": "src/components/analytics/FiltersDrawer.tsx",
          "line": 78,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: filter(p => !p.criteria.dateRange).map...",
          "code": "filter(p => !p.criteria.dateRange).map"
        },
        {
          "file": "src/components/analytics/FiltersDrawer.tsx",
          "line": 78,
          "type": "inline-array-chains",
          "severity": "high",
          "message": "Chained array operations in render method",
          "code": "{FILTER_PRESETS.filter(p => !p.criteria.dateRange).map"
        },
        {
          "file": "src/components/analytics/FiltersDrawer.tsx",
          "line": 79,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                  const clampRang..."
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "name": "VisualizationControls",
      "linesOfCode": 433,
      "complexityScore": 41,
      "issues": [
        {
          "file": "src/components/VisualizationControls.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/VisualizationControls.tsx",
          "line": 122,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((p) => (\n              <Button\n                key={p.id}\n                v"
        },
        {
          "file": "src/components/VisualizationControls.tsx",
          "line": 131,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setSelectedTimeRange('30d');\n                    setSelectedChartType('scatter');\n                  "
        },
        {
          "file": "src/components/VisualizationControls.tsx",
          "line": 139,
          "type": "unbatched-updates",
          "severity": "high",
          "message": "Multiple setState calls without batching",
          "code": "setSelectedTimeRange('7d');\n                    setSelectedChartType('line');\n                    se"
        },
        {
          "file": "src/components/VisualizationControls.tsx",
          "line": 127,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                  visualizationSt..."
        },
        {
          "file": "src/components/VisualizationControls.tsx",
          "line": 156,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(filterCriteria[k as keyof typeof filterCriteria])",
          "code": "JSON.stringify(filterCriteria[k as keyof typeof filterCriteria])"
        },
        {
          "file": "src/components/VisualizationControls.tsx",
          "line": 157,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify({\n                    dateRange: { start: null, end: null },\n                    emotions: { types: [], intensityRange: [0, 10], includeTriggers: [], excludeTriggers: [] },\n                    sensory: { types: [], responses: [], intensityRange: [0, 10] },\n                    environmental: {\n                      locations: [],\n                      activities: [],\n                      conditions: { noiseLevel: [0, 10], temperature: [15, 30], lighting: [] },\n                      weather: [],\n                      timeOfDay: []\n                    },\n                    patterns: { anomaliesOnly: false, minConfidence: 0, patternTypes: [] },\n                    realtime: false\n                  }[k as keyof typeof filterCriteria])",
          "code": "JSON.stringify({\n                    dateRange: { start: null, end: null },\n                    emotions: { types: [], intensityRange: [0, 10], includeTriggers: [], excludeTriggers: [] },\n                    sensory: { types: [], responses: [], intensityRange: [0, 10] },\n                    environmental: {\n                      locations: [],\n                      activities: [],\n                      conditions: { noiseLevel: [0, 10], temperature: [15, 30], lighting: [] },\n                      weather: [],\n                      timeOfDay: []\n                    },\n                    patterns: { anomaliesOnly: false, minConfidence: 0, patternTypes: [] },\n                    realtime: false\n                  }[k as keyof typeof filterCriteria])"
        }
      ],
      "renderComplexity": 1,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "name": "TestingDebugPanel",
      "linesOfCode": 422,
      "complexityScore": 29,
      "issues": [
        {
          "file": "src/components/TestingDebugPanel.tsx",
          "line": 149,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const emptyStudents = students.filter(student => {\n        const studentEntries "
        },
        {
          "file": "src/components/TestingDebugPanel.tsx",
          "line": 169,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const studentsWithData = students.filter(student => {\n        const studentEntri"
        },
        {
          "file": "src/components/TestingDebugPanel.tsx",
          "line": 289,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((result) => (\n                <div key={result.name} className=\"flex items-"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 3,
      "memoizationScore": 23
    },
    {
      "file": "src/components/analytics/panels/AlertsPanel.tsx",
      "name": "AlertsPanel",
      "linesOfCode": 368,
      "complexityScore": 45,
      "issues": [
        {
          "file": "src/components/analytics/panels/AlertsPanel.tsx",
          "line": 105,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const counts = useMemo(() => {\n    return {\n      totalUnresolved: alerts.filter"
        },
        {
          "file": "src/components/analytics/panels/AlertsPanel.tsx",
          "line": 162,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((sev) => (\n                <Collapsible key={sev} open={!collapsed[sev]} on"
        },
        {
          "file": "src/components/analytics/panels/AlertsPanel.tsx",
          "line": 182,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((entry) => (\n                          <li key={entry.alert.id} className=\""
        },
        {
          "file": "src/components/analytics/panels/AlertsPanel.tsx",
          "line": 266,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((entry) => (\n                      <li key={entry.alert.id} className=\"roun"
        },
        {
          "file": "src/components/analytics/panels/AlertsPanel.tsx",
          "line": 239,
          "type": "large-inline-function",
          "severity": "medium",
          "message": "Large inline function in JSX (recreated on each render)",
          "code": "onClick={() => {\n                            clear..."
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 3,
      "memoizationScore": 44
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "name": "QuickEntryTemplates",
      "linesOfCode": 473,
      "complexityScore": 44,
      "issues": [
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 138,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: JSON.parse(saved)...",
          "code": "JSON.parse(saved)"
        },
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 382,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((template) => (\n            <Card key={template.id} className=\"relative ove"
        },
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 411,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((emotion, idx) => (\n                        <Badge key={idx} variant=\"secon"
        },
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 412,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={idx}"
        },
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 134,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        },
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 198,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.setItem",
          "code": "localStorage.setItem"
        },
        {
          "file": "src/components/QuickEntryTemplates.tsx",
          "line": 198,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(updatedTemplates)",
          "code": "JSON.stringify(updatedTemplates)"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "name": "PeriodComparison",
      "linesOfCode": 247,
      "complexityScore": 41,
      "issues": [
        {
          "file": "src/components/PeriodComparison.tsx",
          "line": 69,
          "type": "unmemoized-calculation",
          "severity": "high",
          "message": "Expensive calculation without useMemo",
          "code": "const avgIntensity = filteredEmotions.length > 0 \n      ? filteredEmotions.reduc"
        },
        {
          "file": "src/components/PeriodComparison.tsx",
          "line": 184,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((metric) => (\n            <div key={metric.label} className=\"text-center\""
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 3
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "name": "AnalyticsConfigTest.tsx",
      "linesOfCode": 333,
      "complexityScore": 21,
      "issues": [
        {
          "file": "src/components/AnalyticsConfigTest.tsx",
          "line": 141,
          "type": "heavy-computation",
          "severity": "high",
          "message": "Heavy computation detected in render path: JSON.parse(exported)...",
          "code": "JSON.parse(exported)"
        },
        {
          "file": "src/components/AnalyticsConfigTest.tsx",
          "line": 276,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((result) => (\n              <div\n                key={`${result.name}-${res"
        },
        {
          "file": "src/components/AnalyticsConfigTest.tsx",
          "line": 146,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(parsed)",
          "code": "JSON.stringify(parsed)"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 13
    },
    {
      "file": "src/components/charts/EChartContainer.tsx",
      "name": "EChartContainer",
      "linesOfCode": 569,
      "complexityScore": 119,
      "issues": [
        {
          "file": "src/components/charts/EChartContainer.tsx",
          "line": 462,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(safeOption, (_k, v)",
          "code": "JSON.stringify(safeOption, (_k, v)"
        },
        {
          "file": "src/components/charts/EChartContainer.tsx",
          "line": 490,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify({ seriesKinds, yAxes })",
          "code": "JSON.stringify({ seriesKinds, yAxes })"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 1,
      "memoizationScore": 10
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "name": "AdvancedSearch",
      "linesOfCode": 506,
      "complexityScore": 113,
      "issues": [
        {
          "file": "src/components/AdvancedSearch.tsx",
          "line": 371,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((emotion) => (\n                    <div key={emotion} className=\"flex items"
        },
        {
          "file": "src/components/AdvancedSearch.tsx",
          "line": 396,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((sensory) => (\n                    <div key={sensory} className=\"flex items"
        },
        {
          "file": "src/components/AdvancedSearch.tsx",
          "line": 421,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((status) => (\n                    <div key={status} className=\"flex items-c"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 14
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "name": "EntryDetailsDrawer",
      "linesOfCode": 118,
      "complexityScore": 63,
      "issues": [
        {
          "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
          "line": 72,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((e) => (\n                    <li key={e.id}"
        },
        {
          "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
          "line": 82,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((s) => (\n                    <li key={s.id}"
        }
      ],
      "renderComplexity": 1,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "name": "AnalyticsStatusIndicator",
      "linesOfCode": 270,
      "complexityScore": 48,
      "issues": [
        {
          "file": "src/components/AnalyticsStatusIndicator.tsx",
          "line": 193,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((status) => (\n              <div key={status.studentId} className=\"flex ite"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 8
    },
    {
      "file": "src/components/AlertManager.tsx",
      "name": "AlertManager",
      "linesOfCode": 290,
      "complexityScore": 35,
      "issues": [
        {
          "file": "src/components/AlertManager.tsx",
          "line": 129,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((alertEntry) => (\n        <Card key={alertEntry.alert.id} className={`trans"
        },
        {
          "file": "src/components/AlertManager.tsx",
          "line": 213,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((rec) => (\n                                  <li key={`${selectedAlert.aler"
        },
        {
          "file": "src/components/AlertManager.tsx",
          "line": 263,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((recommendation) => (\n                    <li key={`${alertEntry.alert.id}-"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 4
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "name": "PatternAnalysisView",
      "linesOfCode": 260,
      "complexityScore": 34,
      "issues": [
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 95,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((pattern, index) => (\n              <Card\n                key={index}\n     "
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 120,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((rec, i) => (\n                            <p key={i} className=\"text-xs tex"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 144,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((insight, index) => (\n              <Card key={index} className=\"bg-gradien"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 196,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((rec, i) => (\n                            <p key={i} className=\"text-xs tex"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 229,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((anomaly, index) => (\n              <Card\n                key={index}\n     "
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 97,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={index}"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 121,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={i}"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 145,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={index}"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 197,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={i}"
        },
        {
          "file": "src/components/analysis/PatternAnalysisView.tsx",
          "line": 231,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={index}"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/dev/ModelDiagnosticsPanel.tsx",
      "name": "ModelDiagnosticsPanel",
      "linesOfCode": 356,
      "complexityScore": 33,
      "issues": [
        {
          "file": "src/components/dev/ModelDiagnosticsPanel.tsx",
          "line": 242,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((mt) => (\n                      <SelectItem key={mt} value={mt}"
        },
        {
          "file": "src/components/dev/ModelDiagnosticsPanel.tsx",
          "line": 331,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((a) => (\n                  <li key={a.id} aria-live={a.tone}"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 54
    },
    {
      "file": "src/components/ConfidenceIndicator.tsx",
      "name": "ConfidenceIndicator",
      "linesOfCode": 119,
      "complexityScore": 27,
      "issues": [
        {
          "file": "src/components/ConfidenceIndicator.tsx",
          "line": 102,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((explanation) => (\n                <div key={explanation} className=\"text-x"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "name": "ResizableSplitLayout",
      "linesOfCode": 169,
      "complexityScore": 27,
      "issues": [
        {
          "file": "src/components/layouts/ResizableSplitLayout.tsx",
          "line": 43,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        },
        {
          "file": "src/components/layouts/ResizableSplitLayout.tsx",
          "line": 47,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        },
        {
          "file": "src/components/layouts/ResizableSplitLayout.tsx",
          "line": 55,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.setItem",
          "code": "localStorage.setItem"
        },
        {
          "file": "src/components/layouts/ResizableSplitLayout.tsx",
          "line": 57,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.setItem",
          "code": "localStorage.setItem"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 1,
      "memoizationScore": 0
    },
    {
      "file": "src/components/DevErrorBanner.tsx",
      "name": "DevErrorBanner",
      "linesOfCode": 125,
      "complexityScore": 26,
      "issues": [
        {
          "file": "src/components/DevErrorBanner.tsx",
          "line": 38,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: JSON.stringify(a)",
          "code": "JSON.stringify(a)"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 0
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "name": "AnalyticsSection",
      "linesOfCode": 161,
      "complexityScore": 20,
      "issues": [
        {
          "file": "src/components/profile-sections/AnalyticsSection.tsx",
          "line": 59,
          "type": "sync-io",
          "severity": "medium",
          "message": "Synchronous I/O operation in render path: localStorage.getItem",
          "code": "localStorage.getItem"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 2,
      "memoizationScore": 10
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "name": "StudentProfileSidebar",
      "linesOfCode": 179,
      "complexityScore": 16,
      "issues": [
        {
          "file": "src/components/StudentProfileSidebar.tsx",
          "line": 114,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((item) => (\n                <SidebarMenuItem key={item.section}"
        },
        {
          "file": "src/components/StudentProfileSidebar.tsx",
          "line": 149,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((item) => (\n                <SidebarMenuItem key={item.section}"
        }
      ],
      "renderComplexity": 4,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "name": "PaginatedSessionsList",
      "linesOfCode": 224,
      "complexityScore": 16,
      "issues": [
        {
          "file": "src/components/PaginatedSessionsList.tsx",
          "line": 99,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((entry) => (\n                <div key={entry.id} className=\"border-l-4 bord"
        },
        {
          "file": "src/components/PaginatedSessionsList.tsx",
          "line": 126,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((emotion, idx) => (\n                        <Badge key={idx} variant=\"secon"
        },
        {
          "file": "src/components/PaginatedSessionsList.tsx",
          "line": 127,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={idx}"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 6
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "name": "DashboardLayout",
      "linesOfCode": 173,
      "complexityScore": 16,
      "issues": [
        {
          "file": "src/components/layouts/DashboardLayout.tsx",
          "line": 135,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((pair, index) => (\n                  <div key={index} className=\"flex items"
        },
        {
          "file": "src/components/layouts/DashboardLayout.tsx",
          "line": 136,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={index}"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "name": "DashboardSection",
      "linesOfCode": 286,
      "complexityScore": 13,
      "issues": [
        {
          "file": "src/components/profile-sections/DashboardSection.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/profile-sections/DashboardSection.tsx",
          "line": 267,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((suggestion: string, index: number) => (\n                <div key={index} c"
        },
        {
          "file": "src/components/profile-sections/DashboardSection.tsx",
          "line": 268,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={index}"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "name": "DateRangeSelector",
      "linesOfCode": 179,
      "complexityScore": 10,
      "issues": [
        {
          "file": "src/components/DateRangeSelector.tsx",
          "line": 125,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((preset) => (\n            <SelectItem key={preset.value} value={preset.valu"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/ui/Breadcrumbs.tsx",
      "name": "Breadcrumbs",
      "linesOfCode": 43,
      "complexityScore": 10,
      "issues": [
        {
          "file": "src/components/ui/Breadcrumbs.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/ui/Breadcrumbs.tsx",
          "line": 21,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((item, idx) => {\n          const isLast = idx === items.length - 1;\n       "
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics-panels/CorrelationsPanel.tsx",
      "name": "CorrelationsPanel",
      "linesOfCode": 123,
      "complexityScore": 10,
      "issues": [
        {
          "file": "src/components/analytics-panels/CorrelationsPanel.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/analytics-panels/CorrelationsPanel.tsx",
          "line": 91,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((correlation: CorrelationResult) => (\n                <Card key={hashOfStri"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "name": "TrendsChart",
      "linesOfCode": 101,
      "complexityScore": 9,
      "issues": [
        {
          "file": "src/components/charts/TrendsChart.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics-panels/ChatComposer.tsx",
      "name": "ChatComposer",
      "linesOfCode": 71,
      "complexityScore": 8,
      "issues": [
        {
          "file": "src/components/analytics-panels/ChatComposer.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/analytics-panels/ChatComposer.tsx",
          "line": 41,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((s, i) => (\n            <button\n              key={i}\n              type=\"b"
        },
        {
          "file": "src/components/analytics-panels/ChatComposer.tsx",
          "line": 43,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={i}"
        }
      ],
      "renderComplexity": 4,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "name": "GridLayout",
      "linesOfCode": 66,
      "complexityScore": 6,
      "issues": [
        {
          "file": "src/components/layouts/VisualizationLayouts.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/dashboard/StudentsGrid.tsx",
      "name": "StudentsGrid",
      "linesOfCode": 56,
      "complexityScore": 6,
      "issues": [
        {
          "file": "src/components/dashboard/StudentsGrid.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/dashboard/StudentsGrid.tsx",
          "line": 15,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((_, i) => (\n          <div key={i} className=\"glass-card rounded-3xl p-6 an"
        },
        {
          "file": "src/components/dashboard/StudentsGrid.tsx",
          "line": 41,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((student, index) => (\n        <PremiumStudentCard\n          key={student.id"
        },
        {
          "file": "src/components/dashboard/StudentsGrid.tsx",
          "line": 16,
          "type": "index-as-key",
          "severity": "medium",
          "message": "Using array index as React key (causes re-renders)",
          "code": "key={i}"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/profile-sections/ToolsSection.tsx",
      "name": "ToolsSection",
      "linesOfCode": 130,
      "complexityScore": 4,
      "issues": [
        {
          "file": "src/components/profile-sections/ToolsSection.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        },
        {
          "file": "src/components/profile-sections/ToolsSection.tsx",
          "line": 98,
          "type": "missing-react-key",
          "severity": "medium",
          "message": "List item rendered without a React key prop",
          "code": ".map((section) => (\n          <button\n            key={section.id}\n            o"
        }
      ],
      "renderComplexity": 3,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics/panels/ExplorePanel.tsx",
      "name": "ExplorePanel",
      "linesOfCode": 92,
      "complexityScore": 2,
      "issues": [
        {
          "file": "src/components/analytics/panels/ExplorePanel.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/lazy/LazyVisualization3D.tsx",
      "name": "LazyVisualization3D",
      "linesOfCode": 67,
      "complexityScore": 0,
      "issues": [
        {
          "file": "src/components/lazy/LazyVisualization3D.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/lazy/LazyAnalyticsDashboard.tsx",
      "name": "LazyAnalyticsDashboard",
      "linesOfCode": 71,
      "complexityScore": 0,
      "issues": [
        {
          "file": "src/components/lazy/LazyAnalyticsDashboard.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics-panels/ChartsPanel.tsx",
      "name": "ChartsPanel",
      "linesOfCode": 34,
      "complexityScore": 0,
      "issues": [
        {
          "file": "src/components/analytics-panels/ChartsPanel.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    },
    {
      "file": "src/components/analytics-panels/AlertsPanel.tsx",
      "name": "AlertsPanel",
      "linesOfCode": 26,
      "complexityScore": 0,
      "issues": [
        {
          "file": "src/components/analytics-panels/AlertsPanel.tsx",
          "line": 1,
          "type": "missing-memoization",
          "severity": "medium",
          "message": "Component with complex props lacks memoization"
        }
      ],
      "renderComplexity": 0,
      "effectsCount": 0,
      "memoizationScore": 0
    }
  ],
  "issues": [
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 213,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const render = [\n        data.summary,\n        '',\n        data.causes?.length ?"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 338,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const socialFromTimeline = allEntries\n      .map((t) => ({\n        id: `tracking"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 371,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const topPlaces = agg([ ...allEntries.map((e) => e.environmentalData?.location),"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 605,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const rightContent = (\n        <div className=\"h-full\" ref={dockRef}>\n          "
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 544,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((pattern: PatternResult) => (\n                <Card key={stableKeyFromPatte"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 575,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((rec) => (\n                                  <li key={hashOfString(rec)} cl"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 703,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((msg, idx) => (\n                <div key={idx} className=\"p-3 bg-muted/50 r"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 704,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={idx}"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 318,
      "type": "large-list",
      "severity": "high",
      "message": "Rendering 80+ items without virtualization",
      "code": ".slice(0, 80)"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 359,
      "type": "large-list",
      "severity": "high",
      "message": "Rendering 60+ items without virtualization",
      "code": ".slice(0, 60)"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 425,
      "type": "large-list",
      "severity": "high",
      "message": "Rendering 60+ items without virtualization",
      "code": ".slice(0, 60)"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 431,
      "type": "large-list",
      "severity": "high",
      "message": "Rendering 60+ items without virtualization",
      "code": ".slice(0, 60)"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 434,
      "type": "large-list",
      "severity": "high",
      "message": "Rendering 60+ items without virtualization",
      "code": ".slice(0, 60)"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 506,
      "type": "large-list",
      "severity": "high",
      "message": "Rendering 80+ items without virtualization",
      "code": ".slice(0, 80)"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 254,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "forklaring. Prøv igjen.');\n        setExplanations("
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 370,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map((e) => e.environmentalData?.classroom?.activity?.toString()));\n    const to"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 428,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(fmtEntry).slice(0, 40),\n      '',\n      'Emosjoner (seneste):',\n      ...em"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 447,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map((t) => {\n          const ts = new Date(t.timestamp).toISOString().replace('"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 81,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "line": 81,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 335,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: filter(chart => !chart.studentId || chart.studentI...",
      "code": "filter(chart => !chart.studentId || chart.studentId === student.id)\n              .filter"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 334,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const overlappingCharts = registrations\n              .filter(chart => !chart.st"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 1,
      "type": "excessive-effects",
      "severity": "medium",
      "message": "Component has 9 useEffect hooks (consider consolidation)"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 709,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map(({ key, labelKey, testId, ariaLabelKey }) => (\n            <TabsTrigger\n   "
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 257,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for shared logic\n  const handleManualRefresh = useCallback(() => {\n    setPendin"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 293,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "while analysis updates other tabs.\n\n  // Export handler with useCallback for per"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 389,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "format, exportData, pdfOptions);\n\n        setExportProgress("
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "line": 408,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "format: ExportFormat) => {\n    if (format === 'pdf') {\n      setExportDialogOpen"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "line": 241,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const allTimestamps = [...filteredData.emotions.map(e => e.timestamp), ...filter"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "line": 277,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const data = chartData.map(map"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "line": 1,
      "type": "excessive-effects",
      "severity": "medium",
      "message": "Component has 7 useEffect hooks (consider consolidation)"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "line": 117,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for cache invalidations\n  useEffect(() => {\n    if (typeof window === 'undefined"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "line": 237,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "format: ExportFormat) => {\n    // This logic could be moved to a hook or helper\n"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "line": 241,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(e => e.timestamp), ...filteredData.sensoryInputs.map(s => s.timestamp), ..."
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 409,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: filter(stream => stream.visible).map...",
      "code": "filter(stream => stream.visible).map"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 758,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: filter(s => s.visible).map...",
      "code": "filter(s => s.visible).map"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 744,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: Object.entries(hoveredEvent.metadata).map...",
      "code": "Object.entries(hoveredEvent.metadata).map"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 185,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const emotionData = emotions\n      .filter(e => isWithinInterval(e.timestamp, { "
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 221,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const sensoryData = Array.from(sensoryByHour.entries())\n      .map(([hourKey, da"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 408,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const renderDataStreams = () => {\n    return dataStreams.filter(stream => stream"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 281,
      "type": "heavy-effect-deps",
      "severity": "high",
      "message": "useEffect with many dependencies detected"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 408,
      "type": "inline-array-chains",
      "severity": "high",
      "message": "Chained array operations in render method",
      "code": "{\n    return dataStreams.filter(stream => stream.visible).map"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 758,
      "type": "inline-array-chains",
      "severity": "high",
      "message": "Chained array operations in render method",
      "code": "{dataStreams.filter(s => s.visible).map"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 433,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((point, i) => {\n            const x = timeScale(point.timestamp);\n         "
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 744,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map(([key, value]) => (\n                    <p key={key} className=\"text-xs tex"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 280,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for brush selection with proper cleanup\n  useEffect(() => {\n    if (!isDragging "
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 550,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setZoomLevel(1);\n                setPanOffset(0);\n                setBrushSelection(null);\n         "
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 549,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                setZoomLevel(1);\n..."
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "line": 229,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(d => d.value));\n      const maxValue = Math.max(...sensoryData.map("
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 92,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: map(s => s.sensoryType || s.type || '').filter...",
      "code": "map(s => s.sensoryType || s.type || '').filter"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 96,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: map(t => t.environmentalData?.location).filter...",
      "code": "map(t => t.environmentalData?.location).filter"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 92,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const uniqueSensoryTypes = [...new Set(sensoryInputs.map(s => s.sensoryType || s"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 95,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const uniqueLocations = [...new Set(\n    trackingEntries.map(t => t.environmenta"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 671,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((preset) => (\n                <Card key={preset.name} className=\"cursor-poi"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 717,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((filter) => (\n                  <Card key={filter.id}"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 90,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "map(e => e.emotion))];\n  const uniqueTriggers = [...new Set(emotions.flatMap(e ="
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 734,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                              set..."
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 90,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(e => e.emotion))];\n  const uniqueTriggers = [...new Set(emotions.flatMap(e "
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 725,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(filter.criteria[k as keyof FilterCriteria])",
      "code": "JSON.stringify(filter.criteria[k as keyof FilterCriteria])"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "line": 726,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(criteria[k as keyof FilterCriteria])",
      "code": "JSON.stringify(criteria[k as keyof FilterCriteria])"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 204,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: filter(g => g.status === 'active')\n      .map...",
      "code": "filter(g => g.status === 'active')\n      .map"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 343,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: filter(goal => goal.dataPoints.length > 1)\n       ...",
      "code": "filter(goal => goal.dataPoints.length > 1)\n                  .sort"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 201,
      "type": "inline-array-chains",
      "severity": "high",
      "message": "Chained array operations in render method",
      "code": "{\n    const now = new Date();\n    return goals\n      .filter(g => g.status === '"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 350,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map(goal => {\n                    const latestPoint = goal.dataPoints.sort((a, "
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 465,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((category, index) => (\n                    <div key={category.category} cla"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 491,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((goal, index) => (\n                  <div key={goal.id} className=\"p-4 bord"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 155,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for smooth transitions\n    setIsAnalyzingTrends(true);\n    \n    // Create timeou"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "line": 345,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(dp => dp.timestamp.getTime()));\n                    const bLatest = Math.ma"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 105,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((emotion) => {\n              const Icon = emotion.icon;\n              retur"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 133,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((subEmotion) => (\n                <Badge\n                  key={subEmotion}"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 164,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((level) => (\n                <Button\n                  key={level}\n        "
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 213,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((minutes) => (\n                  <Button\n                    key={minutes}\n"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 280,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((trigger) => (\n              <Badge\n                key={trigger}\n         "
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 85,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "form\n    setSelectedEmotion('');\n    setSelectedSubEmotion('');\n    setIntensity"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 194,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for better UX while typing\n                  if (value === '') {\n               "
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 86,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setSelectedEmotion('');\n    setSelectedSubEmotion('');\n    setIntensity(3);\n    setDuration(0);\n    "
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "line": 192,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onChange={(e) => {\n                  const value =..."
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 31,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const emotionTypes = new Set<string>(filteredData.emotions.map(e => (e?.emotion "
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 32,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const sensoryTypes = new Set<string>(filteredData.sensoryInputs.map(s => (s?.sen"
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 108,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const prevFirstTs = prev.filteredData.entries[0]?.timestamp?.getTime() || prev.f"
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 109,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const nextFirstTs = next.filteredData.entries[0]?.timestamp?.getTime() || next.f"
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 110,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const prevLastTs = prev.filteredData.entries[prev.filteredData.entries.length - "
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 111,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const nextLastTs = next.filteredData.entries[next.filteredData.entries.length - "
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 80,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((insight, idx) => (\n                <li key={idx} className=\"text-sm\""
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 81,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={idx}"
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 85,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                      try {\n     ..."
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "line": 31,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(e => (e?.emotion || '').toLowerCase()).filter(Boolean));\n  const sensoryTyp"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 309,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: Object.entries(reportAnalysis.emotionSummary).map...",
      "code": "Object.entries(reportAnalysis.emotionSummary).map"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 328,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: Object.entries(reportAnalysis.sensorySummary).map...",
      "code": "Object.entries(reportAnalysis.sensorySummary).map"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 126,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const goalProgress = goals.map(goal => {\n      const progressInPeriod = goal.dat"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 148,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const avgEmotionIntensity = filteredEmotions.length > 0\n      ? filteredEmotions"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 452,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const csvString = csvContent.map(row => \n      row.map"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 309,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map(([emotion, count]) => `\n                <p><strong"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 328,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map(([type, count]) => `\n                <p><strong"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 645,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                  handleTemplateC..."
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "line": 435,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(goal => [\n        goal.title,\n        goal.category,\n        Math.round(goa"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "line": 57,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const allTimestamps = [\n      ...emotions.map(e => e.timestamp),\n      ...sensor"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "line": 246,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((metric) => (\n            <div key={metric.id} className={`p-4 rounded-lg $"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "line": 265,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((rec) => (\n                    <p key={`${metric.id}-${rec}`} className=\"te"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "line": 293,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((metric, index) => (\n                  <div key={metric.id} className=\"text"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "line": 58,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(e => e.timestamp),\n      ...sensoryInputs.map(s => s.timestamp),\n      ...e"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 104,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((type) => {\n              const Icon = type.icon;\n              return (\n  "
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 134,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((response) => (\n                <Button\n                  key={response.typ"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 161,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((level) => (\n                <Button\n                  key={level}\n        "
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 195,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((loc) => (\n                <Badge\n                  key={loc}\n             "
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 238,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((strategy) => (\n                <Badge\n                  key={strategy}\n   "
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 254,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((strategy) => (\n                <Badge\n                  key={strategy}\n   "
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 84,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "form\n    setSelectedType('');\n    setSelectedResponse('');\n    setIntensity(3);\n"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 85,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setSelectedType('');\n    setSelectedResponse('');\n    setIntensity(3);\n    setLocation('');\n    setN"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "line": 243,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                    if (!copingSt..."
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "line": 603,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((modelType) => {\n                    const model = modelStatus.get(modelTyp"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "line": 175,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for cleanup\n  const [trainingRequested, setTrainingRequested] = useState<ModelTy"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "line": 117,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setToDefaults();\n    setSelectedPreset('balanced');\n    setHasUnsavedChanges(false);\n    "
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "line": 245,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((event, index) => (\n                <Badge key={index} variant=\"secondary\" "
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "line": 246,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={index}"
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "line": 75,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "form\n    setRoomTemperature(22);\n    setLighting('');\n    setNoiseLevel(3);\n    "
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "line": 76,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setRoomTemperature(22);\n    setLighting('');\n    setNoiseLevel(3);\n    setClassroomActivity('');\n   "
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "line": 529,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((point) => (\n              <DataPoint\n                key={point.id}\n      "
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "line": 198,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n            camera.position.set(1..."
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "line": 310,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(p => p.x);\n    const yValues = points.map(p => p.y);\n    const zValues = po"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 1,
      "type": "excessive-effects",
      "severity": "medium",
      "message": "Component has 6 useEffect hooks (consider consolidation)"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 151,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((m, idx) => (\n          <div key={idx} className={m.role === 'user' ? 'text"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 246,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((s, i) => (\n                <li key={i}"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 258,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map(({ key, source }, idx) => (\n              <button\n                key={key}"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 152,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={idx}"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 247,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={i}"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 200,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "foreground\">\n              <button\n                type=\"button\"\n               "
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 97,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
      "code": "sessionStorage.getItem"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "line": 100,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
      "code": "sessionStorage.getItem"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "line": 409,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((goal) => (\n            <Card key={goal.id} className=\"bg-gradient-card bor"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "line": 492,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((milestone) => (\n                        <div key={milestone.id} className="
    },
    {
      "file": "src/components/GoalManager.tsx",
      "line": 58,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for the current student.\n   * Memoized to prevent recreation on every render.\n  "
    },
    {
      "file": "src/components/GoalManager.tsx",
      "line": 475,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                        const tit..."
    },
    {
      "file": "src/components/GoalManager.tsx",
      "line": 524,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                      const value..."
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "line": 91,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((r, i) => (<li key={i}"
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "line": 91,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={i}"
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "line": 157,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map((t: any) => {\n                      const ts = new Date(t.timestamp).toISOS"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "line": 215,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map(({ key }) => (\n                  <span\n                    key={key}\n      "
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "line": 173,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "foreground hover:bg-accent/40\"\n                  onClick={() => { setShowAllKild"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "line": 120,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                try { window.disp..."
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "line": 131,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                try { window.disp..."
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "line": 52,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "line": 55,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.setItem",
      "code": "localStorage.setItem"
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "line": 72,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for control from outside the component.\n    const [_open, _setOpen] = React.useS"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "line": 244,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((calc) => (\n            <div \n              key={calc.requirement.level}\n  "
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "line": 71,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(e => e.timestamp),\n      ...sensoryInputs.map(s => s.timestamp),\n      ...e"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "line": 233,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((milestone) => (\n              <div key={milestone.id} className=\"relative "
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "line": 43,
      "type": "nested-maps",
      "severity": "critical",
      "message": "Nested map operations detected (O(n²) complexity)",
      "code": ".map(e => e.timestamp),\n      ...sensoryInputs.map(s => s.timestamp),\n      ...e"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "line": 40,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for better UX\n      setLoadingProgress(25);\n      \n      // Generate and load th"
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "line": 25,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "map(e => e[nameKey]))];\n\n    for (let i = 0; i < days; i++) {\n        const date"
    },
    {
      "file": "src/components/analytics/QuickQuestions.tsx",
      "line": 81,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "for better keyboard flow\n  useEffect(() => {\n    if (open) {\n      setFocusedInd"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "line": 48,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "foreground\">Tip: set with <code>localStorage.setItem("
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "line": 23,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "line": 48,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.setItem",
      "code": "localStorage.setItem"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "line": 69,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: .toLocaleString()",
      "code": ".toLocaleString()"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "line": 37,
      "type": "setState-in-loop",
      "severity": "critical",
      "message": "setState called inside a loop (causes multiple re-renders)",
      "code": "format, setFormat] = React.useState<'pdf' | 'csv' | 'json'>(defaultFormat);\n  co"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 182,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: JSON.parse(raw)...",
      "code": "JSON.parse(raw)"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 216,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: JSON.parse(raw)...",
      "code": "JSON.parse(raw)"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 1,
      "type": "excessive-effects",
      "severity": "medium",
      "message": "Component has 6 useEffect hooks (consider consolidation)"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 346,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((c) => (\n                  <div key={c.key} className=\"rounded-md border p-"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 431,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((c) => (\n                          <div key={c.key} className=\"rounded-md b"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 475,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((c) => (\n                          <div key={c.key} className=\"rounded-md b"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 525,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((i) => (\n                                <li key={i.title} className=\"flex "
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 545,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((i) => (\n                                <li key={i.title} className=\"flex "
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 564,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((c: any) => (\n                              <li key={c.title}"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 595,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((s) => (\n                      <li key={`added-${s}`} className=\"text-emera"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 598,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((s) => (\n                      <li key={`removed-${s}`} className=\"text-ros"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 408,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setPatLimit(6); setCorrLimit(6); setIntAddedLimit(8); setIntRemovedLimit(8); setLastExport({ type: n"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 407,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                      setPatLimit..."
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 180,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
      "code": "sessionStorage.getItem"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 201,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: sessionStorage.setItem",
      "code": "sessionStorage.setItem"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 214,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: sessionStorage.getItem",
      "code": "sessionStorage.getItem"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 231,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: sessionStorage.setItem",
      "code": "sessionStorage.setItem"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 133,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify({\n      patterns: content.patterns,\n      correlations: content.correlations,\n      interventions: content.interventions,\n    }, null, 2)",
      "code": "JSON.stringify({\n      patterns: content.patterns,\n      correlations: content.correlations,\n      interventions: content.interventions,\n    }, null, 2)"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 201,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(data)",
      "code": "JSON.stringify(data)"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "line": 231,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(lastExport)",
      "code": "JSON.stringify(lastExport)"
    },
    {
      "file": "src/components/analytics/FiltersDrawer.tsx",
      "line": 78,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: filter(p => !p.criteria.dateRange).map...",
      "code": "filter(p => !p.criteria.dateRange).map"
    },
    {
      "file": "src/components/analytics/FiltersDrawer.tsx",
      "line": 78,
      "type": "inline-array-chains",
      "severity": "high",
      "message": "Chained array operations in render method",
      "code": "{FILTER_PRESETS.filter(p => !p.criteria.dateRange).map"
    },
    {
      "file": "src/components/analytics/FiltersDrawer.tsx",
      "line": 79,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                  const clampRang..."
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "line": 122,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((p) => (\n              <Button\n                key={p.id}\n                v"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "line": 131,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setSelectedTimeRange('30d');\n                    setSelectedChartType('scatter');\n                  "
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "line": 139,
      "type": "unbatched-updates",
      "severity": "high",
      "message": "Multiple setState calls without batching",
      "code": "setSelectedTimeRange('7d');\n                    setSelectedChartType('line');\n                    se"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "line": 127,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                  visualizationSt..."
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "line": 156,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(filterCriteria[k as keyof typeof filterCriteria])",
      "code": "JSON.stringify(filterCriteria[k as keyof typeof filterCriteria])"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "line": 157,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify({\n                    dateRange: { start: null, end: null },\n                    emotions: { types: [], intensityRange: [0, 10], includeTriggers: [], excludeTriggers: [] },\n                    sensory: { types: [], responses: [], intensityRange: [0, 10] },\n                    environmental: {\n                      locations: [],\n                      activities: [],\n                      conditions: { noiseLevel: [0, 10], temperature: [15, 30], lighting: [] },\n                      weather: [],\n                      timeOfDay: []\n                    },\n                    patterns: { anomaliesOnly: false, minConfidence: 0, patternTypes: [] },\n                    realtime: false\n                  }[k as keyof typeof filterCriteria])",
      "code": "JSON.stringify({\n                    dateRange: { start: null, end: null },\n                    emotions: { types: [], intensityRange: [0, 10], includeTriggers: [], excludeTriggers: [] },\n                    sensory: { types: [], responses: [], intensityRange: [0, 10] },\n                    environmental: {\n                      locations: [],\n                      activities: [],\n                      conditions: { noiseLevel: [0, 10], temperature: [15, 30], lighting: [] },\n                      weather: [],\n                      timeOfDay: []\n                    },\n                    patterns: { anomaliesOnly: false, minConfidence: 0, patternTypes: [] },\n                    realtime: false\n                  }[k as keyof typeof filterCriteria])"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "line": 149,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const emptyStudents = students.filter(student => {\n        const studentEntries "
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "line": 169,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const studentsWithData = students.filter(student => {\n        const studentEntri"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "line": 289,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((result) => (\n                <div key={result.name} className=\"flex items-"
    },
    {
      "file": "src/components/analytics/panels/AlertsPanel.tsx",
      "line": 105,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const counts = useMemo(() => {\n    return {\n      totalUnresolved: alerts.filter"
    },
    {
      "file": "src/components/analytics/panels/AlertsPanel.tsx",
      "line": 162,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((sev) => (\n                <Collapsible key={sev} open={!collapsed[sev]} on"
    },
    {
      "file": "src/components/analytics/panels/AlertsPanel.tsx",
      "line": 182,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((entry) => (\n                          <li key={entry.alert.id} className=\""
    },
    {
      "file": "src/components/analytics/panels/AlertsPanel.tsx",
      "line": 266,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((entry) => (\n                      <li key={entry.alert.id} className=\"roun"
    },
    {
      "file": "src/components/analytics/panels/AlertsPanel.tsx",
      "line": 239,
      "type": "large-inline-function",
      "severity": "medium",
      "message": "Large inline function in JSX (recreated on each render)",
      "code": "onClick={() => {\n                            clear..."
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 138,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: JSON.parse(saved)...",
      "code": "JSON.parse(saved)"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 382,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((template) => (\n            <Card key={template.id} className=\"relative ove"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 411,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((emotion, idx) => (\n                        <Badge key={idx} variant=\"secon"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 412,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={idx}"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 134,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 198,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.setItem",
      "code": "localStorage.setItem"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "line": 198,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(updatedTemplates)",
      "code": "JSON.stringify(updatedTemplates)"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "line": 69,
      "type": "unmemoized-calculation",
      "severity": "high",
      "message": "Expensive calculation without useMemo",
      "code": "const avgIntensity = filteredEmotions.length > 0 \n      ? filteredEmotions.reduc"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "line": 184,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((metric) => (\n            <div key={metric.label} className=\"text-center\""
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "line": 141,
      "type": "heavy-computation",
      "severity": "high",
      "message": "Heavy computation detected in render path: JSON.parse(exported)...",
      "code": "JSON.parse(exported)"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "line": 276,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((result) => (\n              <div\n                key={`${result.name}-${res"
    },
    {
      "file": "src/components/AnalyticsConfigTest.tsx",
      "line": 146,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(parsed)",
      "code": "JSON.stringify(parsed)"
    },
    {
      "file": "src/components/charts/EChartContainer.tsx",
      "line": 462,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(safeOption, (_k, v)",
      "code": "JSON.stringify(safeOption, (_k, v)"
    },
    {
      "file": "src/components/charts/EChartContainer.tsx",
      "line": 490,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify({ seriesKinds, yAxes })",
      "code": "JSON.stringify({ seriesKinds, yAxes })"
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "line": 371,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((emotion) => (\n                    <div key={emotion} className=\"flex items"
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "line": 396,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((sensory) => (\n                    <div key={sensory} className=\"flex items"
    },
    {
      "file": "src/components/AdvancedSearch.tsx",
      "line": 421,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((status) => (\n                    <div key={status} className=\"flex items-c"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "line": 72,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((e) => (\n                    <li key={e.id}"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "line": 82,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((s) => (\n                    <li key={s.id}"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "line": 193,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((status) => (\n              <div key={status.studentId} className=\"flex ite"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "line": 129,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((alertEntry) => (\n        <Card key={alertEntry.alert.id} className={`trans"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "line": 213,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((rec) => (\n                                  <li key={`${selectedAlert.aler"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "line": 263,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((recommendation) => (\n                    <li key={`${alertEntry.alert.id}-"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 95,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((pattern, index) => (\n              <Card\n                key={index}\n     "
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 120,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((rec, i) => (\n                            <p key={i} className=\"text-xs tex"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 144,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((insight, index) => (\n              <Card key={index} className=\"bg-gradien"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 196,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((rec, i) => (\n                            <p key={i} className=\"text-xs tex"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 229,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((anomaly, index) => (\n              <Card\n                key={index}\n     "
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 97,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={index}"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 121,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={i}"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 145,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={index}"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 197,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={i}"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "line": 231,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={index}"
    },
    {
      "file": "src/components/dev/ModelDiagnosticsPanel.tsx",
      "line": 242,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((mt) => (\n                      <SelectItem key={mt} value={mt}"
    },
    {
      "file": "src/components/dev/ModelDiagnosticsPanel.tsx",
      "line": 331,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((a) => (\n                  <li key={a.id} aria-live={a.tone}"
    },
    {
      "file": "src/components/ConfidenceIndicator.tsx",
      "line": 102,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((explanation) => (\n                <div key={explanation} className=\"text-x"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "line": 43,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "line": 47,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "line": 55,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.setItem",
      "code": "localStorage.setItem"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "line": 57,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.setItem",
      "code": "localStorage.setItem"
    },
    {
      "file": "src/components/DevErrorBanner.tsx",
      "line": 38,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: JSON.stringify(a)",
      "code": "JSON.stringify(a)"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "line": 59,
      "type": "sync-io",
      "severity": "medium",
      "message": "Synchronous I/O operation in render path: localStorage.getItem",
      "code": "localStorage.getItem"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "line": 114,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((item) => (\n                <SidebarMenuItem key={item.section}"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "line": 149,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((item) => (\n                <SidebarMenuItem key={item.section}"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "line": 99,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((entry) => (\n                <div key={entry.id} className=\"border-l-4 bord"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "line": 126,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((emotion, idx) => (\n                        <Badge key={idx} variant=\"secon"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "line": 127,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={idx}"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "line": 135,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((pair, index) => (\n                  <div key={index} className=\"flex items"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "line": 136,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={index}"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "line": 267,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((suggestion: string, index: number) => (\n                <div key={index} c"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "line": 268,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={index}"
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "line": 125,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((preset) => (\n            <SelectItem key={preset.value} value={preset.valu"
    },
    {
      "file": "src/components/ui/Breadcrumbs.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/ui/Breadcrumbs.tsx",
      "line": 21,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((item, idx) => {\n          const isLast = idx === items.length - 1;\n       "
    },
    {
      "file": "src/components/analytics-panels/CorrelationsPanel.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/analytics-panels/CorrelationsPanel.tsx",
      "line": 91,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((correlation: CorrelationResult) => (\n                <Card key={hashOfStri"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/analytics-panels/ChatComposer.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/analytics-panels/ChatComposer.tsx",
      "line": 41,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((s, i) => (\n            <button\n              key={i}\n              type=\"b"
    },
    {
      "file": "src/components/analytics-panels/ChatComposer.tsx",
      "line": 43,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={i}"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/dashboard/StudentsGrid.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/dashboard/StudentsGrid.tsx",
      "line": 15,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((_, i) => (\n          <div key={i} className=\"glass-card rounded-3xl p-6 an"
    },
    {
      "file": "src/components/dashboard/StudentsGrid.tsx",
      "line": 41,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((student, index) => (\n        <PremiumStudentCard\n          key={student.id"
    },
    {
      "file": "src/components/dashboard/StudentsGrid.tsx",
      "line": 16,
      "type": "index-as-key",
      "severity": "medium",
      "message": "Using array index as React key (causes re-renders)",
      "code": "key={i}"
    },
    {
      "file": "src/components/profile-sections/ToolsSection.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/profile-sections/ToolsSection.tsx",
      "line": 98,
      "type": "missing-react-key",
      "severity": "medium",
      "message": "List item rendered without a React key prop",
      "code": ".map((section) => (\n          <button\n            key={section.id}\n            o"
    },
    {
      "file": "src/components/analytics/panels/ExplorePanel.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/lazy/LazyVisualization3D.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/lazy/LazyAnalyticsDashboard.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/analytics-panels/ChartsPanel.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    },
    {
      "file": "src/components/analytics-panels/AlertsPanel.tsx",
      "line": 1,
      "type": "missing-memoization",
      "severity": "medium",
      "message": "Component with complex props lacks memoization"
    }
  ]
}