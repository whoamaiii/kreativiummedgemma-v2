{
  "generatedAt": "2025-09-21T12:16:12.856Z",
  "offenders": [
    {
      "file": "src/workers/analytics.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analytics.worker] Cache clear command failed",
      "line": 225,
      "column": 26,
      "context": "s AnalyticsWorkerMessage); } } catch (err) { try { logger.error('[analytics.worker] Cache clear command failed', err as Error); } catch {} }"
    },
    {
      "file": "src/workers/analytics.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analytics.worker] error",
      "line": 429,
      "column": 18,
      "context": "own as AnalyticsWorkerMessage); } catch (error) { try { logger.error('[analytics.worker] error', error); } catch (e) { /* ignore logging fa"
    },
    {
      "file": "src/workers/analytics.worker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error in analytics worker:",
      "line": 433,
      "column": 18,
      "context": "r); } catch (e) { /* ignore logging failure */ } logger.error('Error in analytics worker:', error); // Post an error message back to the m"
    },
    {
      "file": "src/pages/AddStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error adding student:",
      "line": 60,
      "column": 20,
      "context": "dent.success'))); navigate('/'); } catch (error) { logger.error('Error adding student:', error); const errorMessage = error instanceof Err"
    },
    {
      "file": "src/pages/EnhancedTrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Save session error",
      "line": 141,
      "column": 20,
      "context": "navigate(`/student/${student.id}`); } catch (error) { logger.error('Save session error', { error }); toast.error(String(tTracking('session.sa"
    },
    {
      "file": "src/pages/EnhancedTrackStudent.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "m",
      "line": 236,
      "column": 83,
      "context": "<div className=\"text-2xl font-bold text-primary\">{sessionDuration}m</div> <div className=\"text-sm text-muted-foreground\">{String(t"
    },
    {
      "file": "src/pages/EnhancedTrackStudent.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Session Data Review",
      "line": 261,
      "column": 26,
      "context": "th > 0) && ( <Card> <CardHeader> <CardTitle>Session Data Review</CardTitle> </CardHeader> <CardConte"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[KreativiumAI] load students failed",
      "line": 209,
      "column": 20,
      "context": "ngth && !studentId) setStudentId(s[0].id); } catch (e) { logger.error('[KreativiumAI] load students failed', e as Error); setStudents([]); }"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[KreativiumAI] Failed to resolve sources",
      "line": 412,
      "column": 22,
      "context": "setResolvedSources(sourceMap); } catch (e) { logger.error('[KreativiumAI] Failed to resolve sources', e as Error); } }"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "År:",
      "line": 521,
      "column": 77,
      "context": "p>} {source.year && <p className=\"text-xs text-muted-foreground mt-1\">År: {source.year}</p>} </TooltipContent> </Tooltip> ); });"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kreativium‑AI",
      "line": 553,
      "column": 52,
      "context": "</div> <div> <h1 className=\"text-2xl font-bold\">Kreativium‑AI</h1> <p className=\"text-sm text-muted-foreground\">Lo"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Lokal LLM for mønstre, korrelasjoner og tiltak",
      "line": 554,
      "column": 60,
      "context": "\">Kreativium‑AI</h1> <p className=\"text-sm text-muted-foreground\">Lokal LLM for mønstre, korrelasjoner og tiltak</p> <p className=\"t"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Modell:",
      "line": 555,
      "column": 67,
      "context": "og tiltak</p> <p className=\"text-xs text-muted-foreground mt-0.5\">Modell: <code>{displayModelName}</code> {fromUiCache && (<span className=\"ml-2 i"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 555,
      "column": 246,
      "context": "nter gap-1 text-[11px] rounded px-1.5 py-0.5 border border-muted-foreground/30\">• {tAnalytics('interface.fromUiCache')}</span>)}</p> </div>"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Elev",
      "line": 572,
      "column": 17,
      "context": "htmlFor={studentSelectTriggerId} > Elev </label> <Select value={studentId} onValueChang"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Velg elev",
      "line": 580,
      "column": 44,
      "context": "dentSelectLabelId} > <SelectValue placeholder=\"Velg elev\" /> </SelectTrigger> <SelectContent>"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tidsrom",
      "line": 595,
      "column": 17,
      "context": "htmlFor={presetSelectTriggerId} > Tidsrom </label> <Select value={preset} onValueChang"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Siste 7 dager",
      "line": 606,
      "column": 42,
      "context": "igger> <SelectContent> <SelectItem value=\"7d\">Siste 7 dager</SelectItem> <SelectItem value=\"30d\">Siste 30 da"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Siste 30 dager",
      "line": 607,
      "column": 43,
      "context": "value=\"7d\">Siste 7 dager</SelectItem> <SelectItem value=\"30d\">Siste 30 dager</SelectItem> <SelectItem value=\"90d\">Siste 90 d"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Siste 90 dager",
      "line": 608,
      "column": 43,
      "context": "lue=\"30d\">Siste 30 dager</SelectItem> <SelectItem value=\"90d\">Siste 90 dager</SelectItem> <SelectItem value=\"all\">Hele histo"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hele historikken",
      "line": 609,
      "column": 43,
      "context": "lue=\"90d\">Siste 90 dager</SelectItem> <SelectItem value=\"all\">Hele historikken</SelectItem> </SelectContent> </S"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "IEP-trygg modus",
      "line": 648,
      "column": 19,
      "context": "ssName=\"text-sm text-muted-foreground\" htmlFor={iepToggleId}> IEP-trygg modus </label> <TooltipProvider>"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "IEP-trygg modus",
      "line": 655,
      "column": 36,
      "context": "gle id={iepToggleId} aria-label=\"IEP-trygg modus\" pressed={iepSafeMode}"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "IEP-trygg modus sikrer pedagogiske anbefalinger",
      "line": 668,
      "column": 26,
      "context": "</TooltipTrigger> <TooltipContent> <p>IEP-trygg modus sikrer pedagogiske anbefalinger</p> <p cla"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "uten medisinske/kliniske råd",
      "line": 669,
      "column": 46,
      "context": "ikrer pedagogiske anbefalinger</p> <p className=\"text-xs\">uten medisinske/kliniske råd</p> </TooltipContent>"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Test AI",
      "line": 676,
      "column": 57,
      "context": "ing} className=\"w-1/2\"> <RefreshCw className=\"h-4 w-4 mr-2\" />Test AI </Button> <Button onClick={analyze} disa"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kjør analyse",
      "line": 679,
      "column": 52,
      "context": "tudentId} className=\"w-1/2\"> <Play className=\"h-4 w-4 mr-2\" />Kjør analyse </Button> <Button onClick={refreshA"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Oppdater (forbi cache)",
      "line": 682,
      "column": 57,
      "context": "ame=\"w-full sm:w-auto\"> <RefreshCw className=\"h-4 w-4 mr-2\" />Oppdater (forbi cache) </Button> {compareEnabled"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sammenligning...",
      "line": 686,
      "column": 66,
      "context": "d-foreground\"> <Loader2 className=\"h-3 w-3 animate-spin\" /> Sammenligning... </span> )} </di"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakvalitet",
      "line": 698,
      "column": 94,
      "context": "<CardTitle className=\"flex items-center gap-2\"><Database className=\"h-4 w-4\" />Datakvalitet</CardTitle> </CardHeader> <CardContent clas"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datapunkter",
      "line": 704,
      "column": 68,
      "context": "<div> <div className=\"text-xs text-muted-foreground\">Datapunkter</div> <div className=\"font-medium\">{dataQuality."
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sist registrert",
      "line": 708,
      "column": 68,
      "context": "<div> <div className=\"text-xs text-muted-foreground\">Sist registrert</div> <div className=\"font-medium\">{dataQual"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dager siden",
      "line": 712,
      "column": 68,
      "context": "<div> <div className=\"text-xs text-muted-foreground\">Dager siden</div> <div className=\"font-medium\">{dataQuality."
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fullstendighet",
      "line": 716,
      "column": 68,
      "context": "<div> <div className=\"text-xs text-muted-foreground\">Fullstendighet</div> <div className=\"font-medium\">{dataQuali"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Balanse (tid på dagen)",
      "line": 720,
      "column": 73,
      "context": "pan-4\"> <div className=\"text-xs text-muted-foreground mb-1\">Balanse (tid på dagen)</div> <div className=\"flex items-cent"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 726,
      "column": 80,
      "context": "{i < 2 && <span className=\"text-muted-foreground/40\">•</span>} </div> ))}"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "score:",
      "line": 729,
      "column": 83,
      "context": "<span className=\"ml-auto text-[11px] text-muted-foreground\">score: {dataQuality.balance}%</span> </div>"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen data funnet for valgt periode.",
      "line": 734,
      "column": 117,
      "context": "items-center gap-2 text-muted-foreground\"><AlertTriangle className=\"h-4 w-4\" />Ingen data funnet for valgt periode.</div> )} </CardCo"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Nøkkelfunn",
      "line": 818,
      "column": 96,
      "context": "<CardTitle className=\"flex items-center gap-2\"><Database className=\"h-4 w-4\" />Nøkkelfunn</CardTitle> </CardHeader> <CardContent cl"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen nøkkelfunn rapportert.",
      "line": 825,
      "column": 66,
      "context": "</ul> ) : <p className=\"text-sm text-muted-foreground\">Ingen nøkkelfunn rapportert.</p>} </CardContent> </Car"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mønstre",
      "line": 831,
      "column": 93,
      "context": "<CardTitle className=\"flex items-center gap-2\"><Clock className=\"h-4 w-4\" />Mønstre</CardTitle> </CardHeader> <CardContent class"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen mønstre identifisert.",
      "line": 845,
      "column": 67,
      "context": "); }) : <p className=\"text-sm text-muted-foreground\">Ingen mønstre identifisert.</p>} </CardContent> </Card"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tiltak og anbefalinger",
      "line": 851,
      "column": 96,
      "context": "<CardTitle className=\"flex items-center gap-2\"><Sparkles className=\"h-4 w-4\" />Tiltak og anbefalinger</CardTitle> </CardHeader> <To"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Källor:",
      "line": 868,
      "column": 82,
      "context": "<span className=\"text-xs text-muted-foreground mr-2\">Källor:</span> <div className=\"flex flex-wrap gap-1"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen anbefalinger rapportert.",
      "line": 886,
      "column": 66,
      "context": "</ul> ) : <p className=\"text-sm text-muted-foreground\">Ingen anbefalinger rapportert.</p>} </CardContent> <"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI‑metadata •",
      "line": 895,
      "column": 49,
      "context": "Name=\"flex items-center gap-2\"> <Info className=\"h-4 w-4\" />AI‑metadata • <span className=\"font-normal text-muted-foreground\">{displayModelN"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Modell:",
      "line": 902,
      "column": 24,
      "context": "ent className=\"text-sm text-muted-foreground space-y-1\"> <div>Modell: {results.ai.model}</div> {results.ai.latencyMs != null"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Latens:",
      "line": 903,
      "column": 57,
      "context": "results.ai.model}</div> {results.ai.latencyMs != null && <div>Latens: {Math.round(results.ai.latencyMs)} ms</div>} {results."
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "ms",
      "line": 903,
      "column": 100,
      "context": "results.ai.latencyMs != null && <div>Latens: {Math.round(results.ai.latencyMs)} ms</div>} {results.ai.usage && ( <div>Toke"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tokens: prompt",
      "line": 905,
      "column": 26,
      "context": "s)} ms</div>} {results.ai.usage && ( <div>Tokens: prompt {results.ai.usage.promptTokens ?? 0} • completion {results.ai.usa"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• completion",
      "line": 905,
      "column": 78,
      "context": "( <div>Tokens: prompt {results.ai.usage.promptTokens ?? 0} • completion {results.ai.usage.completionTokens ?? 0} • total {results.ai.usage."
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• total",
      "line": 905,
      "column": 132,
      "context": ".usage.promptTokens ?? 0} • completion {results.ai.usage.completionTokens ?? 0} • total {results.ai.usage.totalTokens ?? 0}</div> )}"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache: read",
      "line": 908,
      "column": 26,
      "context": "|| (results.ai.usage.cacheWriteTokens ?? 0) > 0) && ( <div>Cache: read {results.ai.usage.cacheReadTokens ?? 0} • write {results.ai.usage.ca"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• write",
      "line": 908,
      "column": 78,
      "context": "( <div>Cache: read {results.ai.usage.cacheReadTokens ?? 0} • write {results.ai.usage.cacheWriteTokens ?? 0}</div> )}"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "JSON‑gyldighet (global):",
      "line": 910,
      "column": 131,
      "context": "ics.summary(); const pct = Math.round((s.jsonValidity || 0) * 100); return <div>JSON‑gyldighet (global): {pct}%</div>; } catch { return null; } })()}"
    },
    {
      "file": "src/pages/KreativiumAI.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Forbehold:",
      "line": 912,
      "column": 26,
      "context": "ults.ai.caveats) && results.ai.caveats.length > 0 && ( <div>Forbehold: {results.ai.caveats.join('; ')}</div> )}"
    },
    {
      "file": "src/pages/NotFound.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "404 Error: User attempted to access non-existent route",
      "line": 14,
      "column": 18,
      "context": "; const { tCommon } = useTranslation(); useEffect(() => { logger.error(\"404 Error: User attempted to access non-existent route\", { path: location"
    },
    {
      "file": "src/pages/ReportsClean.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Reports: failed to load data for export",
      "line": 98,
      "column": 20,
      "context": "ts, trackingEntries, goals } as const; } catch (error) { logger.error('Reports: failed to load data for export', { error }); return { students:"
    },
    {
      "file": "src/pages/ReportsClean.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "System CSV export failed",
      "line": 129,
      "column": 20,
      "context": "tSettings('dataExport.success_csv'))); } catch (error) { logger.error('System CSV export failed', { error }); toast.error(tSettings('dataExport."
    },
    {
      "file": "src/pages/ReportsClean.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "System JSON export failed",
      "line": 162,
      "column": 20,
      "context": "Settings('dataExport.success_json'))); } catch (error) { logger.error('System JSON export failed', { error }); toast.error(tSettings('dataExport"
    },
    {
      "file": "src/pages/ReportsClean.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "System backup failed",
      "line": 194,
      "column": 20,
      "context": "ttings('dataExport.success_backup'))); } catch (error) { logger.error('System backup failed', { error }); toast.error(tSettings('dataExport.erro"
    },
    {
      "file": "src/pages/ReportsHub.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "reports-templates-heading",
      "line": 50,
      "column": 34,
      "context": "</Link> </div> </header> <section aria-labelledby=\"reports-templates-heading\" className=\"space-y-4\"> <h2 id=\"reports-tem"
    },
    {
      "file": "src/pages/Settings.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Settings navigation",
      "line": 26,
      "column": 65,
      "context": "-cols-4 gap-6\"> <aside className=\"md:col-span-1 space-y-2\" aria-label=\"Settings navigation\"> <ul className=\"text-sm\"> <li> <"
    },
    {
      "file": "src/pages/SignIndexPage.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "sign-search-status",
      "line": 33,
      "column": 28,
      "context": "ceholder={String(tCommon('tegn.searchPlaceholder'))} aria-describedby=\"sign-search-status\" /> <div id=\"sign-search-status\" role=\"statu"
    },
    {
      "file": "src/pages/SignLearnPage.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Vis dette tegnet:",
      "line": 41,
      "column": 42,
      "context": "t-foreground flex items-center gap-2\"> <Hand className=\"h-5 w-5\" /> Vis dette tegnet: <span className=\"text-primary\">{current.word}</span>"
    },
    {
      "file": "src/pages/SignLearnPage.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Neste tegn",
      "line": 53,
      "column": 53,
      "context": "sit'} </Button> <Button onClick={handleNext} aria-label=\"Neste tegn\">👍 Jeg gjorde det!</Button> </div> <div classNa"
    },
    {
      "file": "src/pages/SignLearnPage.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "👍 Jeg gjorde det!",
      "line": 53,
      "column": 66,
      "context": "</Button> <Button onClick={handleNext} aria-label=\"Neste tegn\">👍 Jeg gjorde det!</Button> </div> <div className=\"space-y-2"
    },
    {
      "file": "src/pages/SignLearnPage.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kameraveiledning kommer – øv selv foreløpig",
      "line": 57,
      "column": 46,
      "context": "reground flex items-center gap-2\"> <Camera className=\"h-4 w-4\" /> Kameraveiledning kommer – øv selv foreløpig </div> <Webc"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Auto-seeding minimal demo data for mock route",
      "line": 178,
      "column": 21,
      "context": ".current = true; setIsSeedingData(true); try { logger.info('Auto-seeding minimal demo data for mock route', { studentId });"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to auto-seed mock data",
      "line": 194,
      "column": 22,
      "context": "reloadData(); } } catch (error) { logger.error('Failed to auto-seed mock data', { error, studentId }); toast.error(Stri"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error generating insights",
      "line": 243,
      "column": 24,
      "context": "} } catch (error) { if (!signal.aborted) { logger.error('Error generating insights', { error }); setInsights(null);"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager.triggerAnalyticsForStudent failed",
      "line": 273,
      "column": 26,
      "context": "} }) .catch((err) => { logger.error('[SAFE] analyticsManager.triggerAnalyticsForStudent failed', { error: err, stude"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager.initializeStudentAnalytics failed",
      "line": 285,
      "column": 24,
      "context": "entAnalytics done'); } } catch (err) { logger.error('[SAFE] analyticsManager.initializeStudentAnalytics failed', { error: err, stude"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager outer try/catch caught error",
      "line": 290,
      "column": 20,
      "context": "/ Extra safety net; never rethrow from analytics side-effect logger.error('[SAFE] analyticsManager outer try/catch caught error', { error: err }); }"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export error",
      "line": 357,
      "column": 20,
      "context": "(tCommon('status.success'))); } catch (error: unknown) { logger.error('Export error', { error }); const errorMessage = error instanceof Error ?"
    },
    {
      "file": "src/pages/StudentProfile.original.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Backup error",
      "line": 381,
      "column": 20,
      "context": "ss(String(tCommon('status.success'))); } catch (error) { logger.error('Backup error', { error }); toast.error(String(tCommon('error.title')));"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Auto-seeding minimal demo data for mock route",
      "line": 180,
      "column": 21,
      "context": ".current = true; setIsSeedingData(true); try { logger.info('Auto-seeding minimal demo data for mock route', { studentId });"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Demo data created successfully",
      "line": 189,
      "column": 23,
      "context": "); // Show non-intrusive success message toast.success('Demo data created successfully', { description: 'Sample data has been"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Demo data created successfully",
      "line": 189,
      "column": 23,
      "context": "); // Show non-intrusive success message toast.success('Demo data created successfully', { description: 'Sample data has been"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to auto-seed mock data",
      "line": 198,
      "column": 22,
      "context": "reloadData(); } } catch (error) { logger.error('Failed to auto-seed mock data', { error, studentId }); toast.error('Fai"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to create demo data",
      "line": 199,
      "column": 21,
      "context": "ror('Failed to auto-seed mock data', { error, studentId }); toast.error('Failed to create demo data', { description: 'Please try loading mock"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to create demo data",
      "line": 199,
      "column": 21,
      "context": "ror('Failed to auto-seed mock data', { error, studentId }); toast.error('Failed to create demo data', { description: 'Please try loading mock"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error generating insights",
      "line": 249,
      "column": 24,
      "context": "} } catch (error) { if (!signal.aborted) { logger.error('Error generating insights', { error }); setInsights(null);"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to generate insights",
      "line": 251,
      "column": 23,
      "context": "ating insights', { error }); setInsights(null); toast.error('Failed to generate insights'); } } finally { if (!signal."
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to generate insights",
      "line": 251,
      "column": 23,
      "context": "ating insights', { error }); setInsights(null); toast.error('Failed to generate insights'); } } finally { if (!signal."
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager.triggerAnalyticsForStudent failed",
      "line": 279,
      "column": 26,
      "context": "} }) .catch((err) => { logger.error('[SAFE] analyticsManager.triggerAnalyticsForStudent failed', { error: err, stude"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager.initializeStudentAnalytics failed",
      "line": 291,
      "column": 24,
      "context": "entAnalytics done'); } } catch (err) { logger.error('[SAFE] analyticsManager.initializeStudentAnalytics failed', { error: err, stude"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SAFE] analyticsManager outer try/catch caught error",
      "line": 296,
      "column": 20,
      "context": "/ Extra safety net; never rethrow from analytics side-effect logger.error('[SAFE] analyticsManager outer try/catch caught error', { error: err }); }"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Report exported as PDF",
      "line": 357,
      "column": 25,
      "context": "await analyticsExport.exportTo('pdf', exportData); toast.success('Report exported as PDF'); return; } case 'csv': {"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Report exported as PDF",
      "line": 357,
      "column": 25,
      "context": "await analyticsExport.exportTo('pdf', exportData); toast.success('Report exported as PDF'); return; } case 'csv': {"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export error",
      "line": 383,
      "column": 20,
      "context": "as ${format.toUpperCase()}`); } catch (error: unknown) { logger.error('Export error', { error }); const errorMessage = error instanceof Error ?"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Backup created successfully",
      "line": 405,
      "column": 21,
      "context": "]/g, '-')}.json`; downloadBlob(backupBlob, filename); toast.success('Backup created successfully'); } catch (error) { logger.error('Backup"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Backup created successfully",
      "line": 405,
      "column": 21,
      "context": "]/g, '-')}.json`; downloadBlob(backupBlob, filename); toast.success('Backup created successfully'); } catch (error) { logger.error('Backup"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Backup error",
      "line": 407,
      "column": 20,
      "context": "uccess('Backup created successfully'); } catch (error) { logger.error('Backup error', { error }); toast.error('Backup failed. Please try again.'"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Backup failed. Please try again.",
      "line": 408,
      "column": 19,
      "context": "atch (error) { logger.error('Backup error', { error }); toast.error('Backup failed. Please try again.'); } }, [student, trackingEntries, allEm"
    },
    {
      "file": "src/pages/StudentProfile.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Backup failed. Please try again.",
      "line": 408,
      "column": 19,
      "context": "atch (error) { logger.error('Backup error', { error }); toast.error('Backup failed. Please try again.'); } }, [student, trackingEntries, allEm"
    },
    {
      "file": "src/pages/StudentProfileOptimized.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Demo data created successfully",
      "line": 123,
      "column": 23,
      "context": "window.dispatchEvent(new CustomEvent('mockDataLoaded')); toast.success('Demo data created successfully'); if (reloadData) reloadData(); }"
    },
    {
      "file": "src/pages/StudentProfileOptimized.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Demo data created successfully",
      "line": 123,
      "column": 23,
      "context": "window.dispatchEvent(new CustomEvent('mockDataLoaded')); toast.success('Demo data created successfully'); if (reloadData) reloadData(); }"
    },
    {
      "file": "src/pages/StudentProfileOptimized.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to auto-seed mock data",
      "line": 126,
      "column": 22,
      "context": "if (reloadData) reloadData(); } catch (error) { logger.error('Failed to auto-seed mock data', { error, studentId }); toast.error('Fai"
    },
    {
      "file": "src/pages/StudentProfileOptimized.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to create demo data",
      "line": 127,
      "column": 21,
      "context": "ror('Failed to auto-seed mock data', { error, studentId }); toast.error('Failed to create demo data'); } finally { setIsSeedingData(false)"
    },
    {
      "file": "src/pages/StudentProfileOptimized.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to create demo data",
      "line": 127,
      "column": 21,
      "context": "ror('Failed to auto-seed mock data', { error, studentId }); toast.error('Failed to create demo data'); } finally { setIsSeedingData(false)"
    },
    {
      "file": "src/pages/StudentProfileOptimized.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to get insights",
      "line": 154,
      "column": 26,
      "context": "ewInsights); } } catch (error) { logger.error('Failed to get insights', { error }); } finally { setIsLoa"
    },
    {
      "file": "src/pages/StudentProfileOptimized.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export error",
      "line": 212,
      "column": 20,
      "context": "essfully as ${format.toUpperCase()}`); } catch (error) { logger.error('Export error', { error }); toast.error(`Export failed: ${error instanceof"
    },
    {
      "file": "src/pages/TegnLayout.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Tegn til Tale navigation",
      "line": 20,
      "column": 25,
      "context": "</h1> <LanguageSettings /> </header> <nav aria-label=\"Tegn til Tale navigation\" className=\"flex gap-2\"> <NavLink to=\".\" end"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Emotion recorded!",
      "line": 42,
      "column": 19,
      "context": "| 'timestamp'>) => { setEmotions([...emotions, emotion]); toast.success(\"Emotion recorded!\"); }; const handleSensoryAdd = (sensory: Omit<SensoryEnt"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Emotion recorded!",
      "line": 42,
      "column": 19,
      "context": "| 'timestamp'>) => { setEmotions([...emotions, emotion]); toast.success(\"Emotion recorded!\"); }; const handleSensoryAdd = (sensory: Omit<SensoryEnt"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Sensory input recorded!",
      "line": 47,
      "column": 19,
      "context": "mp'>) => { setSensoryInputs([...sensoryInputs, sensory]); toast.success(\"Sensory input recorded!\"); }; const handleEnvironmentalAdd = (environmenta"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Sensory input recorded!",
      "line": 47,
      "column": 19,
      "context": "mp'>) => { setSensoryInputs([...sensoryInputs, sensory]); toast.success(\"Sensory input recorded!\"); }; const handleEnvironmentalAdd = (environmenta"
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Environmental conditions recorded!",
      "line": 52,
      "column": 19,
      "context": "| 'timestamp'>) => { setEnvironmentalData(environmental); toast.success(\"Environmental conditions recorded!\"); }; const handleSaveSession = async ("
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Environmental conditions recorded!",
      "line": 52,
      "column": 19,
      "context": "| 'timestamp'>) => { setEnvironmentalData(environmental); toast.success(\"Environmental conditions recorded!\"); }; const handleSaveSession = async ("
    },
    {
      "file": "src/pages/TrackStudent.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save tracking session",
      "line": 100,
      "column": 20,
      "context": "navigate(`/student/${student.id}`); } catch (error) { logger.error('Failed to save tracking session', { error }); toast.error(String(tTrackin"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error saving alerts:",
      "line": 160,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error saving alerts:', err); // Actionable hint for POC/demo users"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save alerts even after cleanup:",
      "line": 177,
      "column": 22,
      "context": "anceof Error ? retryError : new Error(String(retryError)); logger.error('Failed to save alerts even after cleanup:', err2); // In demo mode, we"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error loading alerts:",
      "line": 205,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error loading alerts:', err); return []; } } /** * Retrieves"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error marking alert as viewed:",
      "line": 254,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error marking alert as viewed:', err); } } /** * Resolves a specifi"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error resolving alert:",
      "line": 282,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error resolving alert:', err); } } /** * Deletes a specific alert f"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error deleting alert:",
      "line": 298,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error deleting alert:', err); } } /** * Retrieves the current alert"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error loading alert settings:",
      "line": 315,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error loading alert settings:', err); return this.defaultSettings; }"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error updating alert settings:",
      "line": 332,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error updating alert settings:', err); } } /** * Provides a summary"
    },
    {
      "file": "src/lib/alertSystem.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error cleaning up old alerts:",
      "line": 393,
      "column": 20,
      "context": "= error instanceof Error ? error : new Error(String(error)); logger.error('Error cleaning up old alerts:', err); } } /** * Exports alerts to a"
    },
    {
      "file": "src/lib/analyticsConfig.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to import configuration:",
      "line": 517,
      "column": 20,
      "context": "turn true; } return false; } catch (error) { logger.error('Failed to import configuration:', error); return false; } } priv"
    },
    {
      "file": "src/lib/analyticsConfig.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load analytics configuration:",
      "line": 537,
      "column": 20,
      "context": "ICS_CONFIG, parsed); } } } catch (error) { logger.error('Failed to load analytics configuration:', error); } return { ...DEFAULT"
    },
    {
      "file": "src/lib/analyticsConfig.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save analytics configuration:",
      "line": 554,
      "column": 24,
      "context": "// Silent fail if unable to remove key } logger.error('Failed to save analytics configuration:', err); } } } catch ("
    },
    {
      "file": "src/lib/analyticsConfig.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save analytics configuration:",
      "line": 558,
      "column": 20,
      "context": "nfiguration:', err); } } } catch (error) { logger.error('Failed to save analytics configuration:', error); } } private notifyLi"
    },
    {
      "file": "src/lib/analyticsConfigOverride.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Applying development analytics configuration for better pattern detection",
      "line": 9,
      "column": 15,
      "context": "less data */ export function applyDevelopmentAnalyticsConfig() { logger.info('Applying development analytics configuration for better pattern detection');"
    },
    {
      "file": "src/lib/analyticsConfigOverride.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to apply development analytics config (non-fatal):",
      "line": 70,
      "column": 18,
      "context": "ANALYSIS_PERIOD_DAYS: 30, }, }); } catch (error) { logger.error('Failed to apply development analytics config (non-fatal):', error); } } // A"
    },
    {
      "file": "src/lib/analyticsConfigValidation.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsConfigValidation] Invalid analytics configuration detected. Falling back to defaults.",
      "line": 63,
      "column": 18,
      "context": "} } catch (err) { // fall through to default } try { logger.error('[analyticsConfigValidation] Invalid analytics configuration detected. Falling b"
    },
    {
      "file": "src/lib/analyticsExport.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error adding chart export to PDF:",
      "line": 349,
      "column": 24,
      "context": "colIndex = 1; } } catch (e) { logger.error('Error adding chart export to PDF:', e); } } } else if (export"
    },
    {
      "file": "src/lib/analyticsExport.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error adding chart to PDF:",
      "line": 373,
      "column": 24,
      "context": "urrentY, imgWidth, imgHeight); } catch (error) { logger.error('Error adding chart to PDF:', error); } } } // Save the P"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] ensureUniversalAnalyticsInitialization failed",
      "line": 86,
      "column": 18,
      "context": "ated during initialization saveProfiles(); } catch (e) { logger.error('[analyticsManager] ensureUniversalAnalyticsInitialization failed', e); } };"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] initializeStudentAnalytics failed",
      "line": 272,
      "column": 20,
      "context": "entId, profile); saveProfiles(); } catch (error) { logger.error('[analyticsManager] initializeStudentAnalytics failed', { error, studentId });"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[analyticsManager] Manager TTL cache disabled; not storing results.",
      "line": 368,
      "column": 21,
      "context": "results, timestamp: new Date() }); } else { try { logger.info('[analyticsManager] Manager TTL cache disabled; not storing results.'); }"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] generateAnalytics: invalid student",
      "line": 404,
      "column": 20,
      "context": "y guard for invalid input if (!student || !student.id) { logger.error('[analyticsManager] generateAnalytics: invalid student', { student }); ret"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] triggerAnalyticsForStudent failed",
      "line": 580,
      "column": 20,
      "context": "ait this.getStudentAnalytics(student); } catch (error) { logger.error('[analyticsManager] triggerAnalyticsForStudent failed', { error, studentId: stud"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[analyticsManager] Cleared all analytics caches",
      "line": 751,
      "column": 19,
      "context": "geCaches(); summary.localStorage = localStorageResult; logger.info('[analyticsManager] Cleared all analytics caches', summary); return { ok:"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] clearAllAnalyticsCaches failed",
      "line": 754,
      "column": 20,
      "context": "mary); return { ok: true, summary }; } catch (e) { logger.error('[analyticsManager] clearAllAnalyticsCaches failed', e as Error); return {"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[analyticsManager] Cleared student caches",
      "line": 780,
      "column": 19,
      "context": "hook broadcast this.notifyWorkerCacheClear(studentId); logger.info('[analyticsManager] Cleared student caches', { studentId }); return { ok:"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager] clearStudentCaches failed",
      "line": 783,
      "column": 20,
      "context": "}); return { ok: true, studentId }; } catch (e) { logger.error('[analyticsManager] clearStudentCaches failed', e as Error); return { ok:"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error saving analytics profiles:",
      "line": 794,
      "column": 58,
      "context": "rofiles.saveProfiles() try { saveProfiles(); } catch (error) { logger.error('Error saving analytics profiles:', error); } } /** * Engine factory: se"
    },
    {
      "file": "src/lib/analyticsManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManager.orchestrator] getInsights failed",
      "line": 975,
      "column": 18,
      "context": "inputs.goals?.length ?? 0, }, }; } catch (error) { logger.error('[analyticsManager.orchestrator] getInsights failed', { error }); const cach"
    },
    {
      "file": "src/lib/analyticsManagerLite.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsManagerLite] Failed to initialize student",
      "line": 26,
      "column": 20,
      "context": "Student initialized', { studentId }); } catch (error) { logger.error('[analyticsManagerLite] Failed to initialize student', { error, studentId });"
    },
    {
      "file": "src/lib/analyticsPrecomputation.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[PrecomputationManager] Task failed",
      "line": 278,
      "column": 30,
      "context": "ocessedTasks.add(task.id); } catch (err) { try { logger.error('[PrecomputationManager] Task failed', err as Error); } catch { /* noop */ }"
    },
    {
      "file": "src/lib/analyticsProfiles.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsProfiles] Failed to load profiles",
      "line": 40,
      "column": 18,
      "context": "lyzedAt) : null, }); } } } catch (error) { logger.error('[analyticsProfiles] Failed to load profiles', { error }); } return map; }"
    },
    {
      "file": "src/lib/analyticsProfiles.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsProfiles] Failed to save profiles",
      "line": 62,
      "column": 18,
      "context": "ticsProfiles, JSON.stringify(data)); } } catch (error) { logger.error('[analyticsProfiles] Failed to save profiles', { error }); } } export functio"
    },
    {
      "file": "src/lib/analyticsProfiles.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[analyticsProfiles] Cleared all profiles",
      "line": 104,
      "column": 17,
      "context": "localStorage.removeItem(STORAGE_KEYS.analyticsProfiles); } logger.info('[analyticsProfiles] Cleared all profiles', { count }); } catch (error) {"
    },
    {
      "file": "src/lib/analyticsProfiles.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[analyticsProfiles] Failed to clear all profiles",
      "line": 106,
      "column": 18,
      "context": "ofiles] Cleared all profiles', { count }); } catch (error) { logger.error('[analyticsProfiles] Failed to clear all profiles', { error }); } return cou"
    },
    {
      "file": "src/lib/analyticsProfiles.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[analyticsProfiles] Cleared student profile",
      "line": 120,
      "column": 17,
      "context": "ofile>).delete(studentId); if (existed) { saveProfiles(); logger.info('[analyticsProfiles] Cleared student profile', { studentId }); } return exis"
    },
    {
      "file": "src/lib/analyticsProfiles.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[analyticsProfiles] Reset profiles to default state",
      "line": 132,
      "column": 15,
      "context": "Map<string, StudentAnalyticsProfile>).clear(); saveProfiles(); logger.info('[analyticsProfiles] Reset profiles to default state'); } /** * Return simple"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Manager-based analytics failed; continuing with local processing",
      "line": 55,
      "column": 24,
      "context": "alyticsResults); return; } catch (e) { logger.error('Fallback: Manager-based analytics failed; continuing with local processing', e)"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error analyzing emotion patterns",
      "line": 78,
      "column": 24,
      "context": "patterns.push(...emotionPatterns); } catch (e) { logger.error('Fallback: Error analyzing emotion patterns', e); } } await"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error analyzing sensory patterns",
      "line": 89,
      "column": 24,
      "context": "patterns.push(...sensoryPatterns); } catch (e) { logger.error('Fallback: Error analyzing sensory patterns', e); } } await"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error analyzing correlations",
      "line": 101,
      "column": 24,
      "context": "populate environmentalCorrelations } catch (e) { logger.error('Fallback: Error analyzing correlations', e); } } await new"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error generating predictive insights",
      "line": 118,
      "column": 24,
      "context": "tiveInsights = predictiveInsights; } catch (e) { logger.error('Fallback: Error generating predictive insights', e); } await n"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback: Error detecting anomalies",
      "line": 131,
      "column": 24,
      "context": "results.anomalies = anomalies; } catch (e) { logger.error('Fallback: Error detecting anomalies', e); } } // Generate"
    },
    {
      "file": "src/lib/analyticsWorkerFallback.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Fallback analytics failed",
      "line": 148,
      "column": 20,
      "context": "); } resolve(results); } catch (error) { logger.error('Fallback analytics failed', error); reject(error instanceof Error ? error"
    },
    {
      "file": "src/lib/apiConnectivityValidator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[apiConnectivityValidator] Connectivity OK for model",
      "line": 101,
      "column": 17,
      "context": "urn the single word OK.', undefined, { suppressToasts: true }); logger.info('[apiConnectivityValidator] Connectivity OK for model'); cache[cacheId] = {"
    },
    {
      "file": "src/lib/apiConnectivityValidator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[apiConnectivityValidator] Connectivity failed",
      "line": 136,
      "column": 20,
      "context": "nippet = msg.length > 120 ? msg.slice(0, 120) + '...' : msg; logger.error('[apiConnectivityValidator] Connectivity failed', { errors, name, snippet });"
    },
    {
      "file": "src/lib/cacheManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[cacheManager] Starting global cache clear",
      "line": 53,
      "column": 19,
      "context": "ync clearAllCaches(): Promise<CacheManagerResult> { try { logger.info('[cacheManager] Starting global cache clear'); this.lastClearAll = Date.no"
    },
    {
      "file": "src/lib/cacheManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[cacheManager] Global cache clear completed",
      "line": 86,
      "column": 19,
      "context": "await analyticsManager.clearAllAnalyticsCaches(false); logger.info('[cacheManager] Global cache clear completed', { managerResult,"
    },
    {
      "file": "src/lib/cacheManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[cacheManager] Failed to clear all caches",
      "line": 100,
      "column": 20,
      "context": "managerResult } }; } catch (error) { logger.error('[cacheManager] Failed to clear all caches', error as Error); return {"
    },
    {
      "file": "src/lib/cacheManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[cacheManager] Starting student cache clear",
      "line": 121,
      "column": 19,
      "context": "sage: 'Invalid student ID provided' }; } try { logger.info('[cacheManager] Starting student cache clear', { studentId }); this.lastCl"
    },
    {
      "file": "src/lib/cacheManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[cacheManager] Student cache clear completed",
      "line": 156,
      "column": 19,
      "context": "await analyticsManager.clearStudentCaches(studentId); logger.info('[cacheManager] Student cache clear completed', { studentId, man"
    },
    {
      "file": "src/lib/cacheManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[cacheManager] Failed to clear student caches",
      "line": 172,
      "column": 20,
      "context": "managerResult } }; } catch (error) { logger.error('[cacheManager] Failed to clear student caches', error as Error); return {"
    },
    {
      "file": "src/lib/cacheManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[cacheManager] Clearing caches by type",
      "line": 188,
      "column": 17,
      "context": "rCachesByType(cacheType: string): Promise<CacheManagerResult> { logger.info('[cacheManager] Clearing caches by type', { cacheType }); // For now, r"
    },
    {
      "file": "src/lib/chartUtils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Invalid chart data row:",
      "line": 125,
      "column": 20,
      "context": "turn ChartEmotionRowSchema.parse(row); } catch (error) { logger.error('Invalid chart data row:', row, error); // Return a safe default if valida"
    },
    {
      "file": "src/lib/dataStorage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to parse student data from localStorage",
      "line": 363,
      "column": 20,
      "context": "}; } return null; } catch (error) { logger.error('Failed to parse student data from localStorage', error); return null;"
    },
    {
      "file": "src/lib/dataStorage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to parse tracking entries from localStorage",
      "line": 432,
      "column": 9,
      "context": "e() - a.timestamp.getTime()); } catch (error) { logger.error( 'Failed to parse tracking entries from localStorage', error );"
    },
    {
      "file": "src/lib/dataStorage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error deleting student:",
      "line": 778,
      "column": 20,
      "context": "ear(studentId); } catch { /* noop */ } } catch (error) { logger.error('Error deleting student:', error); throw error; } } } // Export sin"
    },
    {
      "file": "src/lib/diagnostics.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[DIAGNOSTIC] Worker Timeout!",
      "line": 160,
      "column": 18,
      "context": "timeout: number) { if (!this.diagnosticMode) return; logger.error('[DIAGNOSTIC] Worker Timeout!', { workerName, timeout, timesta"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to initialize ML models:",
      "line": 93,
      "column": 20,
      "context": "this.mlModelsInitialized = true; } catch (error) { logger.error('Failed to initialize ML models:', error); this.mlModelsInitialized = fals"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "ML emotion prediction failed:",
      "line": 183,
      "column": 22,
      "context": "}); } } } catch (error) { logger.error('ML emotion prediction failed:', error); } } // Statistical senso"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "ML sensory prediction failed:",
      "line": 248,
      "column": 22,
      "context": "}); } } } catch (error) { logger.error('ML sensory prediction failed:', error); } } // Goal achievement"
    },
    {
      "file": "src/lib/enhancedPatternAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Baseline clustering failed:",
      "line": 927,
      "column": 20,
      "context": "ingEntries, 3); return clusters; } catch (error) { logger.error('Baseline clustering failed:', error); return []; } } } export cons"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error in custom error handler",
      "line": 94,
      "column": 22,
      "context": "onError(appError); } catch (callbackError) { logger.error('Error in custom error handler', callbackError); } } // Process e"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Critical error occurred",
      "line": 166,
      "column": 22,
      "context": "rorType.DATA_CORRUPTED: case ErrorType.UNAUTHORIZED: logger.error('Critical error occurred', logData); break; case ErrorType.NETWORK"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Application error",
      "line": 173,
      "column": 22,
      "context": "k error occurred', logData); break; default: logger.error('Application error', logData); } } /** * Show user-friendly error to"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Retry handler failed",
      "line": 199,
      "column": 30,
      "context": "or); } } catch (e) { logger.error('Retry handler failed', e as Error); } }, }"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Issue resolved",
      "line": 245,
      "column": 23,
      "context": "ies) { try { await strategy.recover(error); toast.success('Issue resolved', { description: 'The application has recovered from t"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Issue resolved",
      "line": 245,
      "column": 23,
      "context": "ies) { try { await strategy.recover(error); toast.success('Issue resolved', { description: 'The application has recovered from t"
    },
    {
      "file": "src/lib/errorHandler.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Recovery strategy failed",
      "line": 250,
      "column": 22,
      "context": "}); return true; } catch (recoveryError) { logger.error('Recovery strategy failed', { strategy, originalError: error"
    },
    {
      "file": "src/lib/inlineWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to create inline worker:",
      "line": 47,
      "column": 18,
      "context": "if (workerUrl) { URL.revokeObjectURL(workerUrl); } logger.error('Failed to create inline worker:', error as Error); return null; } }"
    },
    {
      "file": "src/lib/mockData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "seedMinimalDemoData: seeded enhanced demo data",
      "line": 268,
      "column": 17,
      "context": "alEntries = dataStorage.getEntriesForStudent(studentId).length; logger.info(\"seedMinimalDemoData: seeded enhanced demo data\", { studentId, studentName: stud"
    },
    {
      "file": "src/lib/mockData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "seedMinimalDemoData: failed to seed demo data",
      "line": 270,
      "column": 18,
      "context": "udent.name, entriesCount: totalEntries }); } catch (error) { logger.error(\"seedMinimalDemoData: failed to seed demo data\", { studentId, error }); thro"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Generated invalid emotion entry:",
      "line": 246,
      "column": 18,
      "context": "alidateEmotionEntry(entry); if (!validationResult.isValid) { logger.error('Generated invalid emotion entry:', entry, validationResult.errors); throw n"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Generated invalid sensory entry:",
      "line": 278,
      "column": 18,
      "context": "alidateSensoryEntry(entry); if (!validationResult.isValid) { logger.error('Generated invalid sensory entry:', entry, validationResult.errors); throw n"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Generated invalid tracking entry for scenario",
      "line": 629,
      "column": 22,
      "context": "kingEntry(entry); if (!trackingValidation.isValid) { logger.error('Generated invalid tracking entry for scenario', { scenario, entry, errors: trac"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load scenario data",
      "line": 636,
      "column": 18,
      "context": "aStorage.saveTrackingEntry(entry); } } } catch (error) { logger.error('Failed to load scenario data', error); throw new Error('Failed to initializ"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Generated invalid tracking entry during bulk mock load",
      "line": 662,
      "column": 22,
      "context": "kingEntry(entry); if (!trackingValidation.isValid) { logger.error('Generated invalid tracking entry during bulk mock load', { entry, errors: track"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load mock data:",
      "line": 669,
      "column": 18,
      "context": "torage.saveTrackingEntry(entry); } }); } catch (error) { logger.error('Failed to load mock data:', error); throw new Error('Failed to initialize m"
    },
    {
      "file": "src/lib/mockDataGenerator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear mock data:",
      "line": 690,
      "column": 18,
      "context": "=> dataStorage.saveTrackingEntry(entry)); } catch (error) { logger.error('Failed to clear mock data:', error); throw new Error('Failed to clear mock"
    },
    {
      "file": "src/lib/modelEvaluation.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[modelEvaluation] onupgradeneeded failed",
      "line": 164,
      "column": 24,
      "context": "{ keyPath: 'id' }); } } catch (err) { logger.error('[modelEvaluation] onupgradeneeded failed', err); } }; requ"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Created new session",
      "line": 138,
      "column": 17,
      "context": "sessionId, sessionData); this.persistSession(sessionData); logger.info('[SessionManager] Created new session', { sessionId, studentId }); return se"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Completed session",
      "line": 260,
      "column": 17,
      "context": "ession(sessionId); // Analytics handled by unified helper logger.info('[SessionManager] Completed session', { sessionId, entryId: tracki"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Abandoned session",
      "line": 283,
      "column": 17,
      "context": ".delete(sessionId); this.clearPersistedSession(sessionId); logger.info('[SessionManager] Abandoned session', { sessionId }); } /** * Pause a se"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Paused session",
      "line": 296,
      "column": 17,
      "context": ".metadata.status = 'paused'; this.persistSession(session); logger.info('[SessionManager] Paused session', { sessionId }); return true; } /**"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Resumed session",
      "line": 310,
      "column": 17,
      "context": ".metadata.status = 'active'; this.persistSession(session); logger.info('[SessionManager] Resumed session', { sessionId }); return true; } /**"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SessionManager] Failed to recover session",
      "line": 348,
      "column": 22,
      "context": "veItem(key); } } } catch (error) { logger.error('[SessionManager] Failed to recover session', { key, error }); localStor"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Recovered sessions",
      "line": 355,
      "column": 19,
      "context": "if (recovered.length > 0) { this.saveSessionHistory(); logger.info('[SessionManager] Recovered sessions', { count: recovered.length }); }"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SessionManager] Failed to persist session",
      "line": 456,
      "column": 20,
      "context": "setItem(key, JSON.stringify(session)); } catch (error) { logger.error('[SessionManager] Failed to persist session', { sessionId: session.sess"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SessionManager] Failed to load session history",
      "line": 485,
      "column": 20,
      "context": "ime) : undefined, })); } } catch (error) { logger.error('[SessionManager] Failed to load session history', { error }); this.sessio"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[SessionManager] Failed to save session history",
      "line": 497,
      "column": 20,
      "context": "JSON.stringify(this.sessionHistory)); } catch (error) { logger.error('[SessionManager] Failed to save session history', { error }); } } /**"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Updated validation rules",
      "line": 525,
      "column": 17,
      "context": "this.validationRules = { ...this.validationRules, ...rules }; logger.info('[SessionManager] Updated validation rules', { rules }); } /** * Update"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Updated quality threshold",
      "line": 533,
      "column": 17,
      "context": "dationQualityThreshold = Math.max(0, Math.min(100, threshold)); logger.info('[SessionManager] Updated quality threshold', { threshold: this.validationQualit"
    },
    {
      "file": "src/lib/sessionManager.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[SessionManager] Cleared all sessions",
      "line": 557,
      "column": 17,
      "context": "); keys.forEach(key => localStorage.removeItem(key)); logger.info('[SessionManager] Cleared all sessions'); } } // Export singleton instance ex"
    },
    {
      "file": "src/lib/startupValidation.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[startupValidation] Model connectivity test failed",
      "line": 117,
      "column": 22,
      "context": "=> { if (!conn.isValid && conn.errors.length > 0) { logger.error('[startupValidation] Model connectivity test failed', { errors: conn.errors });"
    },
    {
      "file": "src/lib/startupValidation.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[startupValidation] Model connectivity OK",
      "line": 121,
      "column": 21,
      "context": "ity warnings', { warnings: conn.warnings }); } else { logger.info('[startupValidation] Model connectivity OK'); } }).catch((e) => {"
    },
    {
      "file": "src/lib/storageUtils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error clearing old data:",
      "line": 55,
      "column": 20,
      "context": "ON.stringify(filteredAlerts)); } } catch (error) { logger.error('Error clearing old data:', error); } }, /** * Compress data before"
    },
    {
      "file": "src/lib/universalAnalyticsInitializer.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error initializing universal analytics:",
      "line": 45,
      "column": 20,
      "context": "this.initialized = true; } catch (error) { logger.error('Error initializing universal analytics:', error); } } /** * Ensure"
    },
    {
      "file": "src/lib/universalAnalyticsInitializer.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Auto-initialization failed:",
      "line": 101,
      "column": 92,
      "context": "alyticsInitializer.initializeUniversalAnalytics().catch((error) => logger.error('Auto-initialization failed:', error));"
    },
    {
      "file": "src/lib/utils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "downloadBlob called in a non-browser environment",
      "line": 29,
      "column": 18,
      "context": "f window === 'undefined' || typeof document === 'undefined') { logger.error('downloadBlob called in a non-browser environment'); return; } const sa"
    },
    {
      "file": "src/lib/utils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "downloadBlob failed",
      "line": 47,
      "column": 18,
      "context": "lick(); document.body.removeChild(link); } catch (err) { logger.error('downloadBlob failed', err); } finally { if (url) { // Defer revocat"
    },
    {
      "file": "src/lib/validation/dataLeakage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[DataLeakageDetector] Potential leakage risk",
      "line": 166,
      "column": 21,
      "context": ", payload); } else if (issue.severity === 'medium') { logger.info('[DataLeakageDetector] Potential leakage risk', payload); } else {"
    },
    {
      "file": "src/lib/validation/dataLeakage.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[DataLeakageDetector] Strict mode abort due to leakage",
      "line": 176,
      "column": 20,
      "context": "h-risk data leakage detected: \\n- ${summary.join('\\n- ')}`); logger.error('[DataLeakageDetector] Strict mode abort due to leakage', { summary }); th"
    },
    {
      "file": "src/lib/tracking/saveTrackingEntry.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[saveTrackingEntry] Failed to save entry",
      "line": 37,
      "column": 20,
      "context": "= error instanceof Error ? error.message : 'Unknown error'; logger.error('[saveTrackingEntry] Failed to save entry', { error: message, entryId: entry?.id"
    },
    {
      "file": "src/lib/tracking/saveTrackingEntry.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[saveTrackingEntry] Unexpected failure",
      "line": 66,
      "column": 18,
      "context": "n success return { success: true, entry }; } catch (e) { logger.error('[saveTrackingEntry] Unexpected failure', e as Error); return { success: fal"
    },
    {
      "file": "src/lib/insights/unified.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[insights/unified] computeInsights: invalid inputs",
      "line": 46,
      "column": 18,
      "context": "ay(inputs.emotions) || !Array.isArray(inputs.sensoryInputs)) { logger.error('[insights/unified] computeInsights: invalid inputs', { inputsType: typeof input"
    },
    {
      "file": "src/lib/insights/unified.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[insights/unified] computeInsights failed",
      "line": 108,
      "column": 18,
      "context": "erventions: [], } as AnalyticsResults; } catch (error) { logger.error('[insights/unified] computeInsights failed', { error: error instanceof Error ? {"
    },
    {
      "file": "src/lib/analysis/heuristicAnalysisEngine.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[HeuristicAnalysisEngine] analyzeStudent: invalid studentId",
      "line": 129,
      "column": 20,
      "context": "early if (!studentId || typeof studentId !== 'string') { logger.error('[HeuristicAnalysisEngine] analyzeStudent: invalid studentId', { studentId });"
    },
    {
      "file": "src/lib/analysis/heuristicAnalysisEngine.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[HeuristicAnalysisEngine] analyzeStudent failed",
      "line": 189,
      "column": 20,
      "context": "), ai: aiMeta } as AnalyticsResultsAI; } catch (error) { logger.error('[HeuristicAnalysisEngine] analyzeStudent failed', { error: error instanceof Err"
    },
    {
      "file": "src/lib/analysis/llmAnalysisEngine.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[LLMAnalysisEngine] analyzeStudent: invalid studentId",
      "line": 175,
      "column": 20,
      "context": "AI> { if (!studentId || typeof studentId !== 'string') { logger.error('[LLMAnalysisEngine] analyzeStudent: invalid studentId', { studentId }); r"
    },
    {
      "file": "src/lib/analysis/llmAnalysisEngine.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[LLMAnalysisEngine] analyzeStudent failed",
      "line": 340,
      "column": 20,
      "context": "MEMORY_TTL_MS }); return merged; } catch (error) { logger.error('[LLMAnalysisEngine] analyzeStudent failed', { error: error instanceof Error ? {"
    },
    {
      "file": "src/lib/analysis/llmUtils.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[LLM] validateOrRepairAiReport failed",
      "line": 102,
      "column": 18,
      "context": "report: parsed2, repaired: true, caveats }; } catch (err) { logger.error('[LLM] validateOrRepairAiReport failed', { error: err instanceof Error ? { messa"
    },
    {
      "file": "src/lib/analysis/mapReduce.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[mapReduce] reduceSummariesToFinalReport failed",
      "line": 169,
      "column": 18,
      "context": "sResults; return { ok: true, report }; } catch (error) { logger.error('[mapReduce] reduceSummariesToFinalReport failed', { error: error instanceof Err"
    },
    {
      "file": "src/lib/analysis/mapReduce.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[mapReduce] analyzeLargePeriod error",
      "line": 205,
      "column": 18,
      "context": ".ok) return null; return final.report; } catch (error) { logger.error('[mapReduce] analyzeLargePeriod error', { error: error instanceof Error ? { mess"
    },
    {
      "file": "src/lib/ai/openrouterClient.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[OpenRouter] Request start",
      "line": 171,
      "column": 21,
      "context": "Pre-request logging (sanitized) if (attempt === 0) { logger.info('[OpenRouter] Request start', sanitizeRequestForLog({ url: endpoint, method: 'PO"
    },
    {
      "file": "src/lib/ai/openrouterClient.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[OpenRouter] Request success",
      "line": 318,
      "column": 19,
      "context": "tEstimate(response.model || merged.config.modelName, usage); logger.info('[OpenRouter] Request success', { model: response.model, usage,"
    },
    {
      "file": "src/lib/ai/openrouterClient.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[OpenRouter] JSON-mode success",
      "line": 454,
      "column": 19,
      "context": "tEstimate(response.model || merged.config.modelName, usage); logger.info('[OpenRouter] JSON-mode success', { model: response.model, usage"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Worker runtime error, switching to fallback",
      "line": 95,
      "column": 20,
      "context": "} }; worker.onerror = (error: ErrorEvent) => { logger.error('[useAnalyticsWorker] Worker runtime error, switching to fallback', error);"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[useAnalyticsWorker] Analytics worker initialized successfully",
      "line": 132,
      "column": 17,
      "context": "singleton.ready = false; // will flip true on first onmessage logger.info('[useAnalyticsWorker] Analytics worker initialized successfully'); return wo"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Failed to initialize worker",
      "line": 135,
      "column": 18,
      "context": "ialized successfully'); return worker; } catch (error) { logger.error('[useAnalyticsWorker] Failed to initialize worker', error as Error); singlet"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Failed handling worker message",
      "line": 399,
      "column": 26,
      "context": "break; } } catch (e) { logger.error('[useAnalyticsWorker] Failed handling worker message', e as Error); }"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] messageerror from analytics worker",
      "line": 404,
      "column": 24,
      "context": "const onMessageError = (evt: MessageEvent) => { logger.error('[useAnalyticsWorker] messageerror from analytics worker', evt); };"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] AI analysis path failed",
      "line": 524,
      "column": 22,
      "context": "s as AnalyticsResultsAI, cacheTags); } catch (err) { logger.error('[useAnalyticsWorker] AI analysis path failed', err); setError('AI analy"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Fallback after AI failure also failed",
      "line": 531,
      "column": 24,
      "context": "ResultsAI, cacheTags); } catch (fallbackError) { logger.error('[useAnalyticsWorker] Fallback after AI failure also failed', fallbackError);"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Fallback failed",
      "line": 565,
      "column": 22,
      "context": "eTagsRef.current.delete(cacheKey); } catch (error) { logger.error('[useAnalyticsWorker] Fallback failed', error); setError('Analytics proc"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] watchdog timeout: worker did not respond, attempting fallback",
      "line": 600,
      "column": 22,
      "context": "watchdogRef.current = setTimeout(async () => { try { logger.error('[useAnalyticsWorker] watchdog timeout: worker did not respond, attempting fallb"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Fallback failed after watchdog timeout",
      "line": 620,
      "column": 22,
      "context": "ed using fallback mode.'); } catch (fallbackError) { logger.error('[useAnalyticsWorker] Fallback failed after watchdog timeout', fallbackError);"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[WORKER_MESSAGE] Failed to post message to worker, falling back to sync",
      "line": 699,
      "column": 20,
      "context": "'Worker reference missing'); } } catch (postErr) { logger.error('[WORKER_MESSAGE] Failed to post message to worker, falling back to sync', { err"
    },
    {
      "file": "src/hooks/useAnalyticsWorker.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[useAnalyticsWorker] Fallback processing failed after worker post error",
      "line": 713,
      "column": 22,
      "context": "); setError(null); } catch (fallbackError) { logger.error('[useAnalyticsWorker] Fallback processing failed after worker post error', fallb"
    },
    {
      "file": "src/hooks/useDashboardData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Dashboard: Error loading students",
      "line": 35,
      "column": 20,
      "context": "e.getStudents(); setStudents(s); } catch (error) { logger.error('Dashboard: Error loading students', { error }); setStudents([]); } fi"
    },
    {
      "file": "src/hooks/useDashboardData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Dashboard: Error calculating statistics",
      "line": 114,
      "column": 20,
      "context": "end, entries: entriesTrend }, }; } catch (error) { logger.error('Dashboard: Error calculating statistics', { error }); return { todayEntri"
    },
    {
      "file": "src/hooks/useDataAnalysis.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Pattern analysis failed in useDataAnalysis hook",
      "line": 57,
      "column": 22,
      "context": "rrelationMatrix(matrix); } } catch (error) { logger.error('Pattern analysis failed in useDataAnalysis hook', { error }); } finally {"
    },
    {
      "file": "src/hooks/useFilteredData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "useFilteredData failed",
      "line": 124,
      "column": 20,
      "context": "ackingEntries: parsedTracking }; } catch (error) { logger.error(\"useFilteredData failed\", { error }); return { emotions: [], sensoryInputs"
    },
    {
      "file": "src/hooks/usePerformanceMonitor.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[Performance Report]",
      "line": 373,
      "column": 17,
      "context": "logReport = useCallback(() => { const report = getReport(); logger.info('[Performance Report]', report); }, [getReport]); return { trackCompone"
    },
    {
      "file": "src/hooks/usePinnedAlerts.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "usePinnedAlerts: failed to read from localStorage",
      "line": 24,
      "column": 18,
      "context": "r = error instanceof Error ? error : new Error(String(error)); logger.error('usePinnedAlerts: failed to read from localStorage', err); return []; } }"
    },
    {
      "file": "src/hooks/usePinnedAlerts.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "usePinnedAlerts: failed to write to localStorage",
      "line": 34,
      "column": 18,
      "context": "r = error instanceof Error ? error : new Error(String(error)); logger.error('usePinnedAlerts: failed to write to localStorage', err); } } export function"
    },
    {
      "file": "src/hooks/useRealtimeData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Real-time data connection would be established here",
      "line": 292,
      "column": 21,
      "context": "simulateDataStream, options.updateInterval); } else { logger.info('Real-time data connection would be established here'); } //"
    },
    {
      "file": "src/hooks/useStudentData.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load student data:",
      "line": 79,
      "column": 20,
      "context": "catch (e) { setError('Failed to load student data.'); logger.error('Failed to load student data:', e); } finally { setIsLoading(false);"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: warning()",
      "value": "Session timed out due to inactivity",
      "line": 203,
      "column": 23,
      "context": "ntax sessionTimeoutRef.current = setTimeout(() => { toast.warning('Session timed out due to inactivity'); endSession(true); }, newCo"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.warning()",
      "value": "Session timed out due to inactivity",
      "line": 203,
      "column": 23,
      "context": "ntax sessionTimeoutRef.current = setTimeout(() => { toast.warning('Session timed out due to inactivity'); endSession(true); }, newCo"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[TrackingContext] Started new session",
      "line": 208,
      "column": 17,
      "context": "endSession(true); }, newConfig.sessionTimeout); } logger.info('[TrackingContext] Started new session', { sessionId, studentId }); }, [curren"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[TrackingContext] Ended session",
      "line": 235,
      "column": 17,
      "context": "on_${currentSession.studentId}`); setCurrentSession(null); logger.info('[TrackingContext] Ended session', { sessionId: currentSession.id }); }, [curr"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[TrackingContext] Paused session",
      "line": 256,
      "column": 17,
      "context": "imerRef.current); autoSaveTimerRef.current = null; } logger.info('[TrackingContext] Paused session', { sessionId: currentSession.id }); }, [cur"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[TrackingContext] Resumed session",
      "line": 281,
      "column": 17,
      "context": "n(); } }, sessionConfig.autoSaveInterval); } logger.info('[TrackingContext] Resumed session', { sessionId: currentSession.id }); }, [cu"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: warning()",
      "value": "Session timed out due to inactivity",
      "line": 312,
      "column": 23,
      "context": "ntax sessionTimeoutRef.current = setTimeout(() => { toast.warning('Session timed out due to inactivity'); endSession(true); }, sessi"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.warning()",
      "value": "Session timed out due to inactivity",
      "line": 312,
      "column": 23,
      "context": "ntax sessionTimeoutRef.current = setTimeout(() => { toast.warning('Session timed out due to inactivity'); endSession(true); }, sessi"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: warning()",
      "value": "Session timed out due to inactivity",
      "line": 364,
      "column": 23,
      "context": "ntax sessionTimeoutRef.current = setTimeout(() => { toast.warning('Session timed out due to inactivity'); endSession(true); }, sessi"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.warning()",
      "value": "Session timed out due to inactivity",
      "line": 364,
      "column": 23,
      "context": "ntax sessionTimeoutRef.current = setTimeout(() => { toast.warning('Session timed out due to inactivity'); endSession(true); }, sessi"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Session saved successfully",
      "line": 491,
      "column": 21,
      "context": "// Analytics is triggered by unified helper; no-op here toast.success('Session saved successfully'); logger.info('[TrackingContext] Session save"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Session saved successfully",
      "line": 491,
      "column": 21,
      "context": "// Analytics is triggered by unified helper; no-op here toast.success('Session saved successfully'); logger.info('[TrackingContext] Session save"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[TrackingContext] Session saved",
      "line": 492,
      "column": 19,
      "context": "o-op here toast.success('Session saved successfully'); logger.info('[TrackingContext] Session saved', { sessionId: currentSession.id,"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[TrackingContext] Failed to save session",
      "line": 499,
      "column": 20,
      "context": "}); return trackingEntry; } catch (error) { logger.error('[TrackingContext] Failed to save session', { error }); toast.error('Faile"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save session",
      "line": 500,
      "column": 19,
      "context": "error('[TrackingContext] Failed to save session', { error }); toast.error('Failed to save session'); return null; } }, [currentSession, valida"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to save session",
      "line": 500,
      "column": 19,
      "context": "error('[TrackingContext] Failed to save session', { error }); toast.error('Failed to save session'); return null; } }, [currentSession, valida"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Session discarded",
      "line": 543,
      "column": 16,
      "context": "ion_${currentSession.studentId}`); setCurrentSession(null); toast.info('Session discarded'); logger.info('[TrackingContext] Session discarded', { s"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.info()",
      "value": "Session discarded",
      "line": 543,
      "column": 16,
      "context": "ion_${currentSession.studentId}`); setCurrentSession(null); toast.info('Session discarded'); logger.info('[TrackingContext] Session discarded', { s"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[TrackingContext] Session discarded",
      "line": 544,
      "column": 17,
      "context": "setCurrentSession(null); toast.info('Session discarded'); logger.info('[TrackingContext] Session discarded', { sessionId: currentSession.id }); }, ["
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Session not found",
      "line": 553,
      "column": 19,
      "context": "= sessions.find(s => s.id === sessionId); if (!session) { toast.error('Session not found'); return; } setCurrentSession(session); t"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Session not found",
      "line": 553,
      "column": 19,
      "context": "= sessions.find(s => s.id === sessionId); if (!session) { toast.error('Session not found'); return; } setCurrentSession(session); t"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Session recovered",
      "line": 558,
      "column": 19,
      "context": "found'); return; } setCurrentSession(session); toast.success('Session recovered'); logger.info('[TrackingContext] Session recovered', { s"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Session recovered",
      "line": 558,
      "column": 19,
      "context": "found'); return; } setCurrentSession(session); toast.success('Session recovered'); logger.info('[TrackingContext] Session recovered', { s"
    },
    {
      "file": "src/contexts/TrackingContext.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[TrackingContext] Session recovered",
      "line": 559,
      "column": 17,
      "context": "urrentSession(session); toast.success('Session recovered'); logger.info('[TrackingContext] Session recovered', { sessionId }); }, [sessions]); /**"
    },
    {
      "file": "src/config/validators/analytics.validator.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "analytics.config validation failed; using fallback defaults",
      "line": 37,
      "column": 18,
      "context": "sult.error); // Log once with normalized diagnostics try { logger.error('analytics.config validation failed; using fallback defaults', { errors,"
    },
    {
      "file": "src/config/loaders/analytics.loader.ts",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "analytics.loader hot-reloaded: cache invalidated",
      "line": 209,
      "column": 17,
      "context": "t(() => { cachedConfig = null; cacheStamp = Date.now(); logger.info('analytics.loader hot-reloaded: cache invalidated'); }); } // Optional: consu"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Select triggers to include",
      "line": 395,
      "column": 47,
      "context": "}} > <SelectTrigger aria-label=\"Select triggers to include\"> <SelectValue placeholder=\"Se"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Select triggers to include",
      "line": 396,
      "column": 48,
      "context": "el=\"Select triggers to include\"> <SelectValue placeholder=\"Select triggers to include\" /> </SelectTrigger>"
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Filter name",
      "line": 697,
      "column": 30,
      "context": "eholder={String(tCommon('filterNamePlaceholder'))} aria-label=\"Filter name\" value={filterName} onChange={("
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Delete saved filter",
      "line": 745,
      "column": 42,
      "context": "variant=\"ghost\" aria-label=\"Delete saved filter\" title=\"Delete saved filter\""
    },
    {
      "file": "src/components/AdvancedFilterPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Delete saved filter",
      "line": 746,
      "column": 37,
      "context": "aria-label=\"Delete saved filter\" title=\"Delete saved filter\" onClick={() => onDeleteFilte"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to resolve alert",
      "line": 81,
      "column": 20,
      "context": "tAnalytics('alerts.resolveSuccess'))); } catch (error) { logger.error('Failed to resolve alert', error); toast.error(String(tAnalytics('alerts.r"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 215,
      "column": 68,
      "context": "tart gap-2\"> <span className=\"text-primary\">•</span> <span>{rec}</span>"
    },
    {
      "file": "src/components/AlertManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 265,
      "column": 54,
      "context": "=\"flex items-start gap-2\"> <span className=\"text-primary\">•</span> <span>{recommendation}</span>"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error coercing timestamp:",
      "line": 152,
      "column": 22,
      "context": "} return new Date(); } catch (error) { logger.error('Error coercing timestamp:', v, error); return new Date(); } }"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error normalizing filteredData:",
      "line": 163,
      "column": 20,
      "context": "amp: coerce(s.timestamp) })), }; } catch (error) { logger.error('Error normalizing filteredData:', error); return { entries: [], emotions:"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[AnalyticsDashboard] Demo seed failed",
      "line": 194,
      "column": 20,
      "context": "ta, { useAI, student: analyticsStudent }); } catch (e) { logger.error('[AnalyticsDashboard] Demo seed failed', { error: e }); toast.error(String"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[AnalyticsDashboard] Analytics error surfaced to user",
      "line": 284,
      "column": 78,
      "context": "n; doOnce('analytics_ui_error_' + String(error), 60_000, () => logger.error('[AnalyticsDashboard] Analytics error surfaced to user', { error })); }, [erro"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to collect chart exports",
      "line": 364,
      "column": 26,
      "context": "turn usableExports; } catch (collectError) { logger.error('Failed to collect chart exports', collectError); toast.error(String"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export failed:",
      "line": 401,
      "column": 20,
      "context": "uccessMessageKey[format]))); }); } catch (error) { logger.error('Export failed:', error); toast.error(String(tAnalytics('export.failure'))"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "analytics-dashboard-title",
      "line": 442,
      "column": 46,
      "context": "tics('skipToContent'))} </a> <section role=\"region\" aria-labelledby=\"analytics-dashboard-title\" className=\"space-y-6\"> {error && !isAnalyzing"
    },
    {
      "file": "src/components/AnalyticsDashboard.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error comparing timestamps in AnalyticsDashboard memo:",
      "line": 808,
      "column": 23,
      "context": "return prevTime === nextTime; } catch (error) { logger.error('Error comparing timestamps in AnalyticsDashboard memo:', error); retur"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load ML model status",
      "line": 75,
      "column": 20,
      "context": "tatus(); setModelStatus(status); } catch (error) { logger.error('Failed to load ML model status', { error }); toast.error(\"Failed to load"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load ML models: Could not retrieve model status. Some features may be unavailable.",
      "line": 76,
      "column": 19,
      "context": "logger.error('Failed to load ML model status', { error }); toast.error(\"Failed to load ML models: Could not retrieve model status. Some features may be"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to load ML models: Could not retrieve model status. Some features may be unavailable.",
      "line": 76,
      "column": 19,
      "context": "logger.error('Failed to load ML model status', { error }); toast.error(\"Failed to load ML models: Could not retrieve model status. Some features may be"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Analytics configuration has been updated",
      "line": 113,
      "column": 19,
      "context": "Config.updateConfig(config); setHasUnsavedChanges(false); toast.success(\"Analytics configuration has been updated\"); }; const handleReset = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Analytics configuration has been updated",
      "line": 113,
      "column": 19,
      "context": "Config.updateConfig(config); setHasUnsavedChanges(false); toast.success(\"Analytics configuration has been updated\"); }; const handleReset = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Settings have been reset to defaults",
      "line": 120,
      "column": 19,
      "context": "tSelectedPreset('balanced'); setHasUnsavedChanges(false); toast.success(\"Settings have been reset to defaults\"); }; const handleExport = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Settings have been reset to defaults",
      "line": 120,
      "column": 19,
      "context": "tSelectedPreset('balanced'); setHasUnsavedChanges(false); toast.success(\"Settings have been reset to defaults\"); }; const handleExport = () => {"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Configuration saved to analytics-config.json",
      "line": 135,
      "column": 19,
      "context": "ument.body.removeChild(a); URL.revokeObjectURL(url); toast.success(\"Configuration saved to analytics-config.json\"); }; const MAX_IMPORT_BYTES"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Configuration saved to analytics-config.json",
      "line": 135,
      "column": 19,
      "context": "ument.body.removeChild(a); URL.revokeObjectURL(url); toast.success(\"Configuration saved to analytics-config.json\"); }; const MAX_IMPORT_BYTES"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Configuration file exceeds the 5 MB limit",
      "line": 146,
      "column": 19,
      "context": "if (!file) return; if (file.size > MAX_IMPORT_BYTES) { toast.error('Configuration file exceeds the 5 MB limit'); event.target.value = '';"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Configuration file exceeds the 5 MB limit",
      "line": 146,
      "column": 19,
      "context": "if (!file) return; if (file.size > MAX_IMPORT_BYTES) { toast.error('Configuration file exceeds the 5 MB limit'); event.target.value = '';"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Only JSON configuration files are supported",
      "line": 152,
      "column": 19,
      "context": "if (file.type && !ALLOWED_IMPORT_TYPES.has(file.type)) { toast.error('Only JSON configuration files are supported'); event.target.value = '';"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Only JSON configuration files are supported",
      "line": 152,
      "column": 19,
      "context": "if (file.type && !ALLOWED_IMPORT_TYPES.has(file.type)) { toast.error('Only JSON configuration files are supported'); event.target.value = '';"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Successfully imported configuration",
      "line": 163,
      "column": 25,
      "context": "nfig(content)) { setHasUnsavedChanges(false); toast.success(\"Successfully imported configuration\"); } else { toast.error(\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Successfully imported configuration",
      "line": 163,
      "column": 25,
      "context": "nfig(content)) { setHasUnsavedChanges(false); toast.success(\"Successfully imported configuration\"); } else { toast.error(\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Invalid configuration file",
      "line": 165,
      "column": 23,
      "context": "(\"Successfully imported configuration\"); } else { toast.error(\"Invalid configuration file\"); } } catch (_error) { toast."
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Invalid configuration file",
      "line": 165,
      "column": 23,
      "context": "(\"Successfully imported configuration\"); } else { toast.error(\"Invalid configuration file\"); } } catch (_error) { toast."
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to read configuration file",
      "line": 168,
      "column": 21,
      "context": "id configuration file\"); } } catch (_error) { toast.error(\"Failed to read configuration file\"); } event.target.value = '';"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to read configuration file",
      "line": 168,
      "column": 21,
      "context": "id configuration file\"); } } catch (_error) { toast.error(\"Failed to read configuration file\"); } event.target.value = '';"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to delete model",
      "line": 209,
      "column": 19,
      "context": "${modelType} model has been removed`); } catch (_error) { toast.error(\"Failed to delete model\"); } finally { setIsDeletingModel(null); }"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to delete model",
      "line": 209,
      "column": 19,
      "context": "${modelType} model has been removed`); } catch (_error) { toast.error(\"Failed to delete model\"); } finally { setIsDeletingModel(null); }"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern Analysis Thresholds",
      "line": 331,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Pattern Analysis Thresholds</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Adjust minimum requirements and thresholds for pattern detection",
      "line": 333,
      "column": 21,
      "context": "Thresholds</CardTitle> <CardDescription> Adjust minimum requirements and thresholds for pattern detection"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Minimum Data Points",
      "line": 339,
      "column": 54,
      "context": "sName=\"flex items-center\"> <Label htmlFor=\"minDataPoints\">Minimum Data Points</Label> {renderTooltip(\"Minimum number"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlation Threshold",
      "line": 358,
      "column": 61,
      "context": "flex items-center\"> <Label htmlFor=\"correlationThreshold\">Correlation Threshold</Label> {renderTooltip(\"Minimum corr"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Concern Frequency Threshold",
      "line": 377,
      "column": 57,
      "context": "me=\"flex items-center\"> <Label htmlFor=\"concernFrequency\">Concern Frequency Threshold</Label> {renderTooltip(\"Percen"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enhanced Analysis Thresholds",
      "line": 398,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Enhanced Analysis Thresholds</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure advanced pattern detection and anomaly thresholds",
      "line": 400,
      "column": 21,
      "context": "Thresholds</CardTitle> <CardDescription> Configure advanced pattern detection and anomaly thresholds </"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly Detection Sensitivity",
      "line": 406,
      "column": 57,
      "context": "me=\"flex items-center\"> <Label htmlFor=\"anomalyThreshold\">Anomaly Detection Sensitivity</Label> {renderTooltip(\"Numb"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "σ",
      "line": 419,
      "column": 110,
      "context": "lassName=\"w-12 text-right\">{config.enhancedAnalysis.anomalyThreshold.toFixed(2)}σ</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Minimum Sample Size",
      "line": 425,
      "column": 54,
      "context": "sName=\"flex items-center\"> <Label htmlFor=\"minSampleSize\">Minimum Sample Size</Label> {renderTooltip(\"Minimum data p"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert Sensitivity",
      "line": 448,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Alert Sensitivity</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Control how sensitive the system is to potential issues",
      "line": 450,
      "column": 21,
      "context": "Sensitivity</CardTitle> <CardDescription> Control how sensitive the system is to potential issues </Card"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Low Sensitivity",
      "line": 462,
      "column": 54,
      "context": "<div> <p className=\"font-medium\">Low Sensitivity</p> <p className=\"text-sm text-muted-f"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Only alert for significant patterns with high confidence",
      "line": 464,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Only alert for significant patterns with high confidence"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Medium Sensitivity",
      "line": 472,
      "column": 54,
      "context": "<div> <p className=\"font-medium\">Medium Sensitivity</p> <p className=\"text-sm text-mute"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Balanced approach to pattern detection and alerts",
      "line": 474,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Balanced approach to pattern detection and alerts </p>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "High Sensitivity",
      "line": 482,
      "column": 54,
      "context": "<div> <p className=\"font-medium\">High Sensitivity</p> <p className=\"text-sm text-muted-"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert for subtle patterns and potential concerns early",
      "line": 484,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Alert for subtle patterns and potential concerns early"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Current Multipliers:",
      "line": 492,
      "column": 78,
      "context": "\"> <p className=\"text-sm font-medium text-muted-foreground\">Current Multipliers:</p> <div className=\"grid grid-cols-3 ga"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotion:",
      "line": 494,
      "column": 28,
      "context": "<div className=\"grid grid-cols-3 gap-2 text-sm\"> <div>Emotion: {config.alertSensitivity.emotionIntensityMultiplier}x</div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 494,
      "column": 89,
      "context": "<div>Emotion: {config.alertSensitivity.emotionIntensityMultiplier}x</div> <div>Frequency: {config.alertSensitivity.frequency"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Frequency:",
      "line": 495,
      "column": 28,
      "context": ".alertSensitivity.emotionIntensityMultiplier}x</div> <div>Frequency: {config.alertSensitivity.frequencyMultiplier}x</div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 495,
      "column": 84,
      "context": "<div>Frequency: {config.alertSensitivity.frequencyMultiplier}x</div> <div>Anomaly: {config.alertSensitivity.anomalyMult"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly:",
      "line": 496,
      "column": 28,
      "context": "{config.alertSensitivity.frequencyMultiplier}x</div> <div>Anomaly: {config.alertSensitivity.anomalyMultiplier}x</div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 496,
      "column": 80,
      "context": "<div>Anomaly: {config.alertSensitivity.anomalyMultiplier}x</div> </div> </div> </Ca"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analysis Time Windows",
      "line": 506,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Analysis Time Windows</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure the time periods used for different analyses",
      "line": 508,
      "column": 21,
      "context": "ime Windows</CardTitle> <CardDescription> Configure the time periods used for different analyses </CardD"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Default Analysis Period",
      "line": 514,
      "column": 56,
      "context": "ame=\"flex items-center\"> <Label htmlFor=\"defaultAnalysis\">Default Analysis Period</Label> {renderTooltip(\"Standard t"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "days",
      "line": 527,
      "column": 98,
      "context": "<span className=\"w-16 text-right\">{config.timeWindows.defaultAnalysisDays} days</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recent Data Window",
      "line": 533,
      "column": 51,
      "context": "lassName=\"flex items-center\"> <Label htmlFor=\"recentData\">Recent Data Window</Label> {renderTooltip(\"Time window for"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "days",
      "line": 546,
      "column": 93,
      "context": "<span className=\"w-16 text-right\">{config.timeWindows.recentDataDays} days</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Long-term Analysis Window",
      "line": 552,
      "column": 49,
      "context": "className=\"flex items-center\"> <Label htmlFor=\"longTerm\">Long-term Analysis Window</Label> {renderTooltip(\"Extended"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "days",
      "line": 565,
      "column": 91,
      "context": "<span className=\"w-16 text-right\">{config.timeWindows.longTermDays} days</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Machine Learning Models",
      "line": 578,
      "column": 23,
      "context": "p-2\"> <Brain className=\"h-4 w-4\" /> Machine Learning Models </span> <div cla"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enable ML",
      "line": 581,
      "column": 83,
      "context": "<Label htmlFor=\"ml-enabled\" className=\"text-sm font-normal\">Enable ML</Label> <Switch id=\"ml-e"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Manage AI-powered prediction models for enhanced analytics",
      "line": 590,
      "column": 21,
      "context": "</CardTitle> <CardDescription> Manage AI-powered prediction models for enhanced analytics </C"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading ML models...",
      "line": 598,
      "column": 68,
      "context": "reground\" /> <span className=\"ml-2 text-muted-foreground\">Loading ML models...</span> </div> ) : ("
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Version",
      "line": 623,
      "column": 70,
      "context": "<div> <p className=\"text-muted-foreground\">Version</p> <p className=\"font-medium\">{model.ve"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last Trained",
      "line": 627,
      "column": 70,
      "context": "<div> <p className=\"text-muted-foreground\">Last Trained</p> <p className=\"font-medium\">"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Accuracy",
      "line": 634,
      "column": 72,
      "context": "<div> <p className=\"text-muted-foreground\">Accuracy</p> <p className=\"font-medium\">{(mode"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Points",
      "line": 639,
      "column": 70,
      "context": "<div> <p className=\"text-muted-foreground\">Data Points</p> <p className=\"font-medium\">{mode"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Model Performance",
      "line": 647,
      "column": 75,
      "context": "-sm\"> <span className=\"text-muted-foreground\">Model Performance</span> <span>{(model.accurac"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Training...",
      "line": 664,
      "column": 37,
      "context": "r2 className=\"h-3 w-3 mr-1 animate-spin\" /> Training... </>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Retrain",
      "line": 669,
      "column": 37,
      "context": "<RefreshCw className=\"h-3 w-3 mr-1\" /> Retrain </> )}"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Deleting...",
      "line": 682,
      "column": 37,
      "context": "r2 className=\"h-3 w-3 mr-1 animate-spin\" /> Deleting... </>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No model trained yet. Model will be trained automatically when sufficient data is available.",
      "line": 693,
      "column": 31,
      "context": "p className=\"text-sm text-muted-foreground mb-3\"> No model trained yet. Model will be trained automatically when sufficient data i"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Training...",
      "line": 704,
      "column": 35,
      "context": "der2 className=\"h-3 w-3 mr-1 animate-spin\" /> Training... </> )"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Train Model",
      "line": 709,
      "column": 35,
      "context": "<Brain className=\"h-3 w-3 mr-1\" /> Train Model </> )}"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "About Machine Learning",
      "line": 723,
      "column": 23,
      "context": "ap-2\"> <Info className=\"h-4 w-4\" /> About Machine Learning </h5> <p classNam"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "ML models enhance predictions by learning from historical patterns. They require:",
      "line": 726,
      "column": 23,
      "context": "<p className=\"text-sm text-muted-foreground\"> ML models enhance predictions by learning from historical patterns. They require"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Emotion prediction: 7+ days of data",
      "line": 729,
      "column": 27,
      "context": "sName=\"text-sm text-muted-foreground space-y-1 ml-4\"> <li>• Emotion prediction: 7+ days of data</li> <li>• Sensory r"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Sensory response: 10+ tracking sessions",
      "line": 730,
      "column": 27,
      "context": "<li>• Emotion prediction: 7+ days of data</li> <li>• Sensory response: 10+ tracking sessions</li> <li>• Basel"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Baseline clustering: 10+ tracking entries",
      "line": 731,
      "column": 27,
      "context": "<li>• Sensory response: 10+ tracking sessions</li> <li>• Baseline clustering: 10+ tracking entries</li> </ul>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Models are trained locally in your browser and improve over time as more data is collected.",
      "line": 734,
      "column": 23,
      "context": "<p className=\"text-sm text-muted-foreground\"> Models are trained locally in your browser and improve over time as more data is"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Settings",
      "line": 746,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Cache Settings</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure performance optimization settings",
      "line": 748,
      "column": 21,
      "context": "he Settings</CardTitle> <CardDescription> Configure performance optimization settings </CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Duration",
      "line": 754,
      "column": 49,
      "context": "className=\"flex items-center\"> <Label htmlFor=\"cacheTTL\">Cache Duration</Label> {renderTooltip(\"How long to keep ca"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "min",
      "line": 767,
      "column": 84,
      "context": "<span className=\"w-16 text-right\">{config.cache.ttl / 60000} min</span> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Invalidate cache on config change",
      "line": 773,
      "column": 30,
      "context": "<div className=\"flex items-center\"> <Label>Invalidate cache on config change</Label> {renderTooltip(\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Import/Export Configuration",
      "line": 785,
      "column": 52,
      "context": "<CardHeader> <CardTitle className=\"text-base\">Import/Export Configuration</CardTitle> <CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Save and share your configuration settings",
      "line": 787,
      "column": 21,
      "context": "nfiguration</CardTitle> <CardDescription> Save and share your configuration settings </CardDescription>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export Config",
      "line": 797,
      "column": 21,
      "context": "> <Download className=\"h-4 w-4\" /> Export Config </Button> <"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Import Config",
      "line": 808,
      "column": 25,
      "context": "<Upload className=\"h-4 w-4\" /> Import Config </span> </Button>"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Import configuration file",
      "line": 816,
      "column": 34,
      "context": "onChange={handleImport} aria-label=\"Import configuration file\" className=\"hidden\""
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reset to Defaults",
      "line": 833,
      "column": 15,
      "context": "-2\" > <RotateCcw className=\"h-4 w-4\" /> Reset to Defaults </Button> <div className="
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Unsaved changes",
      "line": 840,
      "column": 19,
      "context": "r-4\"> <AlertTriangle className=\"h-4 w-4\" /> Unsaved changes </p> )}"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 848,
      "column": 17,
      "context": "nt=\"outline\" onClick={onClose} > Cancel </Button> <Button"
    },
    {
      "file": "src/components/AnalyticsSettings.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Save Changes",
      "line": 857,
      "column": 17,
      "context": "2\" > <Save className=\"h-4 w-4\" /> Save Changes </Button> </div> </div>"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error refreshing analytics",
      "line": 119,
      "column": 20,
      "context": "; } loadAnalyticsStatus(); } catch (error) { logger.error('Error refreshing analytics', error); } finally { setIsRefreshing(fals"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics:",
      "line": 154,
      "column": 11,
      "context": "<Badge variant={getStatusColor(status)} className=\"text-xs\"> Analytics: {getStatusText(status)} </Badge> {status.lastAnalyzed"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Updated",
      "line": 158,
      "column": 13,
      "context": "zed && ( <span className=\"text-xs text-muted-foreground\"> Updated {formatDistanceToNow(status.lastAnalyzed, { addSuffix: true })}"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics Status",
      "line": 171,
      "column": 13,
      "context": "flex items-center gap-2\"> <Brain className=\"h-5 w-5\" /> Analytics Status {studentId && ` - ${analyticsStatus[0]?.studentName"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Refresh",
      "line": 181,
      "column": 13,
      "context": "className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} /> Refresh </Button> </div> </CardHeader> <CardConten"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No analytics data available",
      "line": 189,
      "column": 16,
      "context": "<Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" /> <p>No analytics data available</p> </div> ) : ( <div cl"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Available",
      "line": 208,
      "column": 27,
      "context": "<BarChart3 className=\"h-3 w-3 mr-1\" /> Data Available </Badge> ) : ("
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Collecting Data",
      "line": 213,
      "column": 27,
      "context": "<Clock className=\"h-3 w-3 mr-1\" /> Collecting Data </Badge> )}"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last updated:",
      "line": 223,
      "column": 25,
      "context": "{status.lastAnalyzed ? ( <> Last updated:<br /> {formatDistanceToNow(status.lastAnal"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active Analytics Systems:",
      "line": 236,
      "column": 66,
      "context": "order-border\"> <h4 className=\"font-medium text-foreground mb-3\">Active Analytics Systems:</h4> <div className=\"grid grid-cols-2"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern Analysis",
      "line": 240,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Pattern Analysis </div> <div className=\"flex"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlation Analysis",
      "line": 244,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Correlation Analysis </div> <div className=\""
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Predictive Insights",
      "line": 248,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Predictive Insights </div> <div className=\"f"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly Detection",
      "line": 252,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Anomaly Detection </div> <div className=\"fle"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alert System",
      "line": 256,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Alert System </div> <div className=\"flex ite"
    },
    {
      "file": "src/components/AnalyticsStatusIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Auto-Updates",
      "line": 260,
      "column": 21,
      "context": "<CheckCircle className=\"h-4 w-4 text-green-600\" /> Auto-Updates </div> </div> </div"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Δ",
      "line": 352,
      "column": 27,
      "context": "der-emerald-200' : 'text-rose-700 border-rose-200')}> Δ {(c.deltaStrength * 100).toFixed(0)}% </Badge>"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "→",
      "line": 359,
      "column": 101,
      "context": "{tAnalytics('interface.impactChange')} {String(c.impactChange.from || '—')} → {String(c.impactChange.to || '—')} </div>"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Δ strength:",
      "line": 435,
      "column": 37,
      "context": "\"text-[13px] mt-1 flex items-center gap-2\"> <span>Δ strength: {(c.deltaStrength ?? 0).toFixed(2)}</span>"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "→",
      "line": 436,
      "column": 112,
      "context": "c.impactChange && <Badge variant=\"outline\">{String(c.impactChange.from || '—')} → {String(c.impactChange.to || '—')}</Badge>} </div>"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Vis flere endrede mønstre",
      "line": 443,
      "column": 74,
      "context": "mt-1\"> <Button size=\"sm\" variant=\"outline\" aria-label=\"Vis flere endrede mønstre\" onClick={() => setPatLimit(p => p + 8)}>Vis flere</B"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Vis flere",
      "line": 443,
      "column": 142,
      "context": "aria-label=\"Vis flere endrede mønstre\" onClick={() => setPatLimit(p => p + 8)}>Vis flere</Button> </div> )}"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "–",
      "line": 457,
      "column": 165,
      "context": "ground\">{tAnalytics('interface.none')}</li> : removed.map(r => <li key={r.name}>– {r.name}</li>)} </ul> </"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Vis flere korrelasjonsendringer",
      "line": 487,
      "column": 74,
      "context": "mt-1\"> <Button size=\"sm\" variant=\"outline\" aria-label=\"Vis flere korrelasjonsendringer\" onClick={() => setCorrLimit(p => p + 8)}>Vis f"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Vis flere",
      "line": 487,
      "column": 149,
      "context": "abel=\"Vis flere korrelasjonsendringer\" onClick={() => setCorrLimit(p => p + 8)}>Vis flere</Button> </div> )}"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Nye korrelasjoner",
      "line": 493,
      "column": 71,
      "context": "<div> <div className=\"text-sm font-medium mb-1\">Nye korrelasjoner</div> <ul className=\"text-sm space"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fjernede korrelasjoner",
      "line": 499,
      "column": 71,
      "context": "<div> <div className=\"text-sm font-medium mb-1\">Fjernede korrelasjoner</div> <ul className=\"text-sm"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "–",
      "line": 501,
      "column": 164,
      "context": "eground\">{tAnalytics('interface.none')}</li> : removed.map(r => <li key={r.key}>– {r.variables.join(' × ')}</li>)} </ul>"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Vis flere nye tiltak",
      "line": 536,
      "column": 98,
      "context": "<div className=\"mt-1\"><Button size=\"sm\" variant=\"outline\" aria-label=\"Vis flere nye tiltak\" onClick={() => setIntAddedLimit(p => p + 8)}>Vis flere</B"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Vis flere",
      "line": 536,
      "column": 166,
      "context": "aria-label=\"Vis flere nye tiltak\" onClick={() => setIntAddedLimit(p => p + 8)}>Vis flere</Button></div> )} </"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Vis flere fjernede tiltak",
      "line": 556,
      "column": 98,
      "context": "<div className=\"mt-1\"><Button size=\"sm\" variant=\"outline\" aria-label=\"Vis flere fjernede tiltak\" onClick={() => setIntRemovedLimit(p => p + 8)}>Vis f"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Vis flere",
      "line": 556,
      "column": 173,
      "context": "abel=\"Vis flere fjernede tiltak\" onClick={() => setIntRemovedLimit(p => p + 8)}>Vis flere</Button></div> )} </"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Endret tillit",
      "line": 562,
      "column": 69,
      "context": "<div> <div className=\"text-sm font-medium mb-1\">Endret tillit</div> <ul className=\"text-sm space-y-1\">"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": ": Δ",
      "line": 566,
      "column": 42,
      "context": "<li key={c.title}> {c.title}: Δ {(c.deltaConfidence ?? 0).toFixed(2)} </li>"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "–",
      "line": 599,
      "column": 74,
      "context": ") => ( <li key={`removed-${s}`} className=\"text-rose-700\">– {s}</li> ))} </ul> </div"
    },
    {
      "file": "src/components/ComparisonSummary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "ms",
      "line": 607,
      "column": 129,
      "context": "estampDifference')}: <Trend value={(content as any).summary.recencyMs.delta} /> ms </div> </div> )}"
    },
    {
      "file": "src/components/ConfidenceIndicator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 104,
      "column": 19,
      "context": "key={explanation} className=\"text-xs text-muted-foreground\"> • {explanation} </div> ))} </div>"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datainnsamlingskart",
      "line": 143,
      "column": 13,
      "context": "x items-center gap-2\"> <Calendar className=\"h-5 w-5\" /> Datainnsamlingskart </CardTitle> </CardHeader> <CardCo"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start datainnsamlingen for å se ditt fremgangskart mot høyere sikkerhetsnivåer.",
      "line": 149,
      "column": 13,
      "context": "foreground\" /> <p className=\"text-muted-foreground mb-4\"> Start datainnsamlingen for å se ditt fremgangskart mot høyere sikkerhetsnivåer."
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datainnsamlingskart",
      "line": 161,
      "column": 11,
      "context": "\"flex items-center gap-2\"> <Calendar className=\"h-5 w-5\" /> Datainnsamlingskart </CardTitle> <div className=\"text-sm text-mu"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fremgang mot høyere sikkerhetsnivå gjennom systematisk datainnsamling",
      "line": 164,
      "column": 11,
      "context": "</CardTitle> <div className=\"text-sm text-muted-foreground\"> Fremgang mot høyere sikkerhetsnivå gjennom systematisk datainnsamling </"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Din fremgang",
      "line": 171,
      "column": 43,
      "context": "x items-center justify-between mb-2\"> <span className=\"font-medium\">Din fremgang</span> <Badge variant=\"outline\"> {milesto"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "av",
      "line": 173,
      "column": 59,
      "context": "ge variant=\"outline\"> {milestones.filter(m => m.achieved).length} av {milestones.length} milepæler </Badge> </div>"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "milepæler",
      "line": 173,
      "column": 82,
      "context": "{milestones.filter(m => m.achieved).length} av {milestones.length} milepæler </Badge> </div> <div className=\"grid g"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datapunkter:",
      "line": 178,
      "column": 55,
      "context": "xt-sm\"> <div> <span className=\"text-muted-foreground\">Datapunkter: </span> <span className=\"font-medium\">{currentStatus."
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dager:",
      "line": 182,
      "column": 55,
      "context": "</div> <div> <span className=\"text-muted-foreground\">Dager: </span> <span className=\"font-medium\">{currentStatus.daysSp"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Neste mål:",
      "line": 196,
      "column": 45,
      "context": "</div> <div> <h4 className=\"font-medium\">Neste mål: {nextMilestone.title}</h4> <p className=\"text-sm text"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fremgang",
      "line": 203,
      "column": 23,
      "context": "iv className=\"flex items-center justify-between text-sm\"> <span>Fremgang</span> <span>{Math.round(nextMilestone.progress)}%</spa"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datapunkter:",
      "line": 209,
      "column": 19,
      "context": "2 gap-4 text-xs text-muted-foreground\"> <div> Datapunkter: {currentStatus.dataPoints}/{nextMilestone.targetDataPoints}"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dager:",
      "line": 212,
      "column": 19,
      "context": "argetDataPoints} </div> <div> Dager: {currentStatus.daysSpan}/{nextMilestone.targetDays} </div"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Estimert ferdigdato:",
      "line": 220,
      "column": 17,
      "context": "\"> <Calendar className=\"h-4 w-4 inline mr-1\" /> Estimert ferdigdato: {formatDate(nextMilestone.estimatedDate)} </d"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Komplett veikart",
      "line": 228,
      "column": 39,
      "context": "e */} <div className=\"space-y-4\"> <h4 className=\"font-medium\">Komplett veikart</h4> <div className=\"relative\"> {/* Timel"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkter",
      "line": 260,
      "column": 56,
      "context": "text-muted-foreground\"> <span>{milestone.targetDataPoints} datapunkter</span> <span>{milestone.targetDays} dager</span>"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager",
      "line": 261,
      "column": 50,
      "context": "DataPoints} datapunkter</span> <span>{milestone.targetDays} dager</span> {milestone.estimatedDate && !milestone.achieved"
    },
    {
      "file": "src/components/DataCollectionRoadmap.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Estimert:",
      "line": 263,
      "column": 29,
      "context": "milestone.estimatedDate && !milestone.achieved && ( <span>Estimert: {formatDate(milestone.estimatedDate)}</span> )}"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakvalitet",
      "line": 213,
      "column": 13,
      "context": "items-center gap-2\"> <BarChart3 className=\"h-5 w-5\" /> Datakvalitet </CardTitle> </CardHeader> <CardContent c"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen data tilgjengelig for kvalitetsvurdering",
      "line": 219,
      "column": 13,
      "context": "uted-foreground\" /> <p className=\"text-muted-foreground\"> Ingen data tilgjengelig for kvalitetsvurdering </p> </CardCont"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakvalitet",
      "line": 231,
      "column": 11,
      "context": "flex items-center gap-2\"> <BarChart3 className=\"h-5 w-5\" /> Datakvalitet </CardTitle> <div className=\"flex items-center gap-"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Samlet score:",
      "line": 235,
      "column": 61,
      "context": "tems-center gap-2\"> <span className=\"text-sm text-muted-foreground\">Samlet score:</span> <Badge variant={overallScore >= 80 ? 'default'"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 267,
      "column": 23,
      "context": "y={`${metric.id}-${rec}`} className=\"text-xs opacity-90\"> • {rec} </p> ))} </div>"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Samlet vurdering",
      "line": 278,
      "column": 44,
      "context": "/20 dark:to-blue-950/20 rounded-lg\"> <h4 className=\"font-medium mb-2\">Samlet vurdering</h4> <p className=\"text-sm text-muted-foreground mb-3"
    },
    {
      "file": "src/components/DataQualityFeedback.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Prioriterte forbedringer:",
      "line": 289,
      "column": 51,
      "context": "<div className=\"space-y-2\"> <h5 className=\"text-sm font-medium\">Prioriterte forbedringer:</h5> {qualityMetrics .fi"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakrav for sikkerhetsnivå",
      "line": 140,
      "column": 13,
      "context": "lex items-center gap-2\"> <Target className=\"h-5 w-5\" /> Datakrav for sikkerhetsnivå </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen data registrert ennå. Start med å samle data for å se fremgang mot sikkerhetsnivåer.",
      "line": 146,
      "column": 13,
      "context": "foreground\" /> <p className=\"text-muted-foreground mb-4\"> Ingen data registrert ennå. Start med å samle data for å se fremgang mot sikkerh"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start datainnsamling",
      "line": 149,
      "column": 13,
      "context": "kkerhetsnivåer. </p> <Button variant=\"outline\"> Start datainnsamling </Button> </CardContent> </Card>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakrav for sikkerhetsnivå",
      "line": 161,
      "column": 11,
      "context": "e=\"flex items-center gap-2\"> <Target className=\"h-5 w-5\" /> Datakrav for sikkerhetsnivå </CardTitle> <div className=\"flex it"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkter samlet",
      "line": 164,
      "column": 44,
      "context": "ap-4 text-sm text-muted-foreground\"> <span>{currentStatus.dataPoints} datapunkter samlet</span> <span>{currentStatus.daysSpan} dager med dat"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager med data",
      "line": 165,
      "column": 42,
      "context": ".dataPoints} datapunkter samlet</span> <span>{currentStatus.daysSpan} dager med data</span> </div> </CardHeader> <CardContent clas"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Nåværende sikkerhetsnivå",
      "line": 172,
      "column": 40,
      "context": "bg-muted/50 rounded-lg\"> <div> <p className=\"font-medium\">Nåværende sikkerhetsnivå</p> <p className=\"text-sm text-muted-foregr"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sikkerhet",
      "line": 181,
      "column": 81,
      "context": "{currentLevel >= 3 ? 'Høy' : currentLevel >= 1 ? 'Middels' : 'Lav'} sikkerhet </Badge> </div> {/* Progress toward next le"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Fremgang mot",
      "line": 189,
      "column": 43,
      "context": "=\"flex items-center justify-between\"> <h4 className=\"font-medium\">Fremgang mot {nextTarget.requirement.description}</h4> <span class"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% fullført",
      "line": 191,
      "column": 50,
      "context": "ext-sm text-muted-foreground\"> {Math.round(nextTarget.progress)}% fullført </span> </div> <Pr"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datapunkter",
      "line": 200,
      "column": 25,
      "context": "className=\"flex items-center justify-between text-sm\"> <span>Datapunkter</span> <span>{nextTarget.dataPoints.current} / {ne"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "flere datapunkter trengs",
      "line": 206,
      "column": 52,
      "context": "t-xs text-muted-foreground\"> {nextTarget.dataPoints.needed} flere datapunkter trengs </p> )}"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tidsperiode",
      "line": 213,
      "column": 25,
      "context": "className=\"flex items-center justify-between text-sm\"> <span>Tidsperiode</span> <span>{nextTarget.days.current} / {nextTarg"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager",
      "line": 214,
      "column": 86,
      "context": "<span>{nextTarget.days.current} / {nextTarget.requirement.minDays} dager</span> </div> <Progress value={nextTarget."
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "flere dager trengs",
      "line": 219,
      "column": 46,
      "context": "e=\"text-xs text-muted-foreground\"> {nextTarget.days.needed} flere dager trengs </p> )} </div"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tidsestimat",
      "line": 229,
      "column": 68,
      "context": "ext-info\" /> <span className=\"font-medium text-info-foreground\">Tidsestimat</span> </div> <p className=\"text-sm text"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Med",
      "line": 232,
      "column": 17,
      "context": "> <p className=\"text-sm text-info-foreground/80\"> Med {getRecommendedRate()} datapunkt(er) per dag vil du nå{' '}"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkt(er) per dag vil du nå",
      "line": 232,
      "column": 44,
      "context": "e=\"text-sm text-info-foreground/80\"> Med {getRecommendedRate()} datapunkt(er) per dag vil du nå{' '} <span className=\"font-mediu"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "innen",
      "line": 233,
      "column": 91,
      "context": "<span className=\"font-medium\">{nextTarget.requirement.description}</span> innen{' '} <span className=\"font-medium\">{formatDate(nextTarget."
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alle sikkerhetsnivåer",
      "line": 243,
      "column": 39,
      "context": "w */} <div className=\"space-y-3\"> <h4 className=\"font-medium\">Alle sikkerhetsnivåer</h4> {progressCalculations.map((calc) => ("
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkter over",
      "line": 261,
      "column": 54,
      "context": "xs text-muted-foreground\"> {calc.requirement.minDataPoints} datapunkter over {calc.requirement.minDays} dager </p>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager",
      "line": 261,
      "column": 98,
      "context": "{calc.requirement.minDataPoints} datapunkter over {calc.requirement.minDays} dager </p> </div> </div>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "dager igjen",
      "line": 271,
      "column": 42,
      "context": "=\"text-xs text-muted-foreground mt-1\"> ~{calc.daysToTarget} dager igjen </p> )} </div>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anbefalinger",
      "line": 284,
      "column": 69,
      "context": "primary\" /> <span className=\"font-medium text-primary-foreground\">Anbefalinger</span> </div> <ul className=\"text-sm text-p"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Samle",
      "line": 287,
      "column": 19,
      "context": "<ul className=\"text-sm text-primary-foreground/80 space-y-1\"> <li>• Samle {getRecommendedRate()} datapunkt(er) per dag for optimal fremgang</li>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "datapunkt(er) per dag for optimal fremgang",
      "line": 287,
      "column": 50,
      "context": "mary-foreground/80 space-y-1\"> <li>• Samle {getRecommendedRate()} datapunkt(er) per dag for optimal fremgang</li> <li>• Registrer da"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Registrer data konsekvent for bedre mønstergjenkjenning",
      "line": 288,
      "column": 19,
      "context": "mendedRate()} datapunkt(er) per dag for optimal fremgang</li> <li>• Registrer data konsekvent for bedre mønstergjenkjenning</li> <li"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Inkluder både følelser og sensoriske opplevelser i hver økt",
      "line": 289,
      "column": 19,
      "context": "Registrer data konsekvent for bedre mønstergjenkjenning</li> <li>• Inkluder både følelser og sensoriske opplevelser i hver økt</li>"
    },
    {
      "file": "src/components/DataRequirementsCalculator.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Noter miljøfaktorer for å identifisere sammenhenger",
      "line": 290,
      "column": 19,
      "context": "luder både følelser og sensoriske opplevelser i hver økt</li> <li>• Noter miljøfaktorer for å identifisere sammenhenger</li> </ul>"
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Quick select",
      "line": 122,
      "column": 36,
      "context": "lassName=\"w-[160px] bg-input border-border\"> <SelectValue placeholder=\"Quick select\" /> </SelectTrigger> <SelectContent> {pr"
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pick a date range",
      "line": 154,
      "column": 21,
      "context": "eRange.from, \"LLL dd, y\") ) ) : ( <span>Pick a date range</span> )} <ChevronDown className=\"ml-a"
    },
    {
      "file": "src/components/DateRangeSelector.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Selected:",
      "line": 174,
      "column": 44,
      "context": "ame=\"text-sm text-muted-foreground\"> <span className=\"hidden md:inline\">Selected: </span> <span className=\"font-medium text-foreground\">{selecte"
    },
    {
      "file": "src/components/DevErrorBanner.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Dev error captured",
      "line": 46,
      "column": 22,
      "context": "// Record through central logger; recursion guarded above logger.error('Dev error captured', ...args); } catch (e) { logger.error('Error"
    },
    {
      "file": "src/components/DevErrorBanner.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Error in DevErrorBanner console.error interceptor",
      "line": 48,
      "column": 22,
      "context": ".error('Dev error captured', ...args); } catch (e) { logger.error('Error in DevErrorBanner console.error interceptor', e); } finally {"
    },
    {
      "file": "src/components/DevErrorBanner.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Window error",
      "line": 61,
      "column": 20,
      "context": "=> c + 1); // Log window errors through central logger logger.error('Window error', e.error || new Error(e.message)); }; const onUnhandledRe"
    },
    {
      "file": "src/components/DevErrorBanner.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Unhandled promise rejection",
      "line": 70,
      "column": 20,
      "context": "1); // Log unhandled rejections through central logger logger.error('Unhandled promise rejection', reason instanceof Error ? reason : new Error(msg)"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Specific Feeling (Optional)",
      "line": 131,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Specific Feeling (Optional)</h3> <div className=\"flex flex-wrap gap-"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Duration (minutes)",
      "line": 187,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Duration (minutes)</h3> <div className=\"flex gap-2\"> <"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "How long did it last?",
      "line": 205,
      "column": 29,
      "context": "999 minutes } }} placeholder=\"How long did it last?\" className=\"w-32 px-3 py-2 border border-"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Duration in minutes",
      "line": 209,
      "column": 28,
      "context": "t\" min=\"0\" max=\"999\" aria-label=\"Duration in minutes\" aria-describedby=\"duration-help\""
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "duration-help",
      "line": 210,
      "column": 34,
      "context": "aria-label=\"Duration in minutes\" aria-describedby=\"duration-help\" /> <div className=\"flex gap-1\">"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "How did it develop?",
      "line": 232,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">How did it develop?</h3> <div className=\"flex gap-2\">"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sudden",
      "line": 240,
      "column": 17,
      "context": "en')} className=\"font-dyslexia\" > Sudden </Button> <Button variant={es"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Gradual",
      "line": 248,
      "column": 17,
      "context": "al')} className=\"font-dyslexia\" > Gradual </Button> <Button variant={e"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Unknown",
      "line": 256,
      "column": 17,
      "context": "wn')} className=\"font-dyslexia\" > Unknown </Button> </div> </div> )}"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Utløsere (Valgfritt)",
      "line": 264,
      "column": 68,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Utløsere (Valgfritt)</h3> <div className=\"flex gap-2 mb-2\">"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Legg til en utløser...",
      "line": 271,
      "column": 27,
      "context": "ress={(e) => e.key === 'Enter' && handleAddTrigger()} placeholder=\"Legg til en utløser...\" aria-label=\"Legg til ny utløser\""
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Legg til ny utløser",
      "line": 272,
      "column": 26,
      "context": "()} placeholder=\"Legg til en utløser...\" aria-label=\"Legg til ny utløser\" className=\"flex-1 px-3 py-2 border border-bo"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 287,
      "column": 27,
      "context": "={() => handleRemoveTrigger(trigger)} > {trigger} × </Badge> ))} </div> </div>"
    },
    {
      "file": "src/components/EmotionTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Ytterligere observasjoner...",
      "line": 299,
      "column": 25,
      "context": "onChange={(e) => setNotes(e.target.value)} placeholder=\"Ytterligere observasjoner...\" className=\"font-dyslexia bg-input bor"
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No data to display",
      "line": 66,
      "column": 63,
      "context": "uted-foreground\"> <h3 className=\"text-lg font-semibold\">No data to display</h3> <p className=\"text-sm\">There is"
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "There is no",
      "line": 67,
      "column": 48,
      "context": "emibold\">No data to display</h3> <p className=\"text-sm\">There is no {dataType} data available for {studentName}.</p>"
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "data available for",
      "line": 67,
      "column": 71,
      "context": "play</h3> <p className=\"text-sm\">There is no {dataType} data available for {studentName}.</p> </div>"
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enhanced Data Insights for",
      "line": 78,
      "column": 77,
      "context": "iv> <h2 className=\"text-2xl font-bold text-card-foreground\">Enhanced Data Insights for {studentName}</h2> <p className=\""
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Displaying",
      "line": 79,
      "column": 58,
      "context": "for {studentName}</h2> <p className=\"text-muted-foreground\">Displaying {dataType}</p> </div> <div className="
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 82,
      "column": 129,
      "context": "taType('emotions')} variant={dataType === 'emotions' ? 'default' : 'secondary'}>Emotions</Button> <Button onClick={() => setDataType('sensor"
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 83,
      "column": 127,
      "context": "DataType('sensory')} variant={dataType === 'sensory' ? 'default' : 'secondary'}>Sensory</Button> </div> </div> <motion."
    },
    {
      "file": "src/components/EnhancedDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Lightweight stub preview — charts library removed as unused",
      "line": 89,
      "column": 19,
      "context": "x items-center justify-center text-sm text-muted-foreground\"> Lightweight stub preview — charts library removed as unused </di"
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Please fill out all required fields (lighting, activity, weather, time of day).",
      "line": 52,
      "column": 19,
      "context": "(!lighting || !classroomActivity || !weather || !timeOfDay) { toast.error('Please fill out all required fields (lighting, activity, weather, time of day)."
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "°C",
      "line": 101,
      "column": 80,
      "context": "{String(tTracking('environmental.temperature'))}: {roomTemperature}°C </Label> <Slider value={[roomTemperature]}"
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "15°C",
      "line": 112,
      "column": 19,
      "context": "assName=\"flex justify-between text-xs text-muted-foreground\"> <span>15°C</span> <span>30°C</span> </div> </div>"
    },
    {
      "file": "src/components/EnvironmentalTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "30°C",
      "line": 113,
      "column": 19,
      "context": "text-xs text-muted-foreground\"> <span>15°C</span> <span>30°C</span> </div> </div> {/* Lighting */} <d"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[ErrorBoundary] Component error caught",
      "line": 94,
      "column": 18,
      "context": "ronment configuration and doesn't log to console in production logger.error('[ErrorBoundary] Component error caught', { error: { message: erro"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "An unexpected error occurred",
      "line": 128,
      "column": 21,
      "context": "ble; also emit a dev-only minimal toast payload try { toast.error('An unexpected error occurred', { description: import.meta.env.DEV &&"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "An unexpected error occurred",
      "line": 128,
      "column": 21,
      "context": "ble; also emit a dev-only minimal toast payload try { toast.error('An unexpected error occurred', { description: import.meta.env.DEV &&"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: toast()",
      "value": "Page automatically refreshed after multiple errors",
      "line": 158,
      "column": 13,
      "context": "this.resetTimeoutId = setTimeout(() => { this.handleRetry(); toast('Page automatically refreshed after multiple errors'); }, 5000); }; /**"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast()",
      "value": "Page automatically refreshed after multiple errors",
      "line": 158,
      "column": 13,
      "context": "this.resetTimeoutId = setTimeout(() => { this.handleRetry(); toast('Page automatically refreshed after multiple errors'); }, 5000); }; /**"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Something went wrong",
      "line": 204,
      "column": 17,
      "context": "ructive\"> <AlertTriangle className=\"h-5 w-5\" /> Something went wrong </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "An unexpected error occurred. The application may not be working correctly.",
      "line": 209,
      "column": 17,
      "context": "4\"> <p className=\"text-sm text-muted-foreground\"> An unexpected error occurred. The application may not be working correctly."
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Error Details",
      "line": 214,
      "column": 67,
      "context": "me=\"text-xs\"> <summary className=\"cursor-pointer font-medium\">Error Details</summary> <pre className=\"mt-2 p-2 bg-muted roun"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Try Again",
      "line": 225,
      "column": 19,
      "context": "lt\"> <RefreshCw className=\"h-4 w-4 mr-2\" /> Try Again </Button> <Button o"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reload Page",
      "line": 232,
      "column": 19,
      "context": "> <RefreshCw className=\"h-4 w-4 mr-2\" /> Reload Page </Button> <Button"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Go Home",
      "line": 239,
      "column": 19,
      "context": "> <Home className=\"h-4 w-4 mr-2\" /> Go Home </Button> </div>"
    },
    {
      "file": "src/components/ErrorBoundary.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Auto-refreshing in 5 seconds...",
      "line": 245,
      "column": 19,
      "context": "<p className=\"text-xs text-muted-foreground\"> Auto-refreshing in 5 seconds... </p> )}"
    },
    {
      "file": "src/components/ErrorWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Something went wrong loading this component",
      "line": 16,
      "column": 15,
      "context": "text-destructive\"> <AlertTriangle className=\"h-5 w-5\" /> <span>Something went wrong loading this component</span> </div> </CardConten"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "format-help",
      "line": 65,
      "column": 66,
      "context": "={inProgress}> <SelectTrigger id=\"export-format\" aria-describedby=\"format-help\"> <SelectValue placeholder={t('export.options.selec"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "PDF",
      "line": 69,
      "column": 41,
      "context": "tTrigger> <SelectContent> <SelectItem value=\"pdf\">PDF</SelectItem> <SelectItem value=\"csv\">CSV</SelectItem>"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "CSV",
      "line": 70,
      "column": 41,
      "context": "SelectItem value=\"pdf\">PDF</SelectItem> <SelectItem value=\"csv\">CSV</SelectItem> <SelectItem value=\"json\">JSON</SelectItem>"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "JSON",
      "line": 71,
      "column": 42,
      "context": "electItem value=\"csv\">CSV</SelectItem> <SelectItem value=\"json\">JSON</SelectItem> </SelectContent> </Select>"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "template-help",
      "line": 79,
      "column": 68,
      "context": "inProgress}> <SelectTrigger id=\"export-template\" aria-describedby=\"template-help\"> <SelectValue placeholder={t('export.options.sel"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "quality-help",
      "line": 93,
      "column": 67,
      "context": "inProgress}> <SelectTrigger id=\"export-quality\" aria-describedby=\"quality-help\"> <SelectValue placeholder={t('export.options.sele"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "scheme-help",
      "line": 110,
      "column": 66,
      "context": "| inProgress}> <SelectTrigger id=\"export-scheme\" aria-describedby=\"scheme-help\"> <SelectValue placeholder={t('export.options.selec"
    },
    {
      "file": "src/components/ExportDialog.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "raw-help",
      "line": 130,
      "column": 32,
      "context": "tIncludeRaw} disabled={inProgress} aria-describedby=\"raw-help\" /> </div> {inProgress && ("
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Please fill in all required fields",
      "line": 97,
      "column": 19,
      "context": ".description.trim() || !newGoal.measurableObjective.trim()) { toast.error(\"Please fill in all required fields\"); return; } // Validate targ"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Please fill in all required fields",
      "line": 97,
      "column": 19,
      "context": ".description.trim() || !newGoal.measurableObjective.trim()) { toast.error(\"Please fill in all required fields\"); return; } // Validate targ"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Please select a target date",
      "line": 103,
      "column": 19,
      "context": "} // Validate target date if (!newGoal.targetDate) { toast.error(\"Please select a target date\"); return; } const targetDate = new"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Please select a target date",
      "line": 103,
      "column": 19,
      "context": "} // Validate target date if (!newGoal.targetDate) { toast.error(\"Please select a target date\"); return; } const targetDate = new"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Invalid target date",
      "line": 109,
      "column": 19,
      "context": "e(newGoal.targetDate); if (isNaN(targetDate.getTime())) { toast.error(\"Invalid target date\"); return; } // Ensure target date is in the"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Invalid target date",
      "line": 109,
      "column": 19,
      "context": "e(newGoal.targetDate); if (isNaN(targetDate.getTime())) { toast.error(\"Invalid target date\"); return; } // Ensure target date is in the"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Target date must be in the future",
      "line": 117,
      "column": 19,
      "context": "today.setHours(0, 0, 0, 0); if (targetDate < today) { toast.error(\"Target date must be in the future\"); return; } // Validate basel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Target date must be in the future",
      "line": 117,
      "column": 19,
      "context": "today.setHours(0, 0, 0, 0); if (targetDate < today) { toast.error(\"Target date must be in the future\"); return; } // Validate basel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Target value must be greater than baseline value",
      "line": 123,
      "column": 19,
      "context": "alues if (newGoal.targetValue <= newGoal.baselineValue) { toast.error(\"Target value must be greater than baseline value\"); return; } co"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Target value must be greater than baseline value",
      "line": 123,
      "column": 19,
      "context": "alues if (newGoal.targetValue <= newGoal.baselineValue) { toast.error(\"Target value must be greater than baseline value\"); return; } co"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Goal created successfully!",
      "line": 155,
      "column": 19,
      "context": "loadGoals(); resetForm(); setShowCreateDialog(false); toast.success(\"Goal created successfully!\"); onGoalUpdate?.(); }; const updateGoal ="
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Goal created successfully!",
      "line": 155,
      "column": 19,
      "context": "loadGoals(); resetForm(); setShowCreateDialog(false); toast.success(\"Goal created successfully!\"); onGoalUpdate?.(); }; const updateGoal ="
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Progress updated!",
      "line": 189,
      "column": 19,
      "context": "urrentProgress: Math.max(0, Math.min(100, progress)) }); toast.success(\"Progress updated!\"); }; const addMilestone = (goalId: string, title: strin"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Progress updated!",
      "line": 189,
      "column": 19,
      "context": "urrentProgress: Math.max(0, Math.min(100, progress)) }); toast.success(\"Progress updated!\"); }; const addMilestone = (goalId: string, title: strin"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Milestone added!",
      "line": 208,
      "column": 19,
      "context": "milestones: [...goal.milestones, newMilestone] }); toast.success(\"Milestone added!\"); }; const completeMilestone = (goalId: string, mileston"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Milestone added!",
      "line": 208,
      "column": 19,
      "context": "milestones: [...goal.milestones, newMilestone] }); toast.success(\"Milestone added!\"); }; const completeMilestone = (goalId: string, mileston"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Milestone completed! 🎉",
      "line": 222,
      "column": 19,
      "context": "; updateGoal(goalId, { milestones: updatedMilestones }); toast.success(\"Milestone completed! 🎉\"); }; /** * Delete a goal with proper confirmat"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Milestone completed! 🎉",
      "line": 222,
      "column": 19,
      "context": "; updateGoal(goalId, { milestones: updatedMilestones }); toast.success(\"Milestone completed! 🎉\"); }; /** * Delete a goal with proper confirmat"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Goal deleted",
      "line": 244,
      "column": 23,
      "context": "dataStorage.saveGoal(updatedGoal); loadGoals(); toast.success(\"Goal deleted\"); onGoalUpdate?.(); } } catch (error) { l"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Goal deleted",
      "line": 244,
      "column": 23,
      "context": "dataStorage.saveGoal(updatedGoal); loadGoals(); toast.success(\"Goal deleted\"); onGoalUpdate?.(); } } catch (error) { l"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to delete goal",
      "line": 248,
      "column": 20,
      "context": "d\"); onGoalUpdate?.(); } } catch (error) { logger.error('Failed to delete goal', error); toast.error('Failed to delete goal. Pleas"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to delete goal. Please try again.",
      "line": 249,
      "column": 19,
      "context": "(error) { logger.error('Failed to delete goal', error); toast.error('Failed to delete goal. Please try again.'); } }; const resetForm = ()"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to delete goal. Please try again.",
      "line": 249,
      "column": 19,
      "context": "(error) { logger.error('Failed to delete goal', error); toast.error('Failed to delete goal. Please try again.'); } }; const resetForm = ()"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "IEP Goals",
      "line": 292,
      "column": 62,
      "context": "en\"> <div> <h2 className=\"text-2xl font-bold text-foreground\">IEP Goals</h2> <p className=\"text-muted-foreground\">Track and monitor"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Track and monitor",
      "line": 293,
      "column": 48,
      "context": "text-foreground\">IEP Goals</h2> <p className=\"text-muted-foreground\">Track and monitor {student.name}'s progress toward educational objectives</p>"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "'s progress toward educational objectives",
      "line": 293,
      "column": 80,
      "context": "<p className=\"text-muted-foreground\">Track and monitor {student.name}'s progress toward educational objectives</p> </div> <Dialog ope"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "New Goal",
      "line": 299,
      "column": 15,
      "context": "0 font-dyslexia\"> <Plus className=\"h-4 w-4 mr-2\" /> New Goal </Button> </DialogTrigger> <DialogConte"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create New IEP Goal",
      "line": 304,
      "column": 28,
      "context": "nt className=\"max-w-2xl\"> <DialogHeader> <DialogTitle>Create New IEP Goal</DialogTitle> <DialogDescription>"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Enter goal details, targets, and measurable objectives.",
      "line": 306,
      "column": 17,
      "context": "te New IEP Goal</DialogTitle> <DialogDescription> Enter goal details, targets, and measurable objectives. </DialogDe"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Goal Title *",
      "line": 311,
      "column": 40,
      "context": "assName=\"space-y-4\"> <div> <Label htmlFor=\"title\">Goal Title *</Label> <Input id=\"title\""
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "e.g., Improve emotional regulation during transitions",
      "line": 316,
      "column": 31,
      "context": "al(prev => ({ ...prev, title: e.target.value }))} placeholder=\"e.g., Improve emotional regulation during transitions\" />"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category",
      "line": 320,
      "column": 43,
      "context": "</div> <div> <Label htmlFor=\"category\">Category</Label> <Select value={newGoal.category} onValueChange="
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Behavioral",
      "line": 326,
      "column": 52,
      "context": "<SelectContent> <SelectItem value=\"behavioral\">Behavioral</SelectItem> <SelectItem value=\"academic\">Academi"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Academic",
      "line": 327,
      "column": 50,
      "context": "ioral\">Behavioral</SelectItem> <SelectItem value=\"academic\">Academic</SelectItem> <SelectItem value=\"social\">Social</Sel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Social",
      "line": 328,
      "column": 48,
      "context": "\"academic\">Academic</SelectItem> <SelectItem value=\"social\">Social</SelectItem> <SelectItem value=\"sensory\">Sensory</Sel"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 329,
      "column": 49,
      "context": "ue=\"social\">Social</SelectItem> <SelectItem value=\"sensory\">Sensory</SelectItem> <SelectItem value=\"communication\">Commu"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Communication",
      "line": 330,
      "column": 55,
      "context": "ory\">Sensory</SelectItem> <SelectItem value=\"communication\">Communication</SelectItem> </SelectContent> </"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Description *",
      "line": 335,
      "column": 46,
      "context": "</div> <div> <Label htmlFor=\"description\">Description *</Label> <Textarea id=\"descriptio"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Detailed description of what the student will achieve...",
      "line": 340,
      "column": 31,
      "context": "v => ({ ...prev, description: e.target.value }))} placeholder=\"Detailed description of what the student will achieve...\" />"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Measurable Objective *",
      "line": 344,
      "column": 45,
      "context": "</div> <div> <Label htmlFor=\"measurable\">Measurable Objective *</Label> <Textarea id=\"m"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "How will progress be measured? Include specific criteria...",
      "line": 349,
      "column": 31,
      "context": "...prev, measurableObjective: e.target.value }))} placeholder=\"How will progress be measured? Include specific criteria...\" />"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Baseline Value",
      "line": 354,
      "column": 45,
      "context": "ols-2 gap-4\"> <div> <Label htmlFor=\"baseline\">Baseline Value</Label> <Input id=\"baseline"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Target Value",
      "line": 363,
      "column": 43,
      "context": "</div> <div> <Label htmlFor=\"target\">Target Value</Label> <Input id=\"target\""
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Target Date",
      "line": 373,
      "column": 45,
      "context": "</div> <div> <Label htmlFor=\"targetDate\">Target Date</Label> <Input id=\"targetDate\""
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 383,
      "column": 19,
      "context": "onClick={() => { resetForm(); setShowCreateDialog(false); }}> Cancel </Button> <Button onClick={createGoal}>Cr"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Goal",
      "line": 385,
      "column": 46,
      "context": "Cancel </Button> <Button onClick={createGoal}>Create Goal</Button> </div> </div> </DialogC"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No IEP Goals Yet",
      "line": 397,
      "column": 72,
      "context": "mb-4\" /> <h3 className=\"text-xl font-semibold text-foreground mb-2\">No IEP Goals Yet</h3> <p className=\"text-muted-foreground text-cente"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Start by creating your first IEP goal to track",
      "line": 399,
      "column": 15,
      "context": "<p className=\"text-muted-foreground text-center mb-6 max-w-md\"> Start by creating your first IEP goal to track {student.name}'s educational prog"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "'s educational progress.",
      "line": 399,
      "column": 76,
      "context": "md\"> Start by creating your first IEP goal to track {student.name}'s educational progress. </p> <Button onClick={() => set"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create First Goal",
      "line": 403,
      "column": 15,
      "context": "0 font-dyslexia\"> <Plus className=\"h-4 w-4 mr-2\" /> Create First Goal </Button> </CardContent> </Card>"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Edit goal",
      "line": 429,
      "column": 68,
      "context": "flex gap-2\"> <Button variant=\"ghost\" size=\"icon\" aria-label=\"Edit goal\" title=\"Edit goal\"> <Edit className=\"h-4 w-4\" /"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Edit goal",
      "line": 429,
      "column": 86,
      "context": "<Button variant=\"ghost\" size=\"icon\" aria-label=\"Edit goal\" title=\"Edit goal\"> <Edit className=\"h-4 w-4\" />"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Delete goal",
      "line": 432,
      "column": 68,
      "context": "</Button> <Button variant=\"ghost\" size=\"icon\" aria-label=\"Delete goal\" title=\"Delete goal\" onClick={() => deleteGoal(goal.id)}>"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Delete goal",
      "line": 432,
      "column": 88,
      "context": "<Button variant=\"ghost\" size=\"icon\" aria-label=\"Delete goal\" title=\"Delete goal\" onClick={() => deleteGoal(goal.id)}> <Trash2"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress",
      "line": 442,
      "column": 59,
      "context": "ustify-between mb-2\"> <span className=\"text-sm font-medium\">Progress</span> <span className=\"text-sm text-muted-foregrou"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Measurable Objective",
      "line": 450,
      "column": 52,
      "context": "<div className=\"mb-4\"> <h4 className=\"font-medium mb-2\">Measurable Objective</h4> <p className=\"text-sm text-muted-for"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Created:",
      "line": 460,
      "column": 27,
      "context": "ndarIcon className=\"h-4 w-4 text-muted-foreground\" /> <span>Created: {format(goal.createdDate, 'MMM dd, yyyy')}</span> </d"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Target:",
      "line": 464,
      "column": 27,
      "context": "rosshair className=\"h-4 w-4 text-muted-foreground\" /> <span>Target: {format(goal.targetDate, 'MMM dd, yyyy')}</span> </div"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Milestones",
      "line": 471,
      "column": 49,
      "context": "s-center justify-between mb-2\"> <h4 className=\"font-medium\">Milestones</h4> <Button variant=\"outl"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Milestone title:",
      "line": 476,
      "column": 46,
      "context": "onClick={() => { const title = prompt(\"Milestone title:\"); const description = prompt(\"Milesto"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Milestone description:",
      "line": 477,
      "column": 52,
      "context": "prompt(\"Milestone title:\"); const description = prompt(\"Milestone description:\"); const dateStr = prompt(\"Targe"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Target date (YYYY-MM-DD):",
      "line": 478,
      "column": 48,
      "context": "rompt(\"Milestone description:\"); const dateStr = prompt(\"Target date (YYYY-MM-DD):\"); if (title && description &"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Add",
      "line": 485,
      "column": 23,
      "context": "> <Plus className=\"h-3 w-3 mr-1\" /> Add </Button> </div> {go"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No milestones yet",
      "line": 489,
      "column": 66,
      "context": "ngth === 0 ? ( <p className=\"text-sm text-muted-foreground\">No milestones yet</p> ) : ( <div className"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Enter current progress value:",
      "line": 525,
      "column": 44,
      "context": "onClick={() => { const value = prompt(\"Enter current progress value:\"); const notes = prompt(\"Pr"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: prompt()",
      "value": "Progress notes (optional):",
      "line": 526,
      "column": 44,
      "context": "pt(\"Enter current progress value:\"); const notes = prompt(\"Progress notes (optional):\"); if (value) {"
    },
    {
      "file": "src/components/GoalManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Update Progress",
      "line": 533,
      "column": 21,
      "context": "<TrendingUp className=\"h-4 w-4 mr-1\" /> Update Progress </Button> </div>"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[InteractiveDataVisualization] analytics error",
      "line": 165,
      "column": 26,
      "context": "'analytics_ui_error_' + String(error), 60_000, () => { try { logger.error('[InteractiveDataVisualization] analytics error', { error }); } catch {} });"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Export failed",
      "line": 259,
      "column": 20,
      "context": "oUpperCase()} exported successfully`); } catch (error) { logger.error('Export failed', { error }); toast.error('Failed to export interactive ana"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to export interactive analytics data",
      "line": 260,
      "column": 19,
      "context": "tch (error) { logger.error('Export failed', { error }); toast.error('Failed to export interactive analytics data'); } finally { setIsExpor"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to export interactive analytics data",
      "line": 260,
      "column": 19,
      "context": "tch (error) { logger.error('Export failed', { error }); toast.error('Failed to export interactive analytics data'); } finally { setIsExpor"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading chart",
      "line": 285,
      "column": 123,
      "context": "Name=\"h-[360px] rounded-xl border bg-card motion-safe:animate-pulse\" aria-label=\"Loading chart\" />}> <EChartContainerLazy option={option} height="
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading chart",
      "line": 291,
      "column": 121,
      "context": "Name=\"h-[360px] rounded-xl border bg-card motion-safe:animate-pulse\" aria-label=\"Loading chart\" />}> <TrendsChartLazy chartData={chartData} selecte"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading heatmap",
      "line": 297,
      "column": 121,
      "context": "Name=\"h-[420px] rounded-xl border bg-card motion-safe:animate-pulse\" aria-label=\"Loading heatmap\" />}> <CorrelationHeatmapLazy correlationMatrix={a"
    },
    {
      "file": "src/components/InteractiveDataVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading patterns",
      "line": 303,
      "column": 121,
      "context": "Name=\"h-[360px] rounded-xl border bg-card motion-safe:animate-pulse\" aria-label=\"Loading patterns\" />}> <PatternAnalysisViewLazy {...analysisData}"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Mock data loaded successfully!",
      "line": 84,
      "column": 21,
      "context": "ario}\" with ${stats.entriesCount} tracking entries`; toast.success('Mock data loaded successfully!', { description, });"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Mock data loaded successfully!",
      "line": 84,
      "column": 21,
      "context": "ario}\" with ${stats.entriesCount} tracking entries`; toast.success('Mock data loaded successfully!', { description, });"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to load mock data",
      "line": 97,
      "column": 19,
      "context": "{ clearInterval(progressIntervalRef.current); } toast.error('Failed to load mock data', { description: error instanceof Error ? erro"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to load mock data",
      "line": 97,
      "column": 19,
      "context": "{ clearInterval(progressIntervalRef.current); } toast.error('Failed to load mock data', { description: error instanceof Error ? erro"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Mock data cleared successfully!",
      "line": 114,
      "column": 21,
      "context": "() => { try { clearMockDataFromStorage(); toast.success('Mock data cleared successfully!'); // Dispatch a custom event to f"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Mock data cleared successfully!",
      "line": 114,
      "column": 21,
      "context": "() => { try { clearMockDataFromStorage(); toast.success('Mock data cleared successfully!'); // Dispatch a custom event to f"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear mock data",
      "line": 120,
      "column": 19,
      "context": "CustomEvent('mockDataLoaded')); } catch (error) { toast.error('Failed to clear mock data', { description: error instanceof Error ? err"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear mock data",
      "line": 120,
      "column": 19,
      "context": "CustomEvent('mockDataLoaded')); } catch (error) { toast.error('Failed to clear mock data', { description: error instanceof Error ? err"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data for Testing",
      "line": 138,
      "column": 11,
      "context": "enter gap-2\"> <Database className=\"h-5 w-5 text-primary\" /> Mock Data for Testing </CardTitle> </CardHeader> <CardConten"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load realistic test data to explore pattern analysis and correlation features.\n          Mock data includes 3 students with 3-6 months of tracking data each.",
      "line": 143,
      "column": 11,
      "context": "=\"space-y-4\"> <div className=\"text-sm text-muted-foreground\"> Load realistic test data to explore pattern analysis and correlation features."
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Students to be created:",
      "line": 150,
      "column": 48,
      "context": "<div className=\"space-y-2\"> <div className=\"text-sm font-medium\">Students to be created:</div> <div className=\"space-y-1\">"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Current Data:",
      "line": 164,
      "column": 50,
      "context": "uted/50 rounded-lg space-y-1\"> <div className=\"text-sm font-medium\">Current Data:</div> <div className=\"text-xs text-muted-foreground sp"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 166,
      "column": 20,
      "context": "<div className=\"text-xs text-muted-foreground space-y-1\"> <div>• {currentStats.studentsCount} students</div> <div>• {currentStats"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "students",
      "line": 166,
      "column": 51,
      "context": "-muted-foreground space-y-1\"> <div>• {currentStats.studentsCount} students</div> <div>• {currentStats.entriesCount} tracking entries"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 167,
      "column": 20,
      "context": "<div>• {currentStats.studentsCount} students</div> <div>• {currentStats.entriesCount} tracking entries</div> {hasMockData"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "tracking entries",
      "line": 167,
      "column": 50,
      "context": ".studentsCount} students</div> <div>• {currentStats.entriesCount} tracking entries</div> {hasMockData && <div className=\"text-orange"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Contains mock data",
      "line": 168,
      "column": 64,
      "context": "ng entries</div> {hasMockData && <div className=\"text-orange-600\">• Contains mock data</div>} </div> </div> )}"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Scenario",
      "line": 176,
      "column": 50,
      "context": "<div className=\"space-y-1\"> <div className=\"text-sm font-medium\">Scenario</div> <Select value={selectedScenario}"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Select scenario",
      "line": 182,
      "column": 42,
      "context": "<SelectTrigger className=\"w-full\"> <SelectValue placeholder=\"Select scenario\" /> </SelectTrigger> <SelectContent"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "All (Emma, Lars, Astrid)",
      "line": 185,
      "column": 41,
      "context": "tTrigger> <SelectContent> <SelectItem value=\"all\">All (Emma, Lars, Astrid)</SelectItem> <SelectItem value=\"emma\">E"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emma (mild anxiety, improving)",
      "line": 186,
      "column": 42,
      "context": ">All (Emma, Lars, Astrid)</SelectItem> <SelectItem value=\"emma\">Emma (mild anxiety, improving)</SelectItem> <SelectItem value=\"l"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Lars (sensory challenges)",
      "line": 187,
      "column": 42,
      "context": "(mild anxiety, improving)</SelectItem> <SelectItem value=\"lars\">Lars (sensory challenges)</SelectItem> <SelectItem value=\"astrid"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Astrid (steady improvement)",
      "line": 188,
      "column": 44,
      "context": "rs (sensory challenges)</SelectItem> <SelectItem value=\"astrid\">Astrid (steady improvement)</SelectItem> </SelectContent>"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading mock data...",
      "line": 197,
      "column": 60,
      "context": "assName=\"space-y-2\"> <div className=\"text-sm text-muted-foreground\">Loading mock data...</div> <Progress value={loadingProgress} classNa"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load Mock Data",
      "line": 210,
      "column": 13,
      "context": "Data} > <Database className=\"h-4 w-4 mr-2\" /> Load Mock Data </Button> {hasMockData && ( <Ale"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All",
      "line": 222,
      "column": 19,
      "context": "> <Trash2 className=\"h-4 w-4 mr-2\" /> Clear All </Button> </AlertDialogTrigger>"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All Data?",
      "line": 227,
      "column": 37,
      "context": "ontent> <AlertDialogHeader> <AlertDialogTitle>Clear All Data?</AlertDialogTitle> <AlertDialogDescription>"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "This will permanently delete all student data and tracking entries. \n                    This action cannot be undone.",
      "line": 229,
      "column": 21,
      "context": "lertDialogTitle> <AlertDialogDescription> This will permanently delete all student data and tracking entries."
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 234,
      "column": 38,
      "context": "eader> <AlertDialogFooter> <AlertDialogCancel>Cancel</AlertDialogCancel> <AlertDialogAction onClick={handleC"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All Data",
      "line": 237,
      "column": 21,
      "context": "e\"> <Trash2 className=\"h-4 w-4 mr-2\" /> Clear All Data </AlertDialogAction> </AlertDia"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Features you can test:",
      "line": 247,
      "column": 53,
      "context": "-3 border-t border-border\"> <div className=\"text-sm font-medium mb-2\">Features you can test:</div> <div className=\"text-xs text-muted-foregr"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Emotion pattern recognition",
      "line": 249,
      "column": 18,
      "context": "<div className=\"text-xs text-muted-foreground space-y-1\"> <div>• Emotion pattern recognition</div> <div>• Sensory input correlation"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Sensory input correlations",
      "line": 250,
      "column": 18,
      "context": "ace-y-1\"> <div>• Emotion pattern recognition</div> <div>• Sensory input correlations</div> <div>• Environmental factor analy"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Environmental factor analysis",
      "line": 251,
      "column": 18,
      "context": "tion</div> <div>• Sensory input correlations</div> <div>• Environmental factor analysis</div> <div>• Predictive insights & t"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Predictive insights & trends",
      "line": 252,
      "column": 18,
      "context": "s</div> <div>• Environmental factor analysis</div> <div>• Predictive insights & trends</div> <div>• Interactive data visuali"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Interactive data visualization",
      "line": 253,
      "column": 18,
      "context": "is</div> <div>• Predictive insights & trends</div> <div>• Interactive data visualization</div> <div>• Alert system & anomaly"
    },
    {
      "file": "src/components/MockDataLoader.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Alert system & anomaly detection",
      "line": 254,
      "column": 18,
      "context": "</div> <div>• Interactive data visualization</div> <div>• Alert system & anomaly detection</div> </div> </div> <"
    },
    {
      "file": "src/components/POCBadge.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "POC Mode",
      "line": 6,
      "column": 75,
      "context": "urn ( <Badge variant=\"outline\" className=\"uppercase tracking-wider text-xs\">POC Mode</Badge> ); };"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No sessions available in the selected period.",
      "line": 60,
      "column": 14,
      "context": "<CardContent className=\"py-16 text-center text-muted-foreground\"> <p>No sessions available in the selected period.</p> </CardContent> <"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Showing",
      "line": 72,
      "column": 19,
      "context": "Name=\"flex items-center gap-2 text-sm text-muted-foreground\"> <span>Showing {startIndex}-{endIndex} of {totalItems}</span> <Select"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "of",
      "line": 72,
      "column": 51,
      "context": "xt-sm text-muted-foreground\"> <span>Showing {startIndex}-{endIndex} of {totalItems}</span> <Select value={pageSize.toStrin"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading sessions...",
      "line": 93,
      "column": 13,
      "context": "( <div className=\"text-center p-8 text-muted-foreground\"> Loading sessions... </div> ) : ( <div> {"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "at",
      "line": 103,
      "column": 62,
      "context": "text-foreground\"> {entry.timestamp.toLocaleDateString()} at {entry.timestamp.toLocaleTimeString()} </span>"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "emotions",
      "line": 107,
      "column": 49,
      "context": "=\"outline\" className=\"text-xs\"> {entry.emotions.length} emotions </Badge> <Badge variant=\"ou"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sensory",
      "line": 110,
      "column": 54,
      "context": "line\" className=\"text-xs\"> {entry.sensoryInputs.length} sensory </Badge> {entry.environmenta"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Environmental data",
      "line": 114,
      "column": 27,
      "context": "<Badge variant=\"outline\" className=\"text-xs\"> Environmental data </Badge> )}"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "more",
      "line": 133,
      "column": 56,
      "context": "ne\" className=\"text-xs\"> +{entry.emotions.length - 3} more </Badge> )}"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Page",
      "line": 146,
      "column": 19,
      "context": "<div className=\"text-sm text-muted-foreground\"> Page {currentPage} of {totalPages} </div>"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "of",
      "line": 146,
      "column": 38,
      "context": "className=\"text-sm text-muted-foreground\"> Page {currentPage} of {totalPages} </div> <div cla"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "First page",
      "line": 153,
      "column": 32,
      "context": "variant=\"ghost\" size=\"icon\" aria-label=\"First page\" onClick={goToFirstPage} dis"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Previous page",
      "line": 163,
      "column": 32,
      "context": "variant=\"ghost\" size=\"icon\" aria-label=\"Previous page\" onClick={goToPreviousPage}"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Next page",
      "line": 196,
      "column": 32,
      "context": "variant=\"ghost\" size=\"icon\" aria-label=\"Next page\" onClick={goToNextPage} disab"
    },
    {
      "file": "src/components/PaginatedSessionsList.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Last page",
      "line": 206,
      "column": 32,
      "context": "variant=\"ghost\" size=\"icon\" aria-label=\"Last page\" onClick={goToLastPage} disab"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "vs",
      "line": 178,
      "column": 17,
      "context": "-muted-foreground\"> <span>{currentRange.label}</span> <span>vs</span> <span>{comparisonRange.label}</span> </div> </"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "vs",
      "line": 197,
      "column": 17,
      "context": "<div className=\"text-xs text-muted-foreground mt-1\"> vs {metric.format ? metric.format(metric.previous) : metric.previous}"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotion",
      "line": 209,
      "column": 62,
      "context": "er gap-2 text-sm\"> <Badge variant=\"outline\" className=\"text-xs\">Emotion</Badge> <span className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Most common changed from",
      "line": 211,
      "column": 19,
      "context": "dge> <span className=\"text-muted-foreground\"> Most common changed from <span className=\"font-medium\">{comparisonStats.mostComm"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "to",
      "line": 211,
      "column": 117,
      "context": "d from <span className=\"font-medium\">{comparisonStats.mostCommonEmotion}</span> to{\" \"} <span className=\"font-medium\">{currentStats.mostCommon"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Intensity",
      "line": 219,
      "column": 62,
      "context": "er gap-2 text-sm\"> <Badge variant=\"outline\" className=\"text-xs\">Intensity</Badge> <span className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Average intensity",
      "line": 221,
      "column": 19,
      "context": "dge> <span className=\"text-muted-foreground\"> Average intensity{\" \"} {currentStats.avgEmotionIntensity > com"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "by",
      "line": 222,
      "column": 120,
      "context": "ionIntensity > comparisonStats.avgEmotionIntensity ? \"increased\" : \"decreased\"} by{\" \"} <span className=\"font-medium\"> {Ma"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "points",
      "line": 224,
      "column": 115,
      "context": "entStats.avgEmotionIntensity - comparisonStats.avgEmotionIntensity).toFixed(1)} points </span> </span> </div>"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 232,
      "column": 62,
      "context": "er gap-2 text-sm\"> <Badge variant=\"outline\" className=\"text-xs\">Sensory</Badge> <span className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory seeking behavior",
      "line": 234,
      "column": 19,
      "context": "dge> <span className=\"text-muted-foreground\"> Sensory seeking behavior{\" \"} {currentStats.seekingRatio > com"
    },
    {
      "file": "src/components/PeriodComparison.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "by",
      "line": 235,
      "column": 106,
      "context": "tStats.seekingRatio > comparisonStats.seekingRatio ? \"increased\" : \"decreased\"} by{\" \"} <span className=\"font-medium\"> {Ma"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Total Goals",
      "line": 221,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">Total Goals</CardTitle> <Crosshair className=\"h-4 w-4 text-muted-for"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "active,",
      "line": 229,
      "column": 45,
      "context": "me=\"text-xs text-muted-foreground\"> {progressMetrics.activeGoals} active, {progressMetrics.achievedGoals} achieved </p> </Ca"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "achieved",
      "line": 229,
      "column": 85,
      "context": "{progressMetrics.activeGoals} active, {progressMetrics.achievedGoals} achieved </p> </CardContent> </Card> <Car"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Overall Progress",
      "line": 236,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">Overall Progress</CardTitle> <TrendingUp className=\"h-4 w-4 text-mut"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "On Track",
      "line": 249,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">On Track</CardTitle> <CheckCircle className=\"h-4 w-4 text-green-500\""
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "goals meeting expectations",
      "line": 257,
      "column": 15,
      "context": "</div> <p className=\"text-xs text-muted-foreground\"> goals meeting expectations </p> </CardContent> </C"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "At Risk",
      "line": 264,
      "column": 56,
      "context": "between space-y-0 pb-2\"> <CardTitle className=\"text-sm font-medium\">At Risk</CardTitle> <Clock className=\"h-4 w-4 text-red-500\" />"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "goals needing attention",
      "line": 272,
      "column": 15,
      "context": "</div> <p className=\"text-xs text-muted-foreground\"> goals needing attention </p> </CardContent> </Card"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Overview",
      "line": 280,
      "column": 41,
      "context": "st className=\"grid w-full grid-cols-4\"> <TabsTrigger value=\"overview\">Overview</TabsTrigger> <TabsTrigger value=\"trends\">Trends</TabsTrigger"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Trends",
      "line": 281,
      "column": 39,
      "context": "r value=\"overview\">Overview</TabsTrigger> <TabsTrigger value=\"trends\">Trends</TabsTrigger> <TabsTrigger value=\"categories\">Categories</TabsT"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Categories",
      "line": 282,
      "column": 43,
      "context": "r value=\"trends\">Trends</TabsTrigger> <TabsTrigger value=\"categories\">Categories</TabsTrigger> <TabsTrigger value=\"priorities\">Priorities</T"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Priorities",
      "line": 283,
      "column": 43,
      "context": "\"categories\">Categories</TabsTrigger> <TabsTrigger value=\"priorities\">Priorities</TabsTrigger> </TabsList> <TabsContent value=\"overvi"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress Trends (Last 3 Months)",
      "line": 290,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Progress Trends (Last 3 Months)</CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading trends chart",
      "line": 294,
      "column": 33,
      "context": "rdContent> {isAnalyzingTrends ? ( <div aria-label=\"Loading trends chart\" className=\"h-[300px] w-full\"> <div clas"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading progress trends",
      "line": 322,
      "column": 135,
      "context": "Name=\"h-[300px] rounded-md border bg-card motion-safe:animate-pulse\" aria-label=\"Loading progress trends\" />}> <EChartContainer"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Progress trends line chart",
      "line": 326,
      "column": 34,
      "context": "={option} height={300} aria-label=\"Progress trends line chart\" exportRegistration={{ id: 'pr"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recent Goal Updates",
      "line": 338,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Recent Goal Updates</CardTitle> </CardHeader> <CardConte"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Updated",
      "line": 357,
      "column": 29,
      "context": "<p className=\"text-sm text-muted-foreground\"> Updated {format(latestPoint.timestamp, 'MMM dd, yyyy')}"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Goal Completion Trends",
      "line": 376,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Goal Completion Trends</CardTitle> </CardHeader> <CardCo"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading category chart",
      "line": 401,
      "column": 137,
      "context": "Name=\"h-[300px] rounded-md border bg-card motion-safe:animate-pulse\" aria-label=\"Loading category chart\" />}> <EChartContainer"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Goal completion by category bar chart",
      "line": 405,
      "column": 36,
      "context": "tion} height={300} aria-label=\"Goal completion by category bar chart\" exportRegistrati"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress by Category",
      "line": 419,
      "column": 28,
      "context": "rd border-0 shadow-soft\"> <CardHeader> <CardTitle>Progress by Category</CardTitle> </CardHeader> <Card"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading donut chart",
      "line": 446,
      "column": 137,
      "context": "Name=\"h-[250px] rounded-md border bg-card motion-safe:animate-pulse\" aria-label=\"Loading donut chart\" />}> <EChartContainer"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Progress by category donut chart",
      "line": 450,
      "column": 36,
      "context": "tion} height={250} aria-label=\"Progress by category donut chart\" exportRegistration={{"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category Breakdown",
      "line": 461,
      "column": 28,
      "context": "rd border-0 shadow-soft\"> <CardHeader> <CardTitle>Category Breakdown</CardTitle> </CardHeader> <CardCo"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "goals",
      "line": 469,
      "column": 67,
      "context": "egory}</span> <Badge variant=\"outline\">{category.count} goals</Badge> </div> <Progress value"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% average progress",
      "line": 473,
      "column": 50,
      "context": "ext-xs text-muted-foreground\"> <span>{category.progress}% average progress</span> <span>{category.achieved} achi"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "achieved",
      "line": 474,
      "column": 51,
      "context": "ess}% average progress</span> <span>{category.achieved} achieved</span> </div> </div>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Priority Goals Requiring Attention",
      "line": 487,
      "column": 26,
      "context": "t-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Priority Goals Requiring Attention</CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Progress",
      "line": 506,
      "column": 31,
      "context": "<div className=\"flex justify-between text-sm\"> <span>Progress</span> <span>{Math.round(goal.currentProgress)}"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "⚠️ This goal is past its target date and may need review or extension.",
      "line": 513,
      "column": 25,
      "context": "uctive/20 rounded text-sm text-destructive-foreground\"> ⚠️ This goal is past its target date and may need review or extension."
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "📈 Consider increasing intervention intensity to meet target date.",
      "line": 518,
      "column": 25,
      "context": "er-warning/20 rounded text-sm text-warning-foreground\"> 📈 Consider increasing intervention intensity to meet target date."
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "All goals are on track!",
      "line": 526,
      "column": 80,
      "context": "<p className=\"text-lg font-medium text-success-foreground\">All goals are on track!</p> <p className=\"text-muted-foregro"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Great work keeping",
      "line": 527,
      "column": 58,
      "context": "oals are on track!</p> <p className=\"text-muted-foreground\">Great work keeping {student.name}'s progress moving forward.</p>"
    },
    {
      "file": "src/components/ProgressDashboard.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "'s progress moving forward.",
      "line": 527,
      "column": 91,
      "context": "<p className=\"text-muted-foreground\">Great work keeping {student.name}'s progress moving forward.</p> </div> )}"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to parse saved templates, using defaults",
      "line": 167,
      "column": 20,
      "context": "catch (error) { // Log error and fall back to defaults logger.error('Failed to parse saved templates, using defaults', error); return defaultT"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save templates to localStorage",
      "line": 201,
      "column": 20,
      "context": "or) { // Handle quota exceeded or other storage errors logger.error('Failed to save templates to localStorage', error); toast.error('Failed to"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to save template changes. Storage may be full.",
      "line": 202,
      "column": 19,
      "context": "ger.error('Failed to save templates to localStorage', error); toast.error('Failed to save template changes. Storage may be full.'); } }; const ap"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to save template changes. Storage may be full.",
      "line": 202,
      "column": 19,
      "context": "ger.error('Failed to save templates to localStorage', error); toast.error('Failed to save template changes. Storage may be full.'); } }; const ap"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Cannot delete default templates",
      "line": 237,
      "column": 19,
      "context": "ind(t => t.id === templateId); if (template?.isDefault) { toast.error(\"Cannot delete default templates\"); return; } const updatedTe"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Cannot delete default templates",
      "line": 237,
      "column": 19,
      "context": "ind(t => t.id === templateId); if (template?.isDefault) { toast.error(\"Cannot delete default templates\"); return; } const updatedTe"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Template deleted",
      "line": 243,
      "column": 19,
      "context": "=> t.id !== templateId); saveTemplates(updatedTemplates); toast.success(\"Template deleted\"); }; const createTemplate = () => { if (!newTemplate"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Template deleted",
      "line": 243,
      "column": 19,
      "context": "=> t.id !== templateId); saveTemplates(updatedTemplates); toast.success(\"Template deleted\"); }; const createTemplate = () => { if (!newTemplate"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Template name is required",
      "line": 248,
      "column": 19,
      "context": "createTemplate = () => { if (!newTemplate.name?.trim()) { toast.error(\"Template name is required\"); return; } const template: QuickTemp"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Template name is required",
      "line": 248,
      "column": 19,
      "context": "createTemplate = () => { if (!newTemplate.name?.trim()) { toast.error(\"Template name is required\"); return; } const template: QuickTemp"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Template created successfully",
      "line": 275,
      "column": 19,
      "context": "false, usageCount: 0 }); setIsCreating(false); toast.success(\"Template created successfully\"); }; const getCategoryColor = (category: st"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Template created successfully",
      "line": 275,
      "column": 19,
      "context": "false, usageCount: 0 }); setIsCreating(false); toast.success(\"Template created successfully\"); }; const getCategoryColor = (category: st"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Quick Entry Templates",
      "line": 303,
      "column": 13,
      "context": "center gap-2\"> <Zap className=\"h-5 w-5 text-primary\" /> Quick Entry Templates </CardTitle> <Dialog open={isCreating}"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Create new template",
      "line": 307,
      "column": 62,
      "context": "ogTrigger asChild> <Button size=\"sm\" variant=\"outline\" aria-label=\"Create new template\" title=\"Create new template\"> <Plus classNa"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Create new template",
      "line": 307,
      "column": 90,
      "context": "<Button size=\"sm\" variant=\"outline\" aria-label=\"Create new template\" title=\"Create new template\"> <Plus className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "New Template",
      "line": 309,
      "column": 52,
      "context": "className=\"h-4 w-4 mr-2\" /> <span className=\"hidden sm:inline\">New Template</span> </Button> </DialogTrigger>"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Quick Entry Template",
      "line": 314,
      "column": 30,
      "context": "className=\"max-w-md\"> <DialogHeader> <DialogTitle>Create Quick Entry Template</DialogTitle> <DialogDescription>"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Define a name, optional description, category, and default values.",
      "line": 316,
      "column": 19,
      "context": "ry Template</DialogTitle> <DialogDescription> Define a name, optional description, category, and default values."
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Template Name",
      "line": 321,
      "column": 83,
      "context": "<label className=\"text-sm font-medium\" htmlFor={templateNameId}>Template Name</label> <Input id={templateN"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "e.g., Sensory Overload Response",
      "line": 324,
      "column": 33,
      "context": "<Input id={templateNameId} placeholder=\"e.g., Sensory Overload Response\" value={newTemplate.name ||"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Description",
      "line": 330,
      "column": 90,
      "context": "<label className=\"text-sm font-medium\" htmlFor={templateDescriptionId}>Description</label> <Textarea id={template"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Brief description of when to use this template",
      "line": 333,
      "column": 33,
      "context": "id={templateDescriptionId} placeholder=\"Brief description of when to use this template\" value={newT"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category",
      "line": 344,
      "column": 21,
      "context": "htmlFor={templateCategoryTriggerId} > Category </label> <Select"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Morning",
      "line": 357,
      "column": 51,
      "context": "<SelectContent> <SelectItem value=\"morning\">Morning</SelectItem> <SelectItem value=\"transition\">Transi"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Transition",
      "line": 358,
      "column": 54,
      "context": "ning\">Morning</SelectItem> <SelectItem value=\"transition\">Transition</SelectItem> <SelectItem value=\"learning\">Learn"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Learning",
      "line": 359,
      "column": 52,
      "context": "ion\">Transition</SelectItem> <SelectItem value=\"learning\">Learning</SelectItem> <SelectItem value=\"break\">Break</Sel"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Break",
      "line": 360,
      "column": 49,
      "context": "learning\">Learning</SelectItem> <SelectItem value=\"break\">Break</SelectItem> <SelectItem value=\"afternoon\">Afternoon"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Afternoon",
      "line": 361,
      "column": 53,
      "context": "=\"break\">Break</SelectItem> <SelectItem value=\"afternoon\">Afternoon</SelectItem> <SelectItem value=\"custom\">Custom</"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Custom",
      "line": 362,
      "column": 50,
      "context": "ernoon\">Afternoon</SelectItem> <SelectItem value=\"custom\">Custom</SelectItem> </SelectContent> </Sel"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cancel",
      "line": 368,
      "column": 21,
      "context": "ton variant=\"outline\" onClick={() => setIsCreating(false)}> Cancel </Button> <Button onClick={createTemp"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Template",
      "line": 371,
      "column": 21,
      "context": "Button> <Button onClick={createTemplate}> Create Template </Button> </div>"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "more",
      "line": 418,
      "column": 59,
      "context": "className=\"text-xs\"> +{template.emotions.length - 2} more </Badge> )}"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Apply Template",
      "line": 430,
      "column": 23,
      "context": "className=\"flex-1 mr-2\" > Apply Template </Button>"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Edit template",
      "line": 438,
      "column": 38,
      "context": "variant=\"ghost\" aria-label=\"Edit template\" title=\"Edit template\""
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Edit template",
      "line": 439,
      "column": 33,
      "context": "aria-label=\"Edit template\" title=\"Edit template\" onClick={() => setEditingTemplate(temp"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Delete template",
      "line": 447,
      "column": 38,
      "context": "variant=\"ghost\" aria-label=\"Delete template\" title=\"Delete template\""
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Delete template",
      "line": 448,
      "column": 33,
      "context": "aria-label=\"Delete template\" title=\"Delete template\" onClick={() => deleteTemplate(templa"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No quick entry templates yet",
      "line": 465,
      "column": 16,
      "context": "<Zap className=\"h-12 w-12 mx-auto mb-3 opacity-50\" /> <p>No quick entry templates yet</p> <p className=\"text-sm\">Create templ"
    },
    {
      "file": "src/components/QuickEntryTemplates.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create templates for common tracking scenarios",
      "line": 466,
      "column": 36,
      "context": "<p>No quick entry templates yet</p> <p className=\"text-sm\">Create templates for common tracking scenarios</p> </div> )}"
    },
    {
      "file": "src/components/ReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Report",
      "line": 474,
      "column": 15,
      "context": "nt-dyslexia\"> <FileText className=\"h-4 w-4 mr-2\" /> Create Report </Button> </DialogTrigger> <Dialog"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Manual intensity input",
      "line": 185,
      "column": 26,
      "context": "className=\"w-16 px-2 py-1 mt-2 rounded border\" aria-label=\"Manual intensity input\" /> </div> )} {/*"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Body Location (Optional)",
      "line": 193,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Body Location (Optional)</h3> <div className=\"flex flex-wrap gap-2\">"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Coping Strategies Used",
      "line": 222,
      "column": 70,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Coping Strategies Used</h3> <div className=\"flex gap-2 mb-2\">"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Add a coping strategy...",
      "line": 229,
      "column": 29,
      "context": "=> e.key === 'Enter' && handleAddCopingStrategy()} placeholder=\"Add a coping strategy...\" aria-label=\"Legg til mestringsstrateg"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Legg til mestringsstrategi",
      "line": 230,
      "column": 28,
      "context": "placeholder=\"Add a coping strategy...\" aria-label=\"Legg til mestringsstrategi\" className=\"flex-1 px-3 py-2 border"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 261,
      "column": 30,
      "context": "eRemoveCopingStrategy(strategy)} > {strategy} × </Badge> ))} </div> </div>"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Miljø (Valgfritt)",
      "line": 270,
      "column": 68,
      "context": "<div> <h3 className=\"text-sm font-medium text-foreground mb-3\">Miljø (Valgfritt)</h3> <input type=\"text\" valu"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "f.eks. Klasserom, Lekeplass, Bibliotek...",
      "line": 275,
      "column": 25,
      "context": "onChange={(e) => setEnvironment(e.target.value)} placeholder=\"f.eks. Klasserom, Lekeplass, Bibliotek...\" aria-label=\"Beskriv milj"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Beskriv miljøet",
      "line": 276,
      "column": 24,
      "context": "placeholder=\"f.eks. Klasserom, Lekeplass, Bibliotek...\" aria-label=\"Beskriv miljøet\" className=\"w-full px-3 py-2 border border-border r"
    },
    {
      "file": "src/components/SensoryTracker.tsx",
      "kind": "JSXAttribute",
      "detail": "Static placeholder attribute",
      "value": "Ytterligere observasjoner om den sensoriske responsen...",
      "line": 287,
      "column": 25,
      "context": "onChange={(e) => setNotes(e.target.value)} placeholder=\"Ytterligere observasjoner om den sensoriske responsen...\" className"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Old data cleared successfully",
      "line": 34,
      "column": 21,
      "context": "=> { try { storageUtils.clearOldTrackingData(30); toast.success('Old data cleared successfully'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Old data cleared successfully",
      "line": 34,
      "column": 21,
      "context": "=> { try { storageUtils.clearOldTrackingData(30); toast.success('Old data cleared successfully'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear old tracking data",
      "line": 37,
      "column": 20,
      "context": "successfully'); refreshStats(); } catch (error) { logger.error('Failed to clear old tracking data', error); toast.error('Failed to clear"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear old data",
      "line": 38,
      "column": 19,
      "context": "logger.error('Failed to clear old tracking data', error); toast.error('Failed to clear old data'); } }; const handleClearNonEssential = () =>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear old data",
      "line": 38,
      "column": 19,
      "context": "logger.error('Failed to clear old tracking data', error); toast.error('Failed to clear old data'); } }; const handleClearNonEssential = () =>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Non-essential data cleared",
      "line": 45,
      "column": 21,
      "context": "=> { try { storageUtils.clearNonEssentialData(); toast.success('Non-essential data cleared'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Non-essential data cleared",
      "line": 45,
      "column": 21,
      "context": "=> { try { storageUtils.clearNonEssentialData(); toast.success('Non-essential data cleared'); refreshStats(); } catch (error) {"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear non-essential data",
      "line": 48,
      "column": 20,
      "context": "data cleared'); refreshStats(); } catch (error) { logger.error('Failed to clear non-essential data', error); toast.error('Failed to clear"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear non-essential data",
      "line": 49,
      "column": 19,
      "context": "logger.error('Failed to clear non-essential data', error); toast.error('Failed to clear non-essential data'); } }; /** * Handle clearing al"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear non-essential data",
      "line": 49,
      "column": 19,
      "context": "logger.error('Failed to clear non-essential data', error); toast.error('Failed to clear non-essential data'); } }; /** * Handle clearing al"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: confirm()",
      "value": "Are you sure you want to clear ALL data? This cannot be undone!",
      "line": 61,
      "column": 40,
      "context": "using a custom modal component try { const confirmed = window.confirm('Are you sure you want to clear ALL data? This cannot be undone!'); if (co"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "All data cleared",
      "line": 65,
      "column": 25,
      "context": ") { try { dataStorage.clearAllData(); toast.success('All data cleared'); // Use window.location.replace for better history"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "All data cleared",
      "line": 65,
      "column": 25,
      "context": ") { try { dataStorage.clearAllData(); toast.success('All data cleared'); // Use window.location.replace for better history"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear all data",
      "line": 69,
      "column": 24,
      "context": "window.location.replace('/'); } catch (error) { logger.error('Failed to clear all data', error); toast.error('Failed to clear all d"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to clear all data",
      "line": 70,
      "column": 23,
      "context": "logger.error('Failed to clear all data', error); toast.error('Failed to clear all data'); } } } catch (error) { // Ha"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Failed to clear all data",
      "line": 70,
      "column": 23,
      "context": "logger.error('Failed to clear all data', error); toast.error('Failed to clear all data'); } } } catch (error) { // Ha"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Confirmation dialog failed",
      "line": 75,
      "column": 20,
      "context": "s where confirm might fail (e.g., in some test environments) logger.error('Confirmation dialog failed', error); toast.error('Could not show confirma"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Could not show confirmation dialog",
      "line": 76,
      "column": 19,
      "context": "nts) logger.error('Confirmation dialog failed', error); toast.error('Could not show confirmation dialog'); } }; const formatBytes = (bytes:"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Could not show confirmation dialog",
      "line": 76,
      "column": 19,
      "context": "nts) logger.error('Confirmation dialog failed', error); toast.error('Could not show confirmation dialog'); } }; const formatBytes = (bytes:"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Storage Management",
      "line": 95,
      "column": 11,
      "context": "\"flex items-center gap-2\"> <Database className=\"h-5 w-5\" /> Storage Management </CardTitle> <CardDescription> Mana"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Manage your local storage to ensure smooth operation",
      "line": 98,
      "column": 11,
      "context": "Storage Management </CardTitle> <CardDescription> Manage your local storage to ensure smooth operation </CardDescription>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Storage Usage",
      "line": 104,
      "column": 44,
      "context": "{/* Storage Usage */} <div> <h3 className=\"font-medium mb-2\">Storage Usage</h3> <div className=\"space-y-2\"> <div classN"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Used",
      "line": 107,
      "column": 21,
      "context": "<div className=\"flex justify-between text-sm\"> <span>Used</span> <span>{formatBytes(storageInfo.used)} / ~5 MB</span>"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "/ ~5 MB",
      "line": 108,
      "column": 53,
      "context": "<span>Used</span> <span>{formatBytes(storageInfo.used)} / ~5 MB</span> </div> <div className=\"w-full\">"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Statistics",
      "line": 121,
      "column": 44,
      "context": "{/* Storage Stats */} <div> <h3 className=\"font-medium mb-2\">Data Statistics</h3> <div className=\"grid grid-cols-2 gap-2 text-sm\">"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Students:",
      "line": 123,
      "column": 18,
      "context": "h3> <div className=\"grid grid-cols-2 gap-2 text-sm\"> <div>Students: {stats.studentsCount}</div> <div>Entries: {stats.entriesCo"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Entries:",
      "line": 124,
      "column": 18,
      "context": "xt-sm\"> <div>Students: {stats.studentsCount}</div> <div>Entries: {stats.entriesCount}</div> <div>Goals: {stats.goalsCount}</"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Goals:",
      "line": 125,
      "column": 18,
      "context": "nt}</div> <div>Entries: {stats.entriesCount}</div> <div>Goals: {stats.goalsCount}</div> <div>Alerts: {stats.alertsCount}</di"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Alerts:",
      "line": 126,
      "column": 18,
      "context": "sCount}</div> <div>Goals: {stats.goalsCount}</div> <div>Alerts: {stats.alertsCount}</div> </div> </div> {/* W"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear data older than 30 days",
      "line": 152,
      "column": 13,
      "context": "-start\" > <Trash2 className=\"h-4 w-4 mr-2\" /> Clear data older than 30 days </Button> <Button"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear non-essential data",
      "line": 160,
      "column": 13,
      "context": "-start\" > <Trash2 className=\"h-4 w-4 mr-2\" /> Clear non-essential data </Button> <Button varia"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear ALL data (irreversible)",
      "line": 168,
      "column": 13,
      "context": "-start\" > <Trash2 className=\"h-4 w-4 mr-2\" /> Clear ALL data (irreversible) </Button> </div> {stora"
    },
    {
      "file": "src/components/StorageManager.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Storage is healthy with sufficient space available.",
      "line": 176,
      "column": 15,
      "context": "CheckCircle className=\"h-4 w-4\" /> <AlertDescription> Storage is healthy with sufficient space available. </AlertDescripti"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hovedseksjoner",
      "line": 110,
      "column": 13,
      "context": "foreground text-xs font-medium uppercase tracking-wider px-3 py-2\"> Hovedseksjoner </SidebarGroupLabel> <SidebarGroupContent>"
    },
    {
      "file": "src/components/StudentProfileSidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Verktøy",
      "line": 145,
      "column": 13,
      "context": "foreground text-xs font-medium uppercase tracking-wider px-3 py-2\"> Verktøy </SidebarGroupLabel> <SidebarGroupContent>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "System tests completed successfully",
      "line": 202,
      "column": 21,
      "context": "ilable\" }; setTestResults([...results]); toast.success(\"System tests completed successfully\"); } catch (error) { logge"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "System tests completed successfully",
      "line": 202,
      "column": 21,
      "context": "ilable\" }; setTestResults([...results]); toast.success(\"System tests completed successfully\"); } catch (error) { logge"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "System test error",
      "line": 205,
      "column": 20,
      "context": "tests completed successfully\"); } catch (error) { logger.error('System test error', { error }); results.push({ name: \"Test Error\""
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Some tests failed",
      "line": 212,
      "column": 19,
      "context": "nknown error'}` }); setTestResults([...results]); toast.error(\"Some tests failed\"); } finally { setIsRunningTests(false); } };"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Some tests failed",
      "line": 212,
      "column": 19,
      "context": "nknown error'}` }); setTestResults([...results]); toast.error(\"Some tests failed\"); } finally { setIsRunningTests(false); } };"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Analytics cache cleared successfully",
      "line": 241,
      "column": 19,
      "context": ") => { analyticsWorker.clearCache(); uiCache.clear(); toast.success(\"Analytics cache cleared successfully\"); }, [analyticsWorker, uiCache]); co"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Analytics cache cleared successfully",
      "line": 241,
      "column": 19,
      "context": ") => { analyticsWorker.clearCache(); uiCache.clear(); toast.success(\"Analytics cache cleared successfully\"); }, [analyticsWorker, uiCache]); co"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "System Testing & Debug Panel",
      "line": 256,
      "column": 13,
      "context": "=\"flex items-center gap-2\"> <Bug className=\"h-5 w-5\" /> System Testing & Debug Panel </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Test current system functionality and data integrity",
      "line": 262,
      "column": 15,
      "context": "tween\"> <p className=\"text-sm text-muted-foreground\"> Test current system functionality and data integrity </p>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Run system tests",
      "line": 269,
      "column": 26,
      "context": "size=\"sm\" variant=\"outline\" aria-label=\"Run system tests\" title=\"Run system tests\" >"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Run system tests",
      "line": 270,
      "column": 21,
      "context": "riant=\"outline\" aria-label=\"Run system tests\" title=\"Run system tests\" > {isRunningTests ? ("
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Running Tests...",
      "line": 275,
      "column": 54,
      "context": "w-4 mr-2 animate-spin\" /> <span className=\"hidden sm:inline\">Running Tests...</span> </> ) : ("
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Run System Tests",
      "line": 280,
      "column": 54,
      "context": "lassName=\"h-4 w-4 mr-2\" /> <span className=\"hidden sm:inline\">Run System Tests</span> </> )} </Butto"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Test Results:",
      "line": 288,
      "column": 51,
      "context": "<div className=\"space-y-3\"> <h4 className=\"text-sm font-medium\">Test Results:</h4> {testResults.map((result) => ("
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Quick Stats:",
      "line": 307,
      "column": 54,
      "context": "4 border-t border-border\"> <h4 className=\"text-sm font-medium mb-2\">Quick Stats:</h4> <div className=\"grid grid-cols-3 gap-3 text-center"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Students",
      "line": 311,
      "column": 62,
      "context": "ted-foreground\" /> <p className=\"text-xs text-muted-foreground\">Students</p> </div> <div> <Database"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Entries",
      "line": 315,
      "column": 62,
      "context": "ted-foreground\" /> <p className=\"text-xs text-muted-foreground\">Entries</p> </div> <div> <BarChart3"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics",
      "line": 319,
      "column": 62,
      "context": "ted-foreground\" /> <p className=\"text-xs text-muted-foreground\">Analytics</p> </div> </div> </div> <"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analytics Cache Management",
      "line": 331,
      "column": 13,
      "context": "ex items-center gap-2\"> <Archive className=\"h-5 w-5\" /> Analytics Cache Management </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Hit Rate",
      "line": 340,
      "column": 57,
      "context": "enter justify-between\"> <span className=\"text-sm font-medium\">Cache Hit Rate</span> <div className=\"flex items-center gap-2\""
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Size",
      "line": 349,
      "column": 69,
      "context": "flex-col\"> <span className=\"text-xs text-muted-foreground\">Cache Size</span> <span className=\"text-lg font-semibold\">{c"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Memory Usage",
      "line": 353,
      "column": 69,
      "context": "flex-col\"> <span className=\"text-xs text-muted-foreground\">Memory Usage</span> <span className=\"text-lg font-semibold\">"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Hits",
      "line": 364,
      "column": 66,
      "context": "tats.hits}</p> <p className=\"text-xs text-muted-foreground\">Hits</p> </div> <div className=\"text-center"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Misses",
      "line": 369,
      "column": 66,
      "context": "ts.misses}</p> <p className=\"text-xs text-muted-foreground\">Misses</p> </div> <div className=\"text-cente"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sets",
      "line": 374,
      "column": 66,
      "context": "tats.sets}</p> <p className=\"text-xs text-muted-foreground\">Sets</p> </div> </div> </div>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Cache Actions",
      "line": 381,
      "column": 53,
      "context": "t border-border space-y-3\"> <h4 className=\"text-sm font-medium\">Cache Actions</h4> <div className=\"flex gap-2\">"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Clear all analytics cache",
      "line": 388,
      "column": 30,
      "context": "leClearCache} className=\"flex-1\" aria-label=\"Clear all analytics cache\" title=\"Clear all analytics cache\""
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Clear all analytics cache",
      "line": 389,
      "column": 25,
      "context": "aria-label=\"Clear all analytics cache\" title=\"Clear all analytics cache\" > <Trash2 classNam"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear All Cache",
      "line": 392,
      "column": 54,
      "context": "lassName=\"h-4 w-4 mr-2\" /> <span className=\"hidden sm:inline\">Clear All Cache</span> </Button> <Button"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Clean expired cache entries",
      "line": 399,
      "column": 30,
      "context": "he.cleanup()} className=\"flex-1\" aria-label=\"Clean expired cache entries\" title=\"Clean expired cache entri"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Clean expired cache entries",
      "line": 400,
      "column": 25,
      "context": "aria-label=\"Clean expired cache entries\" title=\"Clean expired cache entries\" > <RefreshCw cla"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clean Expired",
      "line": 403,
      "column": 54,
      "context": "lassName=\"h-4 w-4 mr-2\" /> <span className=\"hidden sm:inline\">Clean Expired</span> </Button> </div>"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Cache TTL: 5 minutes",
      "line": 408,
      "column": 22,
      "context": "<div className=\"text-xs text-muted-foreground\"> <p>• Cache TTL: 5 minutes</p> <p>• Eviction: LRU (Least Recently"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Eviction: LRU (Least Recently Used)",
      "line": 409,
      "column": 22,
      "context": "reground\"> <p>• Cache TTL: 5 minutes</p> <p>• Eviction: LRU (Least Recently Used)</p> <p>• Invalidations:"
    },
    {
      "file": "src/components/TestingDebugPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Invalidations:",
      "line": 410,
      "column": 22,
      "context": "<p>• Eviction: LRU (Least Recently Used)</p> <p>• Invalidations: {cacheStats.invalidations || 0}</p> </div>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Testing & Development Tools",
      "line": 20,
      "column": 44,
      "context": "v className=\"space-y-6\"> <div> <h2 className=\"text-2xl font-bold\">Testing & Development Tools</h2> <p className=\"text-muted-foreground\">"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tools for testing pattern analysis features and debugging data issues",
      "line": 22,
      "column": 11,
      "context": "Development Tools</h2> <p className=\"text-muted-foreground\"> Tools for testing pattern analysis features and debugging data issues </"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data Generator",
      "line": 32,
      "column": 15,
      "context": "p-2\"> <Database className=\"h-5 w-5 text-primary\" /> Mock Data Generator </CardTitle> </CardHeader> <"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load realistic test data to explore pattern analysis features",
      "line": 37,
      "column": 15,
      "context": "t> <p className=\"text-sm text-muted-foreground mb-4\"> Load realistic test data to explore pattern analysis features </p>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load Mock Data",
      "line": 43,
      "column": 19,
      "context": "-90\"> <Database className=\"h-4 w-4 mr-2\" /> Load Mock Data </Button> </DialogTrigger>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mock Data for Testing & Analysis",
      "line": 48,
      "column": 32,
      "context": "overflow-y-auto\"> <DialogHeader> <DialogTitle>Mock Data for Testing & Analysis</DialogTitle> <DialogDescript"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Load realistic sample students and entries to explore features safely.",
      "line": 50,
      "column": 21,
      "context": "nalysis</DialogTitle> <DialogDescription> Load realistic sample students and entries to explore features safely."
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Debug Panel",
      "line": 64,
      "column": 15,
      "context": "er gap-2\"> <Bug className=\"h-5 w-5 text-primary\" /> Debug Panel </CardTitle> </CardHeader> <CardCont"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced debugging and data inspection tools",
      "line": 69,
      "column": 15,
      "context": "t> <p className=\"text-sm text-muted-foreground mb-4\"> Advanced debugging and data inspection tools </p> <Dialo"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Open Debug Panel",
      "line": 75,
      "column": 19,
      "context": "=\"w-full\"> <Bug className=\"h-4 w-4 mr-2\" /> Open Debug Panel </Button> </DialogTrigger>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Debug & Data Inspection",
      "line": 80,
      "column": 32,
      "context": "overflow-y-auto\"> <DialogHeader> <DialogTitle>Debug & Data Inspection</DialogTitle> <DialogDescription>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced debugging tools for inspecting state, storage, and analytics.",
      "line": 82,
      "column": 21,
      "context": "pection</DialogTitle> <DialogDescription> Advanced debugging tools for inspecting state, storage, and analytics."
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern Analysis Testing Guide",
      "line": 96,
      "column": 15,
      "context": "gap-2\"> <Beaker className=\"h-5 w-5 text-primary\" /> Pattern Analysis Testing Guide </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "To test pattern analysis features effectively:",
      "line": 102,
      "column": 17,
      "context": "4\"> <p className=\"text-sm text-muted-foreground\"> To test pattern analysis features effectively: </p>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Requirements:",
      "line": 106,
      "column": 60,
      "context": "<div> <h4 className=\"font-medium text-sm mb-2\">Data Requirements:</h4> <ul className=\"text-xs text-muted-fore"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• At least 10 tracking entries for basic patterns",
      "line": 108,
      "column": 25,
      "context": "ul className=\"text-xs text-muted-foreground space-y-1\"> <li>• At least 10 tracking entries for basic patterns</li> <li>•"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• 30+ entries for correlation analysis",
      "line": 109,
      "column": 25,
      "context": ">• At least 10 tracking entries for basic patterns</li> <li>• 30+ entries for correlation analysis</li> <li>• 90+ entrie"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• 90+ entries for predictive insights",
      "line": 110,
      "column": 25,
      "context": "<li>• 30+ entries for correlation analysis</li> <li>• 90+ entries for predictive insights</li> <li>• Multiple st"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Multiple students for comparative analysis",
      "line": 111,
      "column": 25,
      "context": "<li>• 90+ entries for predictive insights</li> <li>• Multiple students for comparative analysis</li> </ul>"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Features to Test:",
      "line": 115,
      "column": 60,
      "context": "<div> <h4 className=\"font-medium text-sm mb-2\">Features to Test:</h4> <ul className=\"text-xs text-muted-foreg"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Emotion trend analysis",
      "line": 117,
      "column": 25,
      "context": "ul className=\"text-xs text-muted-foreground space-y-1\"> <li>• Emotion trend analysis</li> <li>• Sensory correlation matr"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Sensory correlation matrices",
      "line": 118,
      "column": 25,
      "context": "> <li>• Emotion trend analysis</li> <li>• Sensory correlation matrices</li> <li>• Environmental impa"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Environmental impact patterns",
      "line": 119,
      "column": 25,
      "context": "<li>• Sensory correlation matrices</li> <li>• Environmental impact patterns</li> <li>• Anomaly detection"
    },
    {
      "file": "src/components/TestingToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "• Anomaly detection alerts",
      "line": 120,
      "column": 25,
      "context": "<li>• Environmental impact patterns</li> <li>• Anomaly detection alerts</li> </ul> </div>"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Timeline Visualization",
      "line": 536,
      "column": 13,
      "context": "flex items-center gap-2\"> <Clock className=\"h-5 w-5\" /> Timeline Visualization </CardTitle> <div className=\"flex ite"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Live",
      "line": 541,
      "column": 17,
      "context": "<Badge variant=\"default\" className=\"animate-pulse\"> Live </Badge> )} <Button siz"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Reset view",
      "line": 547,
      "column": 26,
      "context": "size=\"icon\" variant=\"ghost\" aria-label=\"Reset view\" title=\"Reset view\" onClick={() => {"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Reset view",
      "line": 548,
      "column": 21,
      "context": "variant=\"ghost\" aria-label=\"Reset view\" title=\"Reset view\" onClick={() => { setZoomLevel(1);"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Zoom out",
      "line": 569,
      "column": 28,
      "context": "size=\"icon\" variant=\"ghost\" aria-label=\"Zoom out\" title=\"Zoom out\" onClick={() => handl"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Zoom out",
      "line": 570,
      "column": 23,
      "context": "variant=\"ghost\" aria-label=\"Zoom out\" title=\"Zoom out\" onClick={() => handleZoom(-0.5)} disa"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Zoom in",
      "line": 582,
      "column": 28,
      "context": "size=\"icon\" variant=\"ghost\" aria-label=\"Zoom in\" title=\"Zoom in\" onClick={() => handleZ"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Zoom in",
      "line": 583,
      "column": 23,
      "context": "variant=\"ghost\" aria-label=\"Zoom in\" title=\"Zoom in\" onClick={() => handleZoom(0.5)} disabl"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Pan left",
      "line": 596,
      "column": 28,
      "context": "size=\"icon\" variant=\"ghost\" aria-label=\"Pan left\" title=\"Pan left\" onClick={() => handl"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Pan left",
      "line": 597,
      "column": 23,
      "context": "variant=\"ghost\" aria-label=\"Pan left\" title=\"Pan left\" onClick={() => handlePan(50)} >"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Pan right",
      "line": 605,
      "column": 28,
      "context": "size=\"icon\" variant=\"ghost\" aria-label=\"Pan right\" title=\"Pan right\" onClick={() => han"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Pan right",
      "line": 606,
      "column": 23,
      "context": "variant=\"ghost\" aria-label=\"Pan right\" title=\"Pan right\" onClick={() => handlePan(-50)} >"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "x",
      "line": 633,
      "column": 32,
      "context": "<span className=\"text-sm text-muted-foreground\"> {playbackSpeed}x </span> </div> {/* Stream visibility to"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 647,
      "column": 17,
      "context": "> <Brain className=\"h-4 w-4 mr-1\" /> Emotions </Toggle> <Toggle size=\"sm\""
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 657,
      "column": 17,
      "context": "> <Eye className=\"h-4 w-4 mr-1\" /> Sensory </Toggle> <Toggle size=\"sm\""
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomalies",
      "line": 667,
      "column": 17,
      "context": "> <AlertCircle className=\"h-4 w-4 mr-1\" /> Anomalies </Toggle> </div> </div>"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "minutes",
      "line": 676,
      "column": 65,
      "context": "=\"font-medium\"> {differenceInMinutes(timeRange[1], timeRange[0])} minutes </span> <span>{format(timeRange[1], 'MMM dd, yyy"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data Streams",
      "line": 756,
      "column": 54,
      "context": "rounded-lg p-3 shadow-lg\"> <h4 className=\"font-medium text-sm mb-2\">Data Streams</h4> <div className=\"space-y-1\"> {dataStr"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Events:",
      "line": 773,
      "column": 18,
      "context": "-3 shadow-lg\"> <div className=\"text-xs space-y-1\"> <p>Events: {timelineEvents.length}</p> <p>Zoom: {Math.round(zoomLevel"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Zoom:",
      "line": 774,
      "column": 18,
      "context": "ace-y-1\"> <p>Events: {timelineEvents.length}</p> <p>Zoom: {Math.round(zoomLevel * 100)}%</p> {brushSelection && ("
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Selection:",
      "line": 776,
      "column": 20,
      "context": "nd(zoomLevel * 100)}%</p> {brushSelection && ( <p>Selection: {differenceInMinutes(brushSelection[1], brushSelection[0])} min</p>"
    },
    {
      "file": "src/components/TimelineVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "min",
      "line": 776,
      "column": 91,
      "context": "<p>Selection: {differenceInMinutes(brushSelection[1], brushSelection[0])} min</p> )} </div> </div> </div>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 60,
      "column": 13,
      "context": "ground transition-colors motion-reduce:transition-none\" > × </button> </div> <p className=\"font-medium\">{point.l"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "3D Correlation Visualization",
      "line": 360,
      "column": 11,
      "context": "Name=\"flex items-center gap-2\"> <Eye className=\"h-5 w-5\" /> 3D Correlation Visualization </CardTitle> </CardHeader> <Car"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "X Axis",
      "line": 373,
      "column": 17,
      "context": "block\" htmlFor={xAxisTriggerId} > X Axis </label> <Select value={xAxis} onValueChange="
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Y Axis",
      "line": 395,
      "column": 17,
      "context": "block\" htmlFor={yAxisTriggerId} > Y Axis </label> <Select value={yAxis} onValueChange="
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Z Axis",
      "line": 417,
      "column": 17,
      "context": "block\" htmlFor={zAxisTriggerId} > Z Axis </label> <Select value={zAxis} onValueChange="
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Color By",
      "line": 441,
      "column": 17,
      "context": "ock\" htmlFor={colorByTriggerId} > Color By </label> <Select value={colorBy} onValueCha"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Category",
      "line": 448,
      "column": 48,
      "context": "<SelectContent> <SelectItem value=\"category\">Category</SelectItem> <SelectItem value=\"intensity\">Intensity<"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Intensity",
      "line": 449,
      "column": 49,
      "context": "category\">Category</SelectItem> <SelectItem value=\"intensity\">Intensity</SelectItem> </SelectContent> </Select>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Filter Category",
      "line": 460,
      "column": 17,
      "context": "htmlFor={filterCategoryTriggerId} > Filter Category </label> <Select value={filterCatego"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "All",
      "line": 467,
      "column": 43,
      "context": "gger> <SelectContent> <SelectItem value=\"all\">All</SelectItem> <SelectItem value=\"emotion\">Emotions</SelectI"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 468,
      "column": 47,
      "context": "Item value=\"all\">All</SelectItem> <SelectItem value=\"emotion\">Emotions</SelectItem> <SelectItem value=\"sensory\">Sensory</Sel"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 469,
      "column": 47,
      "context": "e=\"emotion\">Emotions</SelectItem> <SelectItem value=\"sensory\">Sensory</SelectItem> <SelectItem value=\"environmental\">Environ"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Environmental",
      "line": 470,
      "column": 53,
      "context": "nsory\">Sensory</SelectItem> <SelectItem value=\"environmental\">Environmental</SelectItem> </SelectContent> </Sele"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Point Size:",
      "line": 477,
      "column": 17,
      "context": "={pointSizeLabelId} className=\"text-sm font-medium mb-1 block\"> Point Size: {pointSize.toFixed(2)} </p> <Slider"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reduced motion enabled",
      "line": 496,
      "column": 15,
      "context": "text-amber-800 dark:text-amber-200 px-3 py-1 rounded-md text-sm\"> Reduced motion enabled </div> )} <Canvas"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Legend",
      "line": 577,
      "column": 54,
      "context": "rounded-lg p-3 shadow-lg\"> <h4 className=\"font-medium text-sm mb-2\">Legend</h4> <div className=\"space-y-1\"> {colorBy === '"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Emotions",
      "line": 583,
      "column": 47,
      "context": "h-3 rounded-full bg-[#10B981]\" /> <span className=\"text-xs\">Emotions</span> </div> <div className=\"flex"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensory",
      "line": 587,
      "column": 47,
      "context": "h-3 rounded-full bg-[#3B82F6]\" /> <span className=\"text-xs\">Sensory</span> </div> <div className=\"flex i"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Environmental",
      "line": 591,
      "column": 47,
      "context": "h-3 rounded-full bg-[#F59E0B]\" /> <span className=\"text-xs\">Environmental</span> </div> </>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Low → High",
      "line": 598,
      "column": 45,
      "context": "a-yellow-500 to-red-500 rounded\" /> <span className=\"text-xs\">Low → High</span> </div> )} </div>"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Points:",
      "line": 606,
      "column": 18,
      "context": "-3 shadow-lg\"> <div className=\"text-xs space-y-1\"> <p>Points: {filteredPoints.length}</p> <p>Total Sessions: {trackingEn"
    },
    {
      "file": "src/components/Visualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Total Sessions:",
      "line": 607,
      "column": 18,
      "context": "ace-y-1\"> <p>Points: {filteredPoints.length}</p> <p>Total Sessions: {trackingEntries.length}</p> </div> </div>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Interactive Data Analysis -",
      "line": 107,
      "column": 11,
      "context": "\"flex items-center gap-2\"> <Activity className=\"h-5 w-5\" /> Interactive Data Analysis - {studentName} {filterCriteria.realtime &&"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Live",
      "line": 111,
      "column": 15,
      "context": "mate-pulse ml-2\"> <Wifi className=\"h-3 w-3 mr-1\" /> Live </Badge> )} </CardTitle> <div classNa"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Visualization controls",
      "line": 115,
      "column": 61,
      "context": "</CardTitle> <div className=\"flex items-center gap-2\" aria-label=\"Visualization controls\"> {/* Guided question chips */} <div"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Open filters panel",
      "line": 152,
      "column": 62,
      "context": "etTrigger asChild> <Button variant=\"outline\" size=\"sm\" aria-label=\"Open filters panel\" title=\"Open filters panel\"> <Filter classNa"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Open filters panel",
      "line": 152,
      "column": 89,
      "context": "<Button variant=\"outline\" size=\"sm\" aria-label=\"Open filters panel\" title=\"Open filters panel\"> <Filter className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Filters",
      "line": 154,
      "column": 17,
      "context": "ers panel\"> <Filter className=\"h-4 w-4 mr-2\" /> Filters {Object.keys(filterCriteria).filter(k =>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Active",
      "line": 173,
      "column": 21,
      "context": "<Badge variant=\"default\" className=\"ml-1\"> Active </Badge> )} </Button>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Advanced Filters",
      "line": 180,
      "column": 29,
      "context": "-[400px] sm:w-[540px]\"> <SheetHeader> <SheetTitle>Advanced Filters</SheetTitle> <SheetDescription>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Configure multi-dimensional filters for your data analysis",
      "line": 182,
      "column": 19,
      "context": "anced Filters</SheetTitle> <SheetDescription> Configure multi-dimensional filters for your data analysis </She"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Select layout mode",
      "line": 201,
      "column": 28,
      "context": "variant=\"outline\" size=\"sm\" aria-label=\"Select layout mode\" title=\"Select layout mode\""
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Select layout mode",
      "line": 202,
      "column": 23,
      "context": "size=\"sm\" aria-label=\"Select layout mode\" title=\"Select layout mode\" data-testid=\"layout-mode-trigger\""
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Layout",
      "line": 209,
      "column": 17,
      "context": "tMode === 'dashboard' && <Activity className=\"h-4 w-4 mr-2\" />} Layout </Button> </DropdownMenuTrigger> <D"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dashboard",
      "line": 215,
      "column": 17,
      "context": "board')}> <Activity className=\"h-4 w-4 mr-2\" /> Dashboard </DropdownMenuItem> <DropdownMenuItem onCl"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Grid View",
      "line": 219,
      "column": 17,
      "context": "('grid')}> <Grid3x3 className=\"h-4 w-4 mr-2\" /> Grid View </DropdownMenuItem> <DropdownMenuItem onCl"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Focus Mode",
      "line": 223,
      "column": 17,
      "context": "e('focus')}> <Focus className=\"h-4 w-4 mr-2\" /> Focus Mode </DropdownMenuItem> <DropdownMenuItem onC"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Comparison",
      "line": 227,
      "column": 17,
      "context": "arison')}> <Columns className=\"h-4 w-4 mr-2\" /> Comparison </DropdownMenuItem> </DropdownMenuContent>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "View options",
      "line": 234,
      "column": 62,
      "context": "nuTrigger asChild> <Button variant=\"outline\" size=\"sm\" aria-label=\"View options\" title=\"View options\"> <Settings className=\"h-4 w-"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "View options",
      "line": 234,
      "column": 83,
      "context": "<Button variant=\"outline\" size=\"sm\" aria-label=\"View options\" title=\"View options\"> <Settings className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "View",
      "line": 236,
      "column": 17,
      "context": "options\"> <Settings className=\"h-4 w-4 mr-2\" /> View </Button> </DropdownMenuTrigger> <Dro"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "2D: Emotional energy vs Sensory load (XY)",
      "line": 246,
      "column": 97,
      "context": "<DropdownMenuItem onClick={() => visualizationState.setProjectionPlane('xy')}>2D: Emotional energy vs Sensory load (XY)</DropdownMenuItem> <"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "2D: Emotional energy vs Time (XZ)",
      "line": 247,
      "column": 97,
      "context": "<DropdownMenuItem onClick={() => visualizationState.setProjectionPlane('xz')}>2D: Emotional energy vs Time (XZ)</DropdownMenuItem> <Dropdown"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "2D: Sensory load vs Time (YZ)",
      "line": 248,
      "column": 97,
      "context": "<DropdownMenuItem onClick={() => visualizationState.setProjectionPlane('yz')}>2D: Sensory load vs Time (YZ)</DropdownMenuItem> </>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Picture-in-Picture",
      "line": 261,
      "column": 17,
      "context": "<PictureInPicture2 className=\"h-4 w-4 mr-2\" /> Picture-in-Picture </DropdownMenuItem> <DropdownMenu"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Clear Highlights",
      "line": 268,
      "column": 17,
      "context": "}}> <RefreshCw className=\"h-4 w-4 mr-2\" /> Clear Highlights </DropdownMenuItem> </DropdownMenuCon"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Export analytics",
      "line": 275,
      "column": 85,
      "context": "<Button variant=\"outline\" size=\"sm\" disabled={isExporting} aria-label=\"Export analytics\" title=\"Export analytics\"> <Download className"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Export analytics",
      "line": 275,
      "column": 110,
      "context": "=\"outline\" size=\"sm\" disabled={isExporting} aria-label=\"Export analytics\" title=\"Export analytics\"> <Download className=\"h-4 w-4 mr-2\" />"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as PDF",
      "line": 286,
      "column": 17,
      "context": "> <FileText className=\"h-4 w-4 mr-2\" /> Export as PDF </DropdownMenuItem> <DropdownMenuItem"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as CSV",
      "line": 293,
      "column": 17,
      "context": "> <FileSpreadsheet className=\"h-4 w-4 mr-2\" /> Export as CSV </DropdownMenuItem> <DropdownMenuItem"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Export as JSON",
      "line": 300,
      "column": 17,
      "context": "> <FileJson className=\"h-4 w-4 mr-2\" /> Export as JSON </DropdownMenuItem> </DropdownMenuConte"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Chart Type",
      "line": 314,
      "column": 15,
      "context": "-medium\" htmlFor={chartTypeTriggerId} > Chart Type </label> <Select value={selectedChartType} on"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Line Chart",
      "line": 321,
      "column": 42,
      "context": "Trigger> <SelectContent> <SelectItem value=\"line\">Line Chart</SelectItem> <SelectItem value=\"area\">Area Chart</Sel"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Area Chart",
      "line": 322,
      "column": 42,
      "context": "m value=\"line\">Line Chart</SelectItem> <SelectItem value=\"area\">Area Chart</SelectItem> <SelectItem value=\"scatter\">Scatter Plot"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Scatter Plot",
      "line": 323,
      "column": 45,
      "context": "alue=\"area\">Area Chart</SelectItem> <SelectItem value=\"scatter\">Scatter Plot</SelectItem> <SelectItem value=\"composed\">Combined<"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Combined",
      "line": 324,
      "column": 46,
      "context": "scatter\">Scatter Plot</SelectItem> <SelectItem value=\"composed\">Combined</SelectItem> </SelectContent> </Select>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Select Emotions",
      "line": 330,
      "column": 48,
      "context": "<div className=\"space-y-2\"> <p className=\"text-sm font-medium\">Select Emotions</p> <div className=\"grid grid-cols-2 gap-2 w-64 p-2"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Time Range",
      "line": 359,
      "column": 15,
      "context": "-medium\" htmlFor={timeRangeTriggerId} > Time Range </label> <Select value={selectedTimeRange} on"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 7 days",
      "line": 366,
      "column": 40,
      "context": "ctTrigger> <SelectContent> <SelectItem value=\"7d\">Last 7 days</SelectItem> <SelectItem value=\"30d\">Last 30 days</S"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 30 days",
      "line": 367,
      "column": 41,
      "context": "tem value=\"7d\">Last 7 days</SelectItem> <SelectItem value=\"30d\">Last 30 days</SelectItem> <SelectItem value=\"90d\">Last 90 days</"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Last 90 days",
      "line": 368,
      "column": 41,
      "context": "m value=\"30d\">Last 30 days</SelectItem> <SelectItem value=\"90d\">Last 90 days</SelectItem> <SelectItem value=\"all\">All time</Sele"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "All time",
      "line": 369,
      "column": 41,
      "context": "m value=\"90d\">Last 90 days</SelectItem> <SelectItem value=\"all\">All time</SelectItem> </SelectContent> </Select>"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Data counts",
      "line": 374,
      "column": 68,
      "context": "</div> <div className=\"flex items-center gap-2 mt-8\" aria-label=\"Data counts\"> <Badge variant=\"outline\" className=\"bg-success/10 tex"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "emotions",
      "line": 376,
      "column": 46,
      "context": "0 text-success border-success/20\"> {filteredData.emotions.length} emotions </Badge> <Badge variant=\"outline\" className=\"bg"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sensory inputs",
      "line": 379,
      "column": 51,
      "context": "10 text-info border-info/20\"> {filteredData.sensoryInputs.length} sensory inputs </Badge> <Badge variant=\"outline\" classNa"
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sessions",
      "line": 382,
      "column": 53,
      "context": "primary border-primary/20\"> {filteredData.trackingEntries.length} sessions </Badge> {filterCriteria.realtime && ("
    },
    {
      "file": "src/components/VisualizationControls.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "new",
      "line": 386,
      "column": 45,
      "context": "arning/80 text-warning-foreground\"> {realtimeData.newDataCount} new </Badge> )} </div> </div>"
    },
    {
      "file": "src/components/ui/Breadcrumbs.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Breadcrumb",
      "line": 19,
      "column": 21,
      "context": "if (!items || items.length === 0) return null; return ( <nav aria-label=\"Breadcrumb\" className={cn('text-xs text-muted-foreground', className)}> <"
    },
    {
      "file": "src/components/ui/date-range-picker.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pick a date range",
      "line": 68,
      "column": 21,
      "context": "t(date.from, \"LLL dd, y\") ) ) : ( <span>Pick a date range</span> )} </Button> </PopoverTri"
    },
    {
      "file": "src/components/ui/dialog.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dialog",
      "line": 133,
      "column": 54,
      "context": "{ensureTitle && ( <DialogPrimitive.Title className=\"sr-only\">Dialog</DialogPrimitive.Title> )} {ensureDescription && ("
    },
    {
      "file": "src/components/ui/dialog.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Dialog content",
      "line": 136,
      "column": 60,
      "context": "sureDescription && ( <DialogPrimitive.Description className=\"sr-only\">Dialog content</DialogPrimitive.Description> )} {children}"
    },
    {
      "file": "src/components/ui/dialog.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Close",
      "line": 141,
      "column": 37,
      "context": "round\"> <X className=\"h-4 w-4\" /> <span className=\"sr-only\">Close</span> </DialogPrimitive.Close> </DialogPrimitive.Content>"
    },
    {
      "file": "src/components/ui/sheet.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Menu",
      "line": 102,
      "column": 53,
      "context": "> {ensureTitle && ( <SheetPrimitive.Title className=\"sr-only\">Menu</SheetPrimitive.Title> )} {ensureDescription && ("
    },
    {
      "file": "src/components/ui/sheet.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sidebar drawer",
      "line": 105,
      "column": 59,
      "context": "nsureDescription && ( <SheetPrimitive.Description className=\"sr-only\">Sidebar drawer</SheetPrimitive.Description> )} {children}"
    },
    {
      "file": "src/components/ui/sheet.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Close",
      "line": 110,
      "column": 37,
      "context": "ndary\"> <X className=\"h-4 w-4\" /> <span className=\"sr-only\">Close</span> </SheetPrimitive.Close> </SheetPrimitive.Content>"
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Toggle Sidebar",
      "line": 280,
      "column": 33,
      "context": "}} {...props} > <PanelLeft /> <span className=\"sr-only\">Toggle Sidebar</span> </Button> ) }) SidebarTrigger.displayName = \"Sidebar"
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Toggle Sidebar",
      "line": 296,
      "column": 18,
      "context": "return ( <button ref={ref} data-sidebar=\"rail\" aria-label=\"Toggle Sidebar\" tabIndex={-1} onClick={toggleSidebar} title=\""
    },
    {
      "file": "src/components/ui/sidebar.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Toggle Sidebar",
      "line": 299,
      "column": 13,
      "context": "=\"Toggle Sidebar\" tabIndex={-1} onClick={toggleSidebar} title=\"Toggle Sidebar\" className={cn( \"absolute inset-y-0 z-20 hidden w-"
    },
    {
      "file": "src/components/tegn/TegnXPBar.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "XP progress",
      "line": 7,
      "column": 90,
      "context": "className=\"w-full bg-muted/50 border border-border rounded-full h-3\" aria-label=\"XP progress\"> <div className=\"bg-primary h-3 rounded-full transit"
    },
    {
      "file": "src/components/tegn/TegnXPBar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Level",
      "line": 17,
      "column": 59,
      "context": "} progress`} /> <div className=\"mt-1 text-xs text-muted-foreground\">Level {level} · {progressThisLevel}/100 XP</div> </div> ); };"
    },
    {
      "file": "src/components/tegn/TegnXPBar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "·",
      "line": 17,
      "column": 73,
      "context": "/> <div className=\"mt-1 text-xs text-muted-foreground\">Level {level} · {progressThisLevel}/100 XP</div> </div> ); };"
    },
    {
      "file": "src/components/tegn/TegnXPBar.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "/100 XP",
      "line": 17,
      "column": 94,
      "context": "assName=\"mt-1 text-xs text-muted-foreground\">Level {level} · {progressThisLevel}/100 XP</div> </div> ); };"
    },
    {
      "file": "src/components/tegn/WebcamPreview.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Webcam preview",
      "line": 51,
      "column": 20,
      "context": "rrored && 'scale-x-[-1]')} playsInline muted aria-label=\"Webcam preview\" /> </div> ); };"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "ai-analysis-toggle-label",
      "line": 126,
      "column": 29,
      "context": "efaults.available} aria-checked={useAI} aria-labelledby=\"ai-analysis-toggle-label\" aria-describedby=\"ai-analysis-toggle-desc"
    },
    {
      "file": "src/components/profile-sections/AnalyticsSection.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-describedby attribute",
      "value": "ai-analysis-toggle-desc",
      "line": 127,
      "column": 30,
      "context": "aria-labelledby=\"ai-analysis-toggle-label\" aria-describedby=\"ai-analysis-toggle-desc\" data-testid=\"ai-toggle\" />"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Oversikt",
      "line": 87,
      "column": 46,
      "context": "er justify-between\"> <div> <h2 className=\"text-2xl font-bold\">Oversikt</h2> <p className=\"text-muted-foreground\"> Sammen"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sammendrag av",
      "line": 89,
      "column": 13,
      "context": "bold\">Oversikt</h2> <p className=\"text-muted-foreground\"> Sammendrag av {student.name}s data og aktivitet </p> </div>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "s data og aktivitet",
      "line": 89,
      "column": 41,
      "context": "<p className=\"text-muted-foreground\"> Sammendrag av {student.name}s data og aktivitet </p> </div> <Button onCl"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Analysestatus",
      "line": 106,
      "column": 13,
      "context": "items-center gap-2\"> <BarChart3 className=\"h-5 w-5\" /> Analysestatus </CardTitle> </CardHeader> <CardContent>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Datakvalitet",
      "line": 180,
      "column": 13,
      "context": "\"flex items-center gap-2\"> <Info className=\"h-5 w-5\" /> Datakvalitet </CardTitle> </CardHeader> <CardContent>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Samlet kvalitetsscore",
      "line": 186,
      "column": 60,
      "context": "\"> <div> <p className=\"text-sm text-muted-foreground\">Samlet kvalitetsscore</p> <p className=\"text-3xl font-bold\">{dataQ"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI-genererte innsikter",
      "line": 247,
      "column": 15,
      "context": "\"> <TrendingUp className=\"h-5 w-5 animate-pulse\" /> AI-genererte innsikter </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI-genererte innsikter",
      "line": 262,
      "column": 15,
      "context": "s-center gap-2\"> <TrendingUp className=\"h-5 w-5\" /> AI-genererte innsikter </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/profile-sections/DashboardSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Nylige økter",
      "line": 280,
      "column": 54,
      "context": "gth > 0 && ( <div> <h3 className=\"text-lg font-semibold mb-4\">Nylige økter</h3> <PaginatedSessionsList sessions={filteredData.entrie"
    },
    {
      "file": "src/components/profile-sections/ToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Verktøy",
      "line": 90,
      "column": 44,
      "context": "6\"> {/* Header */} <div> <h2 className=\"text-2xl font-bold\">Verktøy</h2> <p className=\"text-muted-foreground\"> Avanserte v"
    },
    {
      "file": "src/components/profile-sections/ToolsSection.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Avanserte verktøy for søk, maler og sammenligning",
      "line": 92,
      "column": 11,
      "context": "font-bold\">Verktøy</h2> <p className=\"text-muted-foreground\"> Avanserte verktøy for søk, maler og sammenligning </p> </div>"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading Interactive Visualization...",
      "line": 12,
      "column": 9,
      "context": "s-center gap-2\"> <Activity className=\"h-5 w-5 animate-pulse\" /> Loading Interactive Visualization... </CardTitle> </CardHeader> <C"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Failed to load Interactive Visualization",
      "line": 39,
      "column": 9,
      "context": "er gap-2 text-destructive\"> <AlertCircle className=\"h-5 w-5\" /> Failed to load Interactive Visualization </CardTitle> </CardHeader>"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "The interactive data visualization component could not be loaded. \n        This might be due to missing dependencies or a temporary loading issue.",
      "line": 44,
      "column": 9,
      "context": "> <CardContent> <p className=\"text-sm text-muted-foreground\"> The interactive data visualization component could not be loaded. This"
    },
    {
      "file": "src/components/lazy/LazyInteractiveDataVisualization.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Please refresh the page or contact support if the issue persists.",
      "line": 48,
      "column": 9,
      "context": "ue. </p> <p className=\"text-sm text-muted-foreground mt-2\"> Please refresh the page or contact support if the issue persists. </p>"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading component...",
      "line": 21,
      "column": 56,
      "context": "to mb-4 text-primary\" /> <p className=\"text-sm text-muted-foreground\">Loading component...</p> </div> </div> <div className=\"space"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Failed to load component",
      "line": 37,
      "column": 53,
      "context": "iv className=\"text-center\"> <p className=\"text-destructive font-medium\">Failed to load component</p> <p className=\"text-sm text-muted-foreground"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Please refresh the page or try again later.",
      "line": 39,
      "column": 11,
      "context": "ponent</p> <p className=\"text-sm text-muted-foreground mt-2\"> Please refresh the page or try again later. </p> </div> </Card"
    },
    {
      "file": "src/components/lazy/LazyLoadWrapper.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "LazyLoadWrapper Error:",
      "line": 81,
      "column": 18,
      "context": "componentDidCatch(error: Error, errorInfo: React.ErrorInfo) { logger.error('LazyLoadWrapper Error:', error, errorInfo); } render() { if (this.stat"
    },
    {
      "file": "src/components/lazy/LazyReportBuilder.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading Report Builder...",
      "line": 11,
      "column": 9,
      "context": "s-center gap-2\"> <FileText className=\"h-5 w-5 animate-pulse\" /> Loading Report Builder... </CardTitle> </CardHeader> <CardContent"
    },
    {
      "file": "src/components/lazy/LazyVisualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "3D Correlation Visualization",
      "line": 27,
      "column": 9,
      "context": "lassName=\"flex items-center gap-2\"> <Eye className=\"h-5 w-5\" /> 3D Correlation Visualization </CardTitle> </CardHeader> <CardConte"
    },
    {
      "file": "src/components/lazy/LazyVisualization3D.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Loading 3D visualization...",
      "line": 52,
      "column": 58,
      "context": "d-full mx-auto\"></div> <p className=\"text-sm text-muted-foreground\">Loading 3D visualization...</p> </div> </div> </div>"
    },
    {
      "file": "src/components/layouts/DashboardLayout.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "↔",
      "line": 139,
      "column": 107,
      "context": "air.factor1.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} ↔{' '} {pair.factor2.replace(/([A-Z])/g, ' $1').replace("
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[UI] split.collapse.change",
      "line": 64,
      "column": 47,
      "context": "dRight(v); persist(ratio, v); try { onCollapsedChange?.(v); logger.info('[UI] split.collapse.change', { collapsed: v }); } catch {} }; const clampR"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[UI] split.drag.start",
      "line": 80,
      "column": 42,
      "context": "startRatio = ratio; let frame = 0; try { onResizeStart?.(); logger.info('[UI] split.drag.start'); } catch {} const move = (clientX: number) => {"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[UI] split.drag.end",
      "line": 97,
      "column": 47,
      "context": "; const onPointerUp = () => { try { onResizeEnd?.(ratio); logger.info('[UI] split.drag.end', { ratio }); } catch {} persist(ratio); window"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Resizer",
      "line": 148,
      "column": 20,
      "context": "or\" aria-orientation=\"vertical\" tabIndex={0} aria-label=\"Resizer\" onPointerDown={onPointerDown} onKeyDown={onKeyDown}"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Dra for å endre størrelse",
      "line": 158,
      "column": 22,
      "context": "outline-none focus-visible:ring-2 focus-visible:ring-ring\" aria-label=\"Dra for å endre størrelse\" title=\"Dra for å endre størrelse • Dobbelt"
    },
    {
      "file": "src/components/layouts/ResizableSplitLayout.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Dra for å endre størrelse • Dobbeltklikk for å nullstille • Enter for å skjule/vis",
      "line": 159,
      "column": 17,
      "context": "ble:ring-ring\" aria-label=\"Dra for å endre størrelse\" title=\"Dra for å endre størrelse • Dobbeltklikk for å nullstille • Enter for å skjule/"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Select visualizations to display",
      "line": 21,
      "column": 36,
      "context": "sName=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p className=\"text-lg\">Select visualizations to display</p> <p className=\"text-sm\">Choose f"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Choose from the options above",
      "line": 22,
      "column": 36,
      "context": "ext-lg\">Select visualizations to display</p> <p className=\"text-sm\">Choose from the options above</p> </div> </CardContent>"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Select a visualization to focus on",
      "line": 49,
      "column": 36,
      "context": "sName=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p className=\"text-lg\">Select a visualization to focus on</p> <p className=\"text-sm\">Choose"
    },
    {
      "file": "src/components/layouts/VisualizationLayouts.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Choose from the options above",
      "line": 50,
      "column": 36,
      "context": "t-lg\">Select a visualization to focus on</p> <p className=\"text-sm\">Choose from the options above</p> </div> </CardContent>"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Env / AI Debug",
      "line": 29,
      "column": 20,
      "context": "=\"bg-gradient-card border-0 shadow-soft\"> <CardHeader> <CardTitle>Env / AI Debug</CardTitle> </CardHeader> <CardContent className=\"tex"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI enabled (loadAiConfig):",
      "line": 32,
      "column": 14,
      "context": "</CardHeader> <CardContent className=\"text-sm space-y-1\"> <div>AI enabled (loadAiConfig): <strong>{String(ai.enabled)}</strong></div> <"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Model (loadAiConfig):",
      "line": 33,
      "column": 14,
      "context": "nabled (loadAiConfig): <strong>{String(ai.enabled)}</strong></div> <div>Model (loadAiConfig): <code>{ai.modelName || '(none)'}</code></div> <div"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "API key present (loadAiConfig):",
      "line": 34,
      "column": 14,
      "context": "odel (loadAiConfig): <code>{ai.modelName || '(none)'}</code></div> <div>API key present (loadAiConfig): <strong>{String(!!ai.apiKey)}</strong> <span cla"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Base URL (loadAiConfig):",
      "line": 35,
      "column": 14,
      "context": "assName=\"text-muted-foreground\">({masked(ai.apiKey)})</span></div> <div>Base URL (loadAiConfig): <code>{String((ai as any).baseUrl || 'https://openroute"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Local only (loadAiConfig):",
      "line": 36,
      "column": 14,
      "context": "i as any).baseUrl || 'https://openrouter.ai/api/v1')}</code></div> <div>Local only (loadAiConfig): <strong>{String((ai as any).localOnly || false)}</str"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI enabled (live env):",
      "line": 37,
      "column": 31,
      "context": "g((ai as any).localOnly || false)}</strong></div> <div className=\"mt-2\">AI enabled (live env): <strong>{String(aiLive.enabled)}</strong></div> <"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Model (live env):",
      "line": 38,
      "column": 14,
      "context": "nabled (live env): <strong>{String(aiLive.enabled)}</strong></div> <div>Model (live env): <code>{aiLive.modelName}</code></div> <div>API key pre"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "API key present (live env):",
      "line": 39,
      "column": 14,
      "context": "<div>Model (live env): <code>{aiLive.modelName}</code></div> <div>API key present (live env): <strong>{String(!!aiLive.apiKey)}</strong> <span cla"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Base URL (live env):",
      "line": 40,
      "column": 14,
      "context": "ame=\"text-muted-foreground\">({masked(aiLive.apiKey)})</span></div> <div>Base URL (live env): <code>{aiLive.baseUrl}</code></div> <div className="
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Live Vite env:",
      "line": 41,
      "column": 53,
      "context": "iLive.baseUrl}</code></div> <div className=\"mt-2 text-muted-foreground\">Live Vite env:</div> <div>VITE_OPENROUTER_API_KEY present: <strong>{Stri"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "VITE_OPENROUTER_API_KEY present:",
      "line": 42,
      "column": 14,
      "context": "<div className=\"mt-2 text-muted-foreground\">Live Vite env:</div> <div>VITE_OPENROUTER_API_KEY present: <strong>{String(!!env.VITE_OPENROUTER_API_KEY)}"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "VITE_AI_ANALYSIS_ENABLED:",
      "line": 43,
      "column": 14,
      "context": "d-foreground\">({masked(env.VITE_OPENROUTER_API_KEY)})</span></div> <div>VITE_AI_ANALYSIS_ENABLED: <code>{String(env.VITE_AI_ANALYSIS_ENABLED)}</code></d"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "VITE_AI_MODEL_NAME:",
      "line": 44,
      "column": 14,
      "context": "ENABLED: <code>{String(env.VITE_AI_ANALYSIS_ENABLED)}</code></div> <div>VITE_AI_MODEL_NAME: <code>{String(env.VITE_AI_MODEL_NAME)}</code></div>"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "VITE_AI_LOCAL_ONLY:",
      "line": 45,
      "column": 14,
      "context": "AI_MODEL_NAME: <code>{String(env.VITE_AI_MODEL_NAME)}</code></div> <div>VITE_AI_LOCAL_ONLY: <code>{String(env.VITE_AI_LOCAL_ONLY || false)}</code></div>"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "VITE_AI_BASE_URL:",
      "line": 46,
      "column": 14,
      "context": "ONLY: <code>{String(env.VITE_AI_LOCAL_ONLY || false)}</code></div> <div>VITE_AI_BASE_URL: <code>{String(env.VITE_AI_BASE_URL || '(default)')}</code></di"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "localStorage OPENROUTER_API_KEY present:",
      "line": 47,
      "column": 31,
      "context": "nv.VITE_AI_BASE_URL || '(default)')}</code></div> <div className=\"mt-1\">localStorage OPENROUTER_API_KEY present: <strong>{String(!!lsKey)}</strong> <spa"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Tip: set with",
      "line": 48,
      "column": 56,
      "context": "ed(lsKey)})</span></div> <div className=\"text-xs text-muted-foreground\">Tip: set with <code>localStorage.setItem('OPENROUTER_API_KEY', 'sk-or-…')</code>"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "localStorage.setItem('OPENROUTER_API_KEY', 'sk-or-…')",
      "line": 48,
      "column": 76,
      "context": "div> <div className=\"text-xs text-muted-foreground\">Tip: set with <code>localStorage.setItem('OPENROUTER_API_KEY', 'sk-or-…')</code></div> <div"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Note: Module-level constants can be stale after env changes; the app uses live env shown above.",
      "line": 49,
      "column": 48,
      "context": "PI_KEY', 'sk-or-…')</code></div> <div className=\"text-muted-foreground\">Note: Module-level constants can be stale after env changes; the app uses live e"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Mode:",
      "line": 50,
      "column": 14,
      "context": "stale after env changes; the app uses live env shown above.</div> <div>Mode: <code>{String(env.MODE)}</code></div> {/* AI Telemetry */}"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI Telemetry",
      "line": 54,
      "column": 45,
      "context": "-4 pt-3 border-t border-border/50\"> <div className=\"font-medium mb-1\">AI Telemetry</div> {(() => { const s = aiMetrics.summary()"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Requests:",
      "line": 60,
      "column": 22,
      "context": "className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs\"> <div>Requests: <strong>{s.requests}</strong></div> <div>Success: <str"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Success:",
      "line": 61,
      "column": 22,
      "context": "<div>Requests: <strong>{s.requests}</strong></div> <div>Success: <strong>{s.successes}</strong></div> <div>Failures: <st"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Failures:",
      "line": 62,
      "column": 22,
      "context": "<div>Success: <strong>{s.successes}</strong></div> <div>Failures: <strong>{s.failures}</strong></div> <div>Retries: <str"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Retries:",
      "line": 63,
      "column": 22,
      "context": "<div>Failures: <strong>{s.failures}</strong></div> <div>Retries: <strong>{s.retries}</strong></div> <div>JSON valid: <st"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "JSON valid:",
      "line": 64,
      "column": 22,
      "context": "<div>Retries: <strong>{s.retries}</strong></div> <div>JSON valid: <strong>{s.jsonValid}</strong></div> <div>Parse erro"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Parse errors:",
      "line": 65,
      "column": 22,
      "context": "<div>JSON valid: <strong>{s.jsonValid}</strong></div> <div>Parse errors: <strong>{s.jsonParseErrors}</strong></div> <div>Va"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Validate errors:",
      "line": 66,
      "column": 22,
      "context": "v>Parse errors: <strong>{s.jsonParseErrors}</strong></div> <div>Validate errors: <strong>{s.jsonValidateErrors}</strong></div> <"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Avg latency:",
      "line": 67,
      "column": 22,
      "context": "date errors: <strong>{s.jsonValidateErrors}</strong></div> <div>Avg latency: <strong>{s.avgLatency} ms</strong></div> <div class"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "ms",
      "line": 67,
      "column": 58,
      "context": "Errors}</strong></div> <div>Avg latency: <strong>{s.avgLatency} ms</strong></div> <div className=\"col-span-2\">JSON gyldighet (gl"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "JSON gyldighet (global):",
      "line": 68,
      "column": 45,
      "context": "ng>{s.avgLatency} ms</strong></div> <div className=\"col-span-2\">JSON gyldighet (global): <strong>{pct}%</strong></div> <div clas"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sist oppdatert:",
      "line": 69,
      "column": 67,
      "context": "strong></div> <div className=\"col-span-2 text-muted-foreground\">Sist oppdatert: {new Date(s.lastUpdated).toLocaleString()}</div> <"
    },
    {
      "file": "src/components/dev/EnvDebug.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Reset telemetry",
      "line": 74,
      "column": 83,
      "context": "<Button size=\"sm\" variant=\"outline\" onClick={() => aiMetrics.reset()}>Reset telemetry</Button> </div> </div> </CardContent>"
    },
    {
      "file": "src/components/dev/ModelDiagnosticsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[ModelDiagnosticsPanel] Failed to run time-series CV",
      "line": 177,
      "column": 20,
      "context": "const err = e instanceof Error ? e : new Error(String(e)); logger.error('[ModelDiagnosticsPanel] Failed to run time-series CV', { error: err }); a"
    },
    {
      "file": "src/components/dev/ModelDiagnosticsPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "model-diagnostics-heading",
      "line": 216,
      "column": 30,
      "context": "st itemHeight = 56; // px per item row return ( <section aria-labelledby=\"model-diagnostics-heading\" role=\"region\" className={props.className}> <a"
    },
    {
      "file": "src/components/charts/EChartContainer.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[EChartContainer] Option normalization failed",
      "line": 387,
      "column": 22,
      "context": "tion; } catch (e) { if (import.meta?.env?.DEV) { logger.error(\"[EChartContainer] Option normalization failed\", { error: e }); } re"
    },
    {
      "file": "src/components/charts/EChartContainer.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "[EChartContainer] Theme merge failed",
      "line": 459,
      "column": 22,
      "context": "tion; } catch (e) { if (import.meta?.env?.DEV) { logger.error(\"[EChartContainer] Theme merge failed\", { error: e, optionP"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No data available for selected time range",
      "line": 37,
      "column": 16,
      "context": "<Activity className=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p>No data available for selected time range</p> <p className=\"text-xs"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Try expanding the time range or adjusting filters",
      "line": 38,
      "column": 41,
      "context": "a available for selected time range</p> <p className=\"text-xs mt-1\">Try expanding the time range or adjusting filters</p> </div> <"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading trends",
      "line": 79,
      "column": 123,
      "context": "Name=\"h-[400px] rounded-xl border bg-card motion-safe:animate-pulse\" aria-label=\"Loading trends\" />}> <EChartContainer option={option}"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "TrendsChart.renderChart failed",
      "line": 89,
      "column": 18,
      "context": "/> </React.Suspense> ); } catch (error) { logger.error(\"TrendsChart.renderChart failed\", { error }); return ( <div className="
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Could not render chart",
      "line": 94,
      "column": 14,
      "context": "<Activity className=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p>Could not render chart</p> <p className=\"text-xs mt-1\">An internal err"
    },
    {
      "file": "src/components/charts/TrendsChart.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "An internal error occurred while building the chart",
      "line": 95,
      "column": 39,
      "context": "> <p>Could not render chart</p> <p className=\"text-xs mt-1\">An internal error occurred while building the chart</p> </div> </d"
    },
    {
      "file": "src/components/analytics-panels/ChatComposer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Send",
      "line": 64,
      "column": 96,
      "context": "onClick={onSubmit} disabled={disabled || pending || value.trim().length === 0}>Send</Button> </div> </div> ); }"
    },
    {
      "file": "src/components/analytics-panels/CorrelationsPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading correlations",
      "line": 72,
      "column": 131,
      "context": "Name=\"h-[420px] rounded-xl border bg-card motion-safe:animate-pulse\" aria-label=\"Loading correlations\" />}> <EChartContainer option={option} he"
    },
    {
      "file": "src/components/analytics-panels/CorrelationsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "↔",
      "line": 97,
      "column": 49,
      "context": "=\"font-medium text-foreground\"> {correlation.factor1} ↔ {correlation.factor2} </h4> <p"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Detaljer",
      "line": 51,
      "column": 23,
      "context": "right\" className=\"max-w-md w-full\"> <SheetHeader> <SheetTitle>Detaljer</SheetTitle> </SheetHeader> {!source && ( <di"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen data",
      "line": 54,
      "column": 63,
      "context": "{!source && ( <div className=\"mt-4 text-sm text-muted-foreground\">Ingen data</div> )} {source && ( <div className=\"mt-4"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Notat",
      "line": 64,
      "column": 46,
      "context": "<div className=\"text-sm\"> <div className=\"font-medium\">Notat</div> <div className=\"whitespace-pre-wrap break-words\">{so"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Følelser",
      "line": 70,
      "column": 54,
      "context": "th ? ( <div> <div className=\"text-sm font-medium\">Følelser</div> <ul className=\"mt-1 text-sm list-disc pl-5\">"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Sensorikk",
      "line": 80,
      "column": 54,
      "context": "th ? ( <div> <div className=\"text-sm font-medium\">Sensorikk</div> <ul className=\"mt-1 text-sm list-disc pl-5\">"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kontekst",
      "line": 90,
      "column": 54,
      "context": "t) ? ( <div> <div className=\"text-sm font-medium\">Kontekst</div> <div className=\"text-sm text-muted-foreground\">"
    },
    {
      "file": "src/components/analytics-panels/EntryDetailsDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kopier som tekst",
      "line": 108,
      "column": 72,
      "context": "=\"pt-2\"> <Button variant=\"outline\" size=\"sm\" onClick={copyAsText}>Kopier som tekst</Button> </div> </div> )} <"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Kunne ikke hente AI-svar",
      "line": 78,
      "column": 19,
      "context": "{ textareaRef.current?.focus(); } catch {} } catch (e) { toast.error('Kunne ikke hente AI-svar'); } finally { setPending(false); } };"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Kunne ikke hente AI-svar",
      "line": 78,
      "column": 19,
      "context": "{ textareaRef.current?.focus(); } catch {} } catch (e) { toast.error('Kunne ikke hente AI-svar'); } finally { setPending(false); } };"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "AI",
      "line": 154,
      "column": 63,
      "context": "ustify-start'}`}> {m.role !== 'user' && <span className=\"sr-only\">AI</span>} <div className={`rounded px-3 py-2 text-sm leading-rela"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Kopier melding",
      "line": 161,
      "column": 28,
      "context": "ded border text-muted-foreground hover:bg-accent/40\" aria-label=\"Kopier melding\" title=\"Kopier melding\" onClick="
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Kopier melding",
      "line": 162,
      "column": 23,
      "context": "bg-accent/40\" aria-label=\"Kopier melding\" title=\"Kopier melding\" onClick={async () => { try {"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Toggle kildeliste",
      "line": 186,
      "column": 19,
      "context": "n rounded px-1 py-1 text-muted-foreground hover:bg-accent/30\" title=\"Toggle kildeliste\" > <span className=\"font-medium\">Kilder"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kilder fra data (",
      "line": 188,
      "column": 43,
      "context": "title=\"Toggle kildeliste\" > <span className=\"font-medium\">Kilder fra data ({sList.length})</span> <span className={`inline-fle"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Klikk for å skjule",
      "line": 191,
      "column": 52,
      "context": "{!sourcesCollapsed && ( <span className=\"hidden sm:inline\">Klikk for å skjule</span> )} {sourcesCollapsed && ("
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Klikk for å vise",
      "line": 194,
      "column": 52,
      "context": "{sourcesCollapsed && ( <span className=\"hidden sm:inline\">Klikk for å vise</span> )} <ChevronDown className={`"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kilder fra data (",
      "line": 244,
      "column": 83,
      "context": "<summary className=\"cursor-pointer select-none text-muted-foreground\">Kilder fra data ({sources.length})</summary> <ul className=\"mt-2 lis"
    },
    {
      "file": "src/components/analytics-panels/ExplanationChat.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Henvisninger",
      "line": 256,
      "column": 55,
      "context": "bg-muted/30 p-2 text-xs\"> <div className=\"mb-1 text-muted-foreground\">Henvisninger</div> <div className=\"flex flex-wrap gap-1\">"
    },
    {
      "file": "src/components/analytics-panels/ExplanationContent.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Kopier tekst",
      "line": 36,
      "column": 24,
      "context": "onClick={() => hasText && onCopy?.(text as string)} aria-label=\"Kopier tekst\" title=\"Kopier tekst\" > <Copy cl"
    },
    {
      "file": "src/components/analytics-panels/ExplanationContent.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Kopier tekst",
      "line": 37,
      "column": 19,
      "context": "Copy?.(text as string)} aria-label=\"Kopier tekst\" title=\"Kopier tekst\" > <Copy className=\"h-4 w-4 mr-2\" />Kopier"
    },
    {
      "file": "src/components/analytics-panels/ExplanationContent.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kopier",
      "line": 39,
      "column": 46,
      "context": "title=\"Kopier tekst\" > <Copy className=\"h-4 w-4 mr-2\" />Kopier </Button> <Button variant=\"secondary\""
    },
    {
      "file": "src/components/analytics-panels/ExplanationContent.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Legg til i rapport",
      "line": 46,
      "column": 24,
      "context": "Click={() => hasText && onAddToReport?.(text as string)} aria-label=\"Legg til i rapport\" title=\"Legg til i rapport\" >"
    },
    {
      "file": "src/components/analytics-panels/ExplanationContent.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Legg til i rapport",
      "line": 47,
      "column": 19,
      "context": "(text as string)} aria-label=\"Legg til i rapport\" title=\"Legg til i rapport\" > <FileText className=\"h-4 w-4 mr-2\""
    },
    {
      "file": "src/components/analytics-panels/ExplanationContent.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Rapport",
      "line": 49,
      "column": 50,
      "context": "egg til i rapport\" > <FileText className=\"h-4 w-4 mr-2\" />Rapport </Button> </div> </div> <div className=\"m"
    },
    {
      "file": "src/components/analytics-panels/ExplanationContent.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Henter forklaring…",
      "line": 56,
      "column": 48,
      "context": "{status === 'loading' && ( <p className=\"text-muted-foreground\">Henter forklaring…</p> )} {status === 'error' && ( <p"
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Forklaring",
      "line": 77,
      "column": 20,
      "context": "return ( <Card className=\"h-full\"> <CardHeader> <CardTitle>Forklaring</CardTitle> </CardHeader> <CardContent className=\"h-[calc"
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Data readiness for sosiale triggere",
      "line": 81,
      "column": 107,
      "context": "adinessDetailsRef} className=\"mb-2 rounded border px-3 py-2 text-xs\" aria-label=\"Data readiness for sosiale triggere\"> <summary className=\"cursor-po"
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data readiness for sosiale triggere:",
      "line": 84,
      "column": 17,
      "context": "s.label === 'partial' ? 'text-yellow-500' : 'text-orange-500'}> Data readiness for sosiale triggere: {Math.round(readiness.score * 100)}% ({read"
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Legg til sosiale eksempler (dev)",
      "line": 101,
      "column": 23,
      "context": "a(dataset.entries[0].studentId); }} > Legg til sosiale eksempler (dev) </Button>"
    },
    {
      "file": "src/components/analytics-panels/ExplanationDock.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Chat om forklaringen",
      "line": 139,
      "column": 78,
      "context": "\"> <h5 className=\"mb-2 text-sm font-medium text-muted-foreground\">Chat om forklaringen</h5> <ExplanationChat aiEnabl"
    },
    {
      "file": "src/components/analytics-panels/ExplanationSheet.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Forklaring",
      "line": 66,
      "column": 23,
      "context": "\" className=\"h-[75vh] md:h-[80vh]\"> <SheetHeader> <SheetTitle>Forklaring</SheetTitle> </SheetHeader> <div className=\"mt-2 h-[c"
    },
    {
      "file": "src/components/analytics-panels/ExplanationSheet.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Chat om forklaringen",
      "line": 98,
      "column": 80,
      "context": "<h5 className=\"mb-2 text-sm font-medium text-muted-foreground\">Chat om forklaringen</h5> <ExplanationChat aiE"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[UI] explanationV2.tabChange",
      "line": 67,
      "column": 23,
      "context": "ring) => { setTab(val); writeStorage('tab', val); try { logger.info('[UI] explanationV2.tabChange', { tab: val, pattern: patternTitle }); } catch {}"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Chat",
      "line": 111,
      "column": 39,
      "context": "tify-between gap-2\"> <TabsList> <TabsTrigger value=\"chat\">Chat</TabsTrigger> <TabsTrigger value=\"kilder\">Kilder</TabsTrigger>"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kilder",
      "line": 112,
      "column": 41,
      "context": "Trigger value=\"chat\">Chat</TabsTrigger> <TabsTrigger value=\"kilder\">Kilder</TabsTrigger> <TabsTrigger value=\"henvisninger\">Henvisninger<"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Henvisninger",
      "line": 113,
      "column": 47,
      "context": "lue=\"kilder\">Kilder</TabsTrigger> <TabsTrigger value=\"henvisninger\">Henvisninger</TabsTrigger> </TabsList> <div className=\"flex"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Skjul alt",
      "line": 119,
      "column": 21,
      "context": "py-1 text-[11px] text-muted-foreground hover:bg-accent/40\" title=\"Skjul alt\" onClick={() => { try { window.dispatch"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[UI] explanationV2.collapseAll",
      "line": 121,
      "column": 103,
      "context": "window.dispatchEvent(new CustomEvent('explanationV2:collapseAll')); logger.info('[UI] explanationV2.collapseAll'); } catch {} setShowAllKilder(f"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Skjul alt",
      "line": 125,
      "column": 15,
      "context": "setShowAllKilder(false); }} > Skjul alt </button> <button type=\"button\""
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXAttribute",
      "detail": "Static title attribute",
      "value": "Vis alt",
      "line": 130,
      "column": 21,
      "context": "py-1 text-[11px] text-muted-foreground hover:bg-accent/40\" title=\"Vis alt\" onClick={() => { try { window.dispatchEv"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "[UI] explanationV2.expandAll",
      "line": 132,
      "column": 101,
      "context": "{ window.dispatchEvent(new CustomEvent('explanationV2:expandAll')); logger.info('[UI] explanationV2.expandAll'); } catch {} setShowAllKilder(tru"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Vis alt",
      "line": 136,
      "column": 15,
      "context": "setShowAllKilder(true); }} > Vis alt </button> </div> </div> <TabsCont"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Åpne fanen for å laste kilder…",
      "line": 164,
      "column": 60,
      "context": "!visited.kilder ? ( <div className=\"text-sm text-muted-foreground\">Åpne fanen for å laste kilder…</div> ) : sourcesList.length === 0 ? ("
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen kilder tilgjengelig.",
      "line": 166,
      "column": 60,
      "context": "ist.length === 0 ? ( <div className=\"text-sm text-muted-foreground\">Ingen kilder tilgjengelig.</div> ) : ( <div className=\"spa"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Kilder fra data (",
      "line": 170,
      "column": 64,
      "context": "ustify-between\"> <div className=\"text-sm text-muted-foreground\">Kilder fra data ({sourcesList.length})</div> <button"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Åpne fanen for å vise henvisninger…",
      "line": 208,
      "column": 60,
      "context": "ted.henvisninger ? ( <div className=\"text-sm text-muted-foreground\">Åpne fanen for å vise henvisninger…</div> ) : sourcesList.length === 0"
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Ingen henvisninger.",
      "line": 210,
      "column": 60,
      "context": "ist.length === 0 ? ( <div className=\"text-sm text-muted-foreground\">Ingen henvisninger.</div> ) : ( <div className=\"space-y-2\""
    },
    {
      "file": "src/components/analytics-panels/ExplanationTabs.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Henvisninger",
      "line": 213,
      "column": 62,
      "context": "sName=\"space-y-2\"> <div className=\"text-sm text-muted-foreground\">Henvisninger</div> <div className=\"flex flex-wrap gap-1\">"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: success()",
      "value": "Kopiert til utklippstavlen",
      "line": 279,
      "column": 21,
      "context": "try { await navigator.clipboard.writeText(text); toast.success('Kopiert til utklippstavlen'); } catch { toast.error('Kunne ikke kopie"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.success()",
      "value": "Kopiert til utklippstavlen",
      "line": 279,
      "column": 21,
      "context": "try { await navigator.clipboard.writeText(text); toast.success('Kopiert til utklippstavlen'); } catch { toast.error('Kunne ikke kopie"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Kunne ikke kopiere",
      "line": 281,
      "column": 19,
      "context": "toast.success('Kopiert til utklippstavlen'); } catch { toast.error('Kunne ikke kopiere'); } }; const handleAddToReport = (text: string) =>"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.error()",
      "value": "Kunne ikke kopiere",
      "line": 281,
      "column": 19,
      "context": "toast.success('Kopiert til utklippstavlen'); } catch { toast.error('Kunne ikke kopiere'); } }; const handleAddToReport = (text: string) =>"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: info()",
      "value": "Lagt til i rapportutkast",
      "line": 287,
      "column": 22,
      "context": "> { // Placeholder for integration with report builder try { toast.info('Lagt til i rapportutkast'); } catch {} }; const current = selectedKey ? ex"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "sonner toast.info()",
      "value": "Lagt til i rapportutkast",
      "line": 287,
      "column": 22,
      "context": "> { // Placeholder for integration with report builder try { toast.info('Lagt til i rapportutkast'); } catch {} }; const current = selectedKey ? ex"
    },
    {
      "file": "src/components/analytics-panels/PatternsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "•",
      "line": 577,
      "column": 68,
      "context": "tart gap-2\"> <span className=\"text-primary\">•</span> <span>{rec}</span>"
    },
    {
      "file": "src/components/analytics/FiltersDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 200,
      "column": 31,
      "context": "}))} > × </button> </Badge>"
    },
    {
      "file": "src/components/analytics/FiltersDrawer.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "×",
      "line": 238,
      "column": 31,
      "context": "}))} > × </button> </Badge>"
    },
    {
      "file": "src/components/analytics/panels/AlertsPanel.tsx",
      "kind": "MessageAPI",
      "detail": "Message API call: error()",
      "value": "Failed to resolve alert in pinned rail",
      "line": 135,
      "column": 20,
      "context": "tAnalytics('alerts.resolveSuccess'))); } catch (error) { logger.error('Failed to resolve alert in pinned rail', error); toast.error(String(tAnal"
    },
    {
      "file": "src/components/analytics/panels/ExplorePanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "explore-title",
      "line": 32,
      "column": 30,
      "context": ") => setPreset(next as ExplorePreset); return ( <section aria-labelledby=\"explore-title\" className=\"relative\"> <h2 id=\"explore-title\" className=\"sr"
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "overview-title",
      "line": 52,
      "column": 32,
      "context": "}, [insights]); return ( <ErrorBoundary> <section aria-labelledby=\"overview-title\" className=\"space-y-6\"> <header className=\"space-y-1\">"
    },
    {
      "file": "src/components/analytics/panels/OverviewPanel.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-labelledby attribute",
      "value": "overview-insights-title",
      "line": 70,
      "column": 34,
      "context": "Type} /> </Suspense> </div> <section aria-labelledby=\"overview-insights-title\" className=\"space-y-3\"> <h3 id=\"overview-insi"
    },
    {
      "file": "src/components/analysis/CorrelationHeatmap.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading heatmap",
      "line": 59,
      "column": 121,
      "context": "Name=\"h-[420px] rounded-xl border bg-card motion-safe:animate-pulse\" aria-label=\"Loading heatmap\" />}> <EChartContainer option={option} height={420} />"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXAttribute",
      "detail": "Static aria-label attribute",
      "value": "Loading chart data",
      "line": 68,
      "column": 23,
      "context": "-destructive/30'; }; if (isAnalyzing) { return ( <div aria-label=\"Loading chart data\" className=\"h-[400px] w-full\"> <div className=\"h-ful"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "No patterns detected yet",
      "line": 79,
      "column": 14,
      "context": "\"> <Zap className=\"h-16 w-16 mx-auto mb-4 opacity-50\" /> <p>No patterns detected yet</p> <p className=\"text-sm\">Need more data for"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Need more data for pattern analysis",
      "line": 80,
      "column": 34,
      "context": "\" /> <p>No patterns detected yet</p> <p className=\"text-sm\">Need more data for pattern analysis</p> </div> </div> ); }"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Detected Patterns (",
      "line": 92,
      "column": 13,
      "context": "lex items-center gap-2\"> <Target className=\"h-5 w-5\" /> Detected Patterns ({patterns.length}) </h3> <div className=\""
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern",
      "line": 109,
      "column": 79,
      "context": "> <h4 className=\"font-medium capitalize\">{pattern.type} Pattern</h4> <Badge className={getConfidenceColor(patter"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% confident",
      "line": 111,
      "column": 65,
      "context": "n.confidence)}> {Math.round(pattern.confidence * 100)}% confident </Badge> </div>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Frequency:",
      "line": 115,
      "column": 25,
      "context": "<p className=\"text-sm text-muted-foreground mb-2\"> Frequency: {pattern.frequency} occurrences </p>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "occurrences",
      "line": 115,
      "column": 56,
      "context": "-muted-foreground mb-2\"> Frequency: {pattern.frequency} occurrences </p> {(pattern.recommend"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recommendations:",
      "line": 119,
      "column": 62,
      "context": "sName=\"space-y-1\"> <p className=\"text-sm font-medium\">Recommendations:</p> {(pattern.recommendations ?? [])."
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Predictive Insights (",
      "line": 141,
      "column": 13,
      "context": "items-center gap-2\"> <TrendingUp className=\"h-5 w-5\" /> Predictive Insights ({predictiveInsights.length}) </h3> <div"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "% confidence",
      "line": 161,
      "column": 65,
      "context": "iant=\"outline\"> {Math.round(insight.confidence * 100)}% confidence </Badge> </div>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Prediction:",
      "line": 171,
      "column": 67,
      "context": "sName=\"mb-2\"> <p className=\"text-sm font-medium mb-1\">Prediction:</p> <div className=\"flex items-center gap-"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recommendations:",
      "line": 195,
      "column": 62,
      "context": "sName=\"space-y-1\"> <p className=\"text-sm font-medium\">Recommendations:</p> {insight.recommendations.slice(0,"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Severity:",
      "line": 209,
      "column": 29,
      "context": "<Shield className=\"h-3 w-3\" /> Severity: <span className=\"font-medium capitalize\">{insight.severity}</span>"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Detected Anomalies (",
      "line": 226,
      "column": 13,
      "context": "ms-center gap-2\"> <AlertTriangle className=\"h-5 w-5\" /> Detected Anomalies ({anomalies.length}) </h3> <div className"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Anomaly",
      "line": 242,
      "column": 71,
      "context": "\"flex-1\"> <h4 className=\"font-medium mb-1\">{anomaly.type} Anomaly</h4> <p className=\"text-sm text-muted-foreground m"
    },
    {
      "file": "src/components/analysis/PatternAnalysisView.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Severity:",
      "line": 244,
      "column": 25,
      "context": "<p className=\"text-sm text-muted-foreground mb-2\"> Severity: <span className=\"font-medium capitalize\">{anomaly.severity}</span>"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "n/a",
      "line": 33,
      "column": 54,
      "context": "oBadge = (p?: number) => { if (!p && p !== 0) return <Badge variant=\"outline\">n/a</Badge>; const pct = Math.round(p * 100); const variant = p >= 0.7 ? 'de"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Insights for",
      "line": 64,
      "column": 11,
      "context": "flex items-center gap-2\"> <Lightbulb className=\"h-5 w-5\" /> Insights for {student.name} </CardTitle> </CardHeader> <Card"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "You’re viewing:",
      "line": 71,
      "column": 13,
      "context": "eset && ( <div className=\"text-sm text-muted-foreground\"> You’re viewing: <span className=\"font-medium\">{activePreset.replaceAll('_',' ')}"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Limited data — results may change as more sessions are recorded. Try tracking for at least 7 days and 10 sessions for stronger findings.",
      "line": 77,
      "column": 13,
      "context": "&& ( <div className=\"p-3 rounded-lg bg-muted/40 text-sm\"> Limited data — results may change as more sessions are recorded. Try tracking fo"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Pattern detected",
      "line": 86,
      "column": 17,
      "context": "nter gap-2\"> <TrendingUp className=\"h-4 w-4\" /> Pattern detected </div> {scoreToBadge(topPattern.con"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Correlation",
      "line": 96,
      "column": 42,
      "context": "div className=\"p-3 rounded-lg border\"> <div className=\"font-medium\">Correlation</div> <div className=\"text-sm mt-1\">{topCorr.factor1} ↔"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "↔",
      "line": 97,
      "column": 61,
      "context": "\">Correlation</div> <div className=\"text-sm mt-1\">{topCorr.factor1} ↔ {topCorr.factor2}</div> <div className=\"text-xs text-muted-foregro"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "r =",
      "line": 98,
      "column": 60,
      "context": "pCorr.factor2}</div> <div className=\"text-xs text-muted-foreground\">r = {topCorr.correlation.toFixed(2)} ({topCorr.significance})</div> </"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Recent Anomaly",
      "line": 105,
      "column": 68,
      "context": "ont-medium\"> <AlertTriangle className=\"h-4 w-4 text-amber-600\" /> Recent Anomaly </div> <div className=\"text-sm mt-1\">{ano"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Create Goal",
      "line": 112,
      "column": 105,
      "context": "t=\"outline\" size=\"sm\" onClick={onCreateGoal}><Target className=\"h-4 w-4 mr-1\" />Create Goal</Button> <Button variant=\"outline\" size=\"sm\" onClick={onAd"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Add Intervention",
      "line": 113,
      "column": 75,
      "context": "tton> <Button variant=\"outline\" size=\"sm\" onClick={onAddIntervention}>Add Intervention</Button> <Button variant=\"outline\" size=\"sm\" onClick="
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Schedule Break",
      "line": 114,
      "column": 73,
      "context": "Button> <Button variant=\"outline\" size=\"sm\" onClick={onScheduleBreak}>Schedule Break</Button> <Button variant=\"outline\" size=\"sm\" onClick={o"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Track Now",
      "line": 115,
      "column": 74,
      "context": "utton> <Button variant=\"outline\" size=\"sm\" onClick={onJumpToTracking}>Track Now</Button> </div> <div className=\"text-xs text-muted-fo"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "Data:",
      "line": 119,
      "column": 11,
      "context": "</div> <div className=\"text-xs text-muted-foreground pt-2\"> Data: {sessions} sessions, {emotions} emotions </div> </CardConten"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "sessions,",
      "line": 119,
      "column": 28,
      "context": "<div className=\"text-xs text-muted-foreground pt-2\"> Data: {sessions} sessions, {emotions} emotions </div> </CardContent> </Card>"
    },
    {
      "file": "src/components/analysis/TeacherInsightsPanel.tsx",
      "kind": "JSXText",
      "detail": "Static JSX text node",
      "value": "emotions",
      "line": 119,
      "column": 49,
      "context": "xs text-muted-foreground pt-2\"> Data: {sessions} sessions, {emotions} emotions </div> </CardContent> </Card> ); };"
    }
  ]
}